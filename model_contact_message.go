/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ContactMessage Contact information
type ContactMessage struct {
	// cc
	Cc *[]string `json:"cc,omitempty"`
	// cci
	Cci *[]string `json:"cci,omitempty"`
	// phoneNumbers
	PhoneNumbers *[]string `json:"phoneNumbers,omitempty"`
	// to
	To *[]string `json:"to,omitempty"`
}

// NewContactMessage instantiates a new ContactMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactMessage() *ContactMessage {
	this := ContactMessage{}
	return &this
}

// NewContactMessageWithDefaults instantiates a new ContactMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactMessageWithDefaults() *ContactMessage {
	this := ContactMessage{}
	return &this
}

// GetCc returns the Cc field value if set, zero value otherwise.
func (o *ContactMessage) GetCc() []string {
	if o == nil || o.Cc == nil {
		var ret []string
		return ret
	}
	return *o.Cc
}

// GetCcOk returns a tuple with the Cc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactMessage) GetCcOk() (*[]string, bool) {
	if o == nil || o.Cc == nil {
		return nil, false
	}
	return o.Cc, true
}

// HasCc returns a boolean if a field has been set.
func (o *ContactMessage) HasCc() bool {
	if o != nil && o.Cc != nil {
		return true
	}

	return false
}

// SetCc gets a reference to the given []string and assigns it to the Cc field.
func (o *ContactMessage) SetCc(v []string) {
	o.Cc = &v
}

// GetCci returns the Cci field value if set, zero value otherwise.
func (o *ContactMessage) GetCci() []string {
	if o == nil || o.Cci == nil {
		var ret []string
		return ret
	}
	return *o.Cci
}

// GetCciOk returns a tuple with the Cci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactMessage) GetCciOk() (*[]string, bool) {
	if o == nil || o.Cci == nil {
		return nil, false
	}
	return o.Cci, true
}

// HasCci returns a boolean if a field has been set.
func (o *ContactMessage) HasCci() bool {
	if o != nil && o.Cci != nil {
		return true
	}

	return false
}

// SetCci gets a reference to the given []string and assigns it to the Cci field.
func (o *ContactMessage) SetCci(v []string) {
	o.Cci = &v
}

// GetPhoneNumbers returns the PhoneNumbers field value if set, zero value otherwise.
func (o *ContactMessage) GetPhoneNumbers() []string {
	if o == nil || o.PhoneNumbers == nil {
		var ret []string
		return ret
	}
	return *o.PhoneNumbers
}

// GetPhoneNumbersOk returns a tuple with the PhoneNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactMessage) GetPhoneNumbersOk() (*[]string, bool) {
	if o == nil || o.PhoneNumbers == nil {
		return nil, false
	}
	return o.PhoneNumbers, true
}

// HasPhoneNumbers returns a boolean if a field has been set.
func (o *ContactMessage) HasPhoneNumbers() bool {
	if o != nil && o.PhoneNumbers != nil {
		return true
	}

	return false
}

// SetPhoneNumbers gets a reference to the given []string and assigns it to the PhoneNumbers field.
func (o *ContactMessage) SetPhoneNumbers(v []string) {
	o.PhoneNumbers = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ContactMessage) GetTo() []string {
	if o == nil || o.To == nil {
		var ret []string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactMessage) GetToOk() (*[]string, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ContactMessage) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given []string and assigns it to the To field.
func (o *ContactMessage) SetTo(v []string) {
	o.To = &v
}

func (o ContactMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cc != nil {
		toSerialize["cc"] = o.Cc
	}
	if o.Cci != nil {
		toSerialize["cci"] = o.Cci
	}
	if o.PhoneNumbers != nil {
		toSerialize["phoneNumbers"] = o.PhoneNumbers
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	return json.Marshal(toSerialize)
}

type NullableContactMessage struct {
	value *ContactMessage
	isSet bool
}

func (v NullableContactMessage) Get() *ContactMessage {
	return v.value
}

func (v *NullableContactMessage) Set(val *ContactMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableContactMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableContactMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactMessage(val *ContactMessage) *NullableContactMessage {
	return &NullableContactMessage{value: val, isSet: true}
}

func (v NullableContactMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


