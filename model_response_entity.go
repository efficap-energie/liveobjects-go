/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ResponseEntity struct for ResponseEntity
type ResponseEntity struct {
	Body *map[string]interface{} `json:"body,omitempty"`
	StatusCode *string `json:"statusCode,omitempty"`
	StatusCodeValue *int32 `json:"statusCodeValue,omitempty"`
}

// NewResponseEntity instantiates a new ResponseEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseEntity() *ResponseEntity {
	this := ResponseEntity{}
	return &this
}

// NewResponseEntityWithDefaults instantiates a new ResponseEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseEntityWithDefaults() *ResponseEntity {
	this := ResponseEntity{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *ResponseEntity) GetBody() map[string]interface{} {
	if o == nil || o.Body == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseEntity) GetBodyOk() (*map[string]interface{}, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *ResponseEntity) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given map[string]interface{} and assigns it to the Body field.
func (o *ResponseEntity) SetBody(v map[string]interface{}) {
	o.Body = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *ResponseEntity) GetStatusCode() string {
	if o == nil || o.StatusCode == nil {
		var ret string
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseEntity) GetStatusCodeOk() (*string, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *ResponseEntity) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given string and assigns it to the StatusCode field.
func (o *ResponseEntity) SetStatusCode(v string) {
	o.StatusCode = &v
}

// GetStatusCodeValue returns the StatusCodeValue field value if set, zero value otherwise.
func (o *ResponseEntity) GetStatusCodeValue() int32 {
	if o == nil || o.StatusCodeValue == nil {
		var ret int32
		return ret
	}
	return *o.StatusCodeValue
}

// GetStatusCodeValueOk returns a tuple with the StatusCodeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseEntity) GetStatusCodeValueOk() (*int32, bool) {
	if o == nil || o.StatusCodeValue == nil {
		return nil, false
	}
	return o.StatusCodeValue, true
}

// HasStatusCodeValue returns a boolean if a field has been set.
func (o *ResponseEntity) HasStatusCodeValue() bool {
	if o != nil && o.StatusCodeValue != nil {
		return true
	}

	return false
}

// SetStatusCodeValue gets a reference to the given int32 and assigns it to the StatusCodeValue field.
func (o *ResponseEntity) SetStatusCodeValue(v int32) {
	o.StatusCodeValue = &v
}

func (o ResponseEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.StatusCode != nil {
		toSerialize["statusCode"] = o.StatusCode
	}
	if o.StatusCodeValue != nil {
		toSerialize["statusCodeValue"] = o.StatusCodeValue
	}
	return json.Marshal(toSerialize)
}

type NullableResponseEntity struct {
	value *ResponseEntity
	isSet bool
}

func (v NullableResponseEntity) Get() *ResponseEntity {
	return v.value
}

func (v *NullableResponseEntity) Set(val *ResponseEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseEntity(val *ResponseEntity) *NullableResponseEntity {
	return &NullableResponseEntity{value: val, isSet: true}
}

func (v NullableResponseEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


