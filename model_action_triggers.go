/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ActionTriggers struct for ActionTriggers
type ActionTriggers struct {
	CommandStatus *CommandStatusTrigger `json:"commandStatus,omitempty"`
	DataMessage *DataMessageTrigger `json:"dataMessage,omitempty"`
	DeviceActivity *DeviceActivityTrigger `json:"deviceActivity,omitempty"`
	DeviceCreated *DeviceCreatedTrigger `json:"deviceCreated,omitempty"`
	DeviceDeleted *DeviceDeletedTrigger `json:"deviceDeleted,omitempty"`
	DeviceStatus *DeviceStatusTrigger `json:"deviceStatus,omitempty"`
	LoraNetwork *LoraNetworkTrigger `json:"loraNetwork,omitempty"`
	MatchingFired *MatchingFiredTrigger `json:"matchingFired,omitempty"`
	StateChange *StateChangeTrigger `json:"stateChange,omitempty"`
}

// NewActionTriggers instantiates a new ActionTriggers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionTriggers() *ActionTriggers {
	this := ActionTriggers{}
	return &this
}

// NewActionTriggersWithDefaults instantiates a new ActionTriggers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionTriggersWithDefaults() *ActionTriggers {
	this := ActionTriggers{}
	return &this
}

// GetCommandStatus returns the CommandStatus field value if set, zero value otherwise.
func (o *ActionTriggers) GetCommandStatus() CommandStatusTrigger {
	if o == nil || o.CommandStatus == nil {
		var ret CommandStatusTrigger
		return ret
	}
	return *o.CommandStatus
}

// GetCommandStatusOk returns a tuple with the CommandStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTriggers) GetCommandStatusOk() (*CommandStatusTrigger, bool) {
	if o == nil || o.CommandStatus == nil {
		return nil, false
	}
	return o.CommandStatus, true
}

// HasCommandStatus returns a boolean if a field has been set.
func (o *ActionTriggers) HasCommandStatus() bool {
	if o != nil && o.CommandStatus != nil {
		return true
	}

	return false
}

// SetCommandStatus gets a reference to the given CommandStatusTrigger and assigns it to the CommandStatus field.
func (o *ActionTriggers) SetCommandStatus(v CommandStatusTrigger) {
	o.CommandStatus = &v
}

// GetDataMessage returns the DataMessage field value if set, zero value otherwise.
func (o *ActionTriggers) GetDataMessage() DataMessageTrigger {
	if o == nil || o.DataMessage == nil {
		var ret DataMessageTrigger
		return ret
	}
	return *o.DataMessage
}

// GetDataMessageOk returns a tuple with the DataMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTriggers) GetDataMessageOk() (*DataMessageTrigger, bool) {
	if o == nil || o.DataMessage == nil {
		return nil, false
	}
	return o.DataMessage, true
}

// HasDataMessage returns a boolean if a field has been set.
func (o *ActionTriggers) HasDataMessage() bool {
	if o != nil && o.DataMessage != nil {
		return true
	}

	return false
}

// SetDataMessage gets a reference to the given DataMessageTrigger and assigns it to the DataMessage field.
func (o *ActionTriggers) SetDataMessage(v DataMessageTrigger) {
	o.DataMessage = &v
}

// GetDeviceActivity returns the DeviceActivity field value if set, zero value otherwise.
func (o *ActionTriggers) GetDeviceActivity() DeviceActivityTrigger {
	if o == nil || o.DeviceActivity == nil {
		var ret DeviceActivityTrigger
		return ret
	}
	return *o.DeviceActivity
}

// GetDeviceActivityOk returns a tuple with the DeviceActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTriggers) GetDeviceActivityOk() (*DeviceActivityTrigger, bool) {
	if o == nil || o.DeviceActivity == nil {
		return nil, false
	}
	return o.DeviceActivity, true
}

// HasDeviceActivity returns a boolean if a field has been set.
func (o *ActionTriggers) HasDeviceActivity() bool {
	if o != nil && o.DeviceActivity != nil {
		return true
	}

	return false
}

// SetDeviceActivity gets a reference to the given DeviceActivityTrigger and assigns it to the DeviceActivity field.
func (o *ActionTriggers) SetDeviceActivity(v DeviceActivityTrigger) {
	o.DeviceActivity = &v
}

// GetDeviceCreated returns the DeviceCreated field value if set, zero value otherwise.
func (o *ActionTriggers) GetDeviceCreated() DeviceCreatedTrigger {
	if o == nil || o.DeviceCreated == nil {
		var ret DeviceCreatedTrigger
		return ret
	}
	return *o.DeviceCreated
}

// GetDeviceCreatedOk returns a tuple with the DeviceCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTriggers) GetDeviceCreatedOk() (*DeviceCreatedTrigger, bool) {
	if o == nil || o.DeviceCreated == nil {
		return nil, false
	}
	return o.DeviceCreated, true
}

// HasDeviceCreated returns a boolean if a field has been set.
func (o *ActionTriggers) HasDeviceCreated() bool {
	if o != nil && o.DeviceCreated != nil {
		return true
	}

	return false
}

// SetDeviceCreated gets a reference to the given DeviceCreatedTrigger and assigns it to the DeviceCreated field.
func (o *ActionTriggers) SetDeviceCreated(v DeviceCreatedTrigger) {
	o.DeviceCreated = &v
}

// GetDeviceDeleted returns the DeviceDeleted field value if set, zero value otherwise.
func (o *ActionTriggers) GetDeviceDeleted() DeviceDeletedTrigger {
	if o == nil || o.DeviceDeleted == nil {
		var ret DeviceDeletedTrigger
		return ret
	}
	return *o.DeviceDeleted
}

// GetDeviceDeletedOk returns a tuple with the DeviceDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTriggers) GetDeviceDeletedOk() (*DeviceDeletedTrigger, bool) {
	if o == nil || o.DeviceDeleted == nil {
		return nil, false
	}
	return o.DeviceDeleted, true
}

// HasDeviceDeleted returns a boolean if a field has been set.
func (o *ActionTriggers) HasDeviceDeleted() bool {
	if o != nil && o.DeviceDeleted != nil {
		return true
	}

	return false
}

// SetDeviceDeleted gets a reference to the given DeviceDeletedTrigger and assigns it to the DeviceDeleted field.
func (o *ActionTriggers) SetDeviceDeleted(v DeviceDeletedTrigger) {
	o.DeviceDeleted = &v
}

// GetDeviceStatus returns the DeviceStatus field value if set, zero value otherwise.
func (o *ActionTriggers) GetDeviceStatus() DeviceStatusTrigger {
	if o == nil || o.DeviceStatus == nil {
		var ret DeviceStatusTrigger
		return ret
	}
	return *o.DeviceStatus
}

// GetDeviceStatusOk returns a tuple with the DeviceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTriggers) GetDeviceStatusOk() (*DeviceStatusTrigger, bool) {
	if o == nil || o.DeviceStatus == nil {
		return nil, false
	}
	return o.DeviceStatus, true
}

// HasDeviceStatus returns a boolean if a field has been set.
func (o *ActionTriggers) HasDeviceStatus() bool {
	if o != nil && o.DeviceStatus != nil {
		return true
	}

	return false
}

// SetDeviceStatus gets a reference to the given DeviceStatusTrigger and assigns it to the DeviceStatus field.
func (o *ActionTriggers) SetDeviceStatus(v DeviceStatusTrigger) {
	o.DeviceStatus = &v
}

// GetLoraNetwork returns the LoraNetwork field value if set, zero value otherwise.
func (o *ActionTriggers) GetLoraNetwork() LoraNetworkTrigger {
	if o == nil || o.LoraNetwork == nil {
		var ret LoraNetworkTrigger
		return ret
	}
	return *o.LoraNetwork
}

// GetLoraNetworkOk returns a tuple with the LoraNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTriggers) GetLoraNetworkOk() (*LoraNetworkTrigger, bool) {
	if o == nil || o.LoraNetwork == nil {
		return nil, false
	}
	return o.LoraNetwork, true
}

// HasLoraNetwork returns a boolean if a field has been set.
func (o *ActionTriggers) HasLoraNetwork() bool {
	if o != nil && o.LoraNetwork != nil {
		return true
	}

	return false
}

// SetLoraNetwork gets a reference to the given LoraNetworkTrigger and assigns it to the LoraNetwork field.
func (o *ActionTriggers) SetLoraNetwork(v LoraNetworkTrigger) {
	o.LoraNetwork = &v
}

// GetMatchingFired returns the MatchingFired field value if set, zero value otherwise.
func (o *ActionTriggers) GetMatchingFired() MatchingFiredTrigger {
	if o == nil || o.MatchingFired == nil {
		var ret MatchingFiredTrigger
		return ret
	}
	return *o.MatchingFired
}

// GetMatchingFiredOk returns a tuple with the MatchingFired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTriggers) GetMatchingFiredOk() (*MatchingFiredTrigger, bool) {
	if o == nil || o.MatchingFired == nil {
		return nil, false
	}
	return o.MatchingFired, true
}

// HasMatchingFired returns a boolean if a field has been set.
func (o *ActionTriggers) HasMatchingFired() bool {
	if o != nil && o.MatchingFired != nil {
		return true
	}

	return false
}

// SetMatchingFired gets a reference to the given MatchingFiredTrigger and assigns it to the MatchingFired field.
func (o *ActionTriggers) SetMatchingFired(v MatchingFiredTrigger) {
	o.MatchingFired = &v
}

// GetStateChange returns the StateChange field value if set, zero value otherwise.
func (o *ActionTriggers) GetStateChange() StateChangeTrigger {
	if o == nil || o.StateChange == nil {
		var ret StateChangeTrigger
		return ret
	}
	return *o.StateChange
}

// GetStateChangeOk returns a tuple with the StateChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTriggers) GetStateChangeOk() (*StateChangeTrigger, bool) {
	if o == nil || o.StateChange == nil {
		return nil, false
	}
	return o.StateChange, true
}

// HasStateChange returns a boolean if a field has been set.
func (o *ActionTriggers) HasStateChange() bool {
	if o != nil && o.StateChange != nil {
		return true
	}

	return false
}

// SetStateChange gets a reference to the given StateChangeTrigger and assigns it to the StateChange field.
func (o *ActionTriggers) SetStateChange(v StateChangeTrigger) {
	o.StateChange = &v
}

func (o ActionTriggers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommandStatus != nil {
		toSerialize["commandStatus"] = o.CommandStatus
	}
	if o.DataMessage != nil {
		toSerialize["dataMessage"] = o.DataMessage
	}
	if o.DeviceActivity != nil {
		toSerialize["deviceActivity"] = o.DeviceActivity
	}
	if o.DeviceCreated != nil {
		toSerialize["deviceCreated"] = o.DeviceCreated
	}
	if o.DeviceDeleted != nil {
		toSerialize["deviceDeleted"] = o.DeviceDeleted
	}
	if o.DeviceStatus != nil {
		toSerialize["deviceStatus"] = o.DeviceStatus
	}
	if o.LoraNetwork != nil {
		toSerialize["loraNetwork"] = o.LoraNetwork
	}
	if o.MatchingFired != nil {
		toSerialize["matchingFired"] = o.MatchingFired
	}
	if o.StateChange != nil {
		toSerialize["stateChange"] = o.StateChange
	}
	return json.Marshal(toSerialize)
}

type NullableActionTriggers struct {
	value *ActionTriggers
	isSet bool
}

func (v NullableActionTriggers) Get() *ActionTriggers {
	return v.value
}

func (v *NullableActionTriggers) Set(val *ActionTriggers) {
	v.value = val
	v.isSet = true
}

func (v NullableActionTriggers) IsSet() bool {
	return v.isSet
}

func (v *NullableActionTriggers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionTriggers(val *ActionTriggers) *NullableActionTriggers {
	return &NullableActionTriggers{value: val, isSet: true}
}

func (v NullableActionTriggers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionTriggers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


