/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// Group struct for Group
type Group struct {
	// Date/time when group was first registered
	Created string `json:"created"`
	// Group description
	Description string `json:"description"`
	// Group identifier
	Id string `json:"id"`
	// Parent group identifier
	ParentId string `json:"parentId"`
	// Path
	Path string `json:"path"`
	// Path node
	PathNode string `json:"pathNode"`
	// Date/time when group status has been lastly updated
	Updated string `json:"updated"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup(created string, description string, id string, parentId string, path string, pathNode string, updated string, ) *Group {
	this := Group{}
	this.Created = created
	this.Description = description
	this.Id = id
	this.ParentId = parentId
	this.Path = path
	this.PathNode = pathNode
	this.Updated = updated
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	return &this
}

// GetCreated returns the Created field value
func (o *Group) GetCreated() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Group) GetCreatedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Group) SetCreated(v string) {
	o.Created = v
}

// GetDescription returns the Description field value
func (o *Group) GetDescription() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Group) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Group) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *Group) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Group) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Group) SetId(v string) {
	o.Id = v
}

// GetParentId returns the ParentId field value
func (o *Group) GetParentId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value
// and a boolean to check if the value has been set.
func (o *Group) GetParentIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ParentId, true
}

// SetParentId sets field value
func (o *Group) SetParentId(v string) {
	o.ParentId = v
}

// GetPath returns the Path field value
func (o *Group) GetPath() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *Group) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *Group) SetPath(v string) {
	o.Path = v
}

// GetPathNode returns the PathNode field value
func (o *Group) GetPathNode() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.PathNode
}

// GetPathNodeOk returns a tuple with the PathNode field value
// and a boolean to check if the value has been set.
func (o *Group) GetPathNodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PathNode, true
}

// SetPathNode sets field value
func (o *Group) SetPathNode(v string) {
	o.PathNode = v
}

// GetUpdated returns the Updated field value
func (o *Group) GetUpdated() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *Group) GetUpdatedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *Group) SetUpdated(v string) {
	o.Updated = v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["parentId"] = o.ParentId
	}
	if true {
		toSerialize["path"] = o.Path
	}
	if true {
		toSerialize["pathNode"] = o.PathNode
	}
	if true {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


