/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// Group struct for Group
type Group struct {
	// Date/time when group was first registered
	CreationTs int64 `json:"creationTs"`
	// group description
	Description string `json:"description"`
	// Group identifier
	GroupId string `json:"groupId"`
	// Date/time when group status has been lastly updated
	LastUpdateTs int64 `json:"lastUpdateTs"`
	// parent
	Parent string `json:"parent"`
	// path
	Path string `json:"path"`
	// path node
	PathNode string `json:"pathNode"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup(creationTs int64, description string, groupId string, lastUpdateTs int64, parent string, path string, pathNode string, ) *Group {
	this := Group{}
	this.CreationTs = creationTs
	this.Description = description
	this.GroupId = groupId
	this.LastUpdateTs = lastUpdateTs
	this.Parent = parent
	this.Path = path
	this.PathNode = pathNode
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	return &this
}

// GetCreationTs returns the CreationTs field value
func (o *Group) GetCreationTs() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.CreationTs
}

// GetCreationTsOk returns a tuple with the CreationTs field value
// and a boolean to check if the value has been set.
func (o *Group) GetCreationTsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreationTs, true
}

// SetCreationTs sets field value
func (o *Group) SetCreationTs(v int64) {
	o.CreationTs = v
}

// GetDescription returns the Description field value
func (o *Group) GetDescription() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Group) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Group) SetDescription(v string) {
	o.Description = v
}

// GetGroupId returns the GroupId field value
func (o *Group) GetGroupId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *Group) GetGroupIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *Group) SetGroupId(v string) {
	o.GroupId = v
}

// GetLastUpdateTs returns the LastUpdateTs field value
func (o *Group) GetLastUpdateTs() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.LastUpdateTs
}

// GetLastUpdateTsOk returns a tuple with the LastUpdateTs field value
// and a boolean to check if the value has been set.
func (o *Group) GetLastUpdateTsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LastUpdateTs, true
}

// SetLastUpdateTs sets field value
func (o *Group) SetLastUpdateTs(v int64) {
	o.LastUpdateTs = v
}

// GetParent returns the Parent field value
func (o *Group) GetParent() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Parent
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
func (o *Group) GetParentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Parent, true
}

// SetParent sets field value
func (o *Group) SetParent(v string) {
	o.Parent = v
}

// GetPath returns the Path field value
func (o *Group) GetPath() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *Group) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *Group) SetPath(v string) {
	o.Path = v
}

// GetPathNode returns the PathNode field value
func (o *Group) GetPathNode() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.PathNode
}

// GetPathNodeOk returns a tuple with the PathNode field value
// and a boolean to check if the value has been set.
func (o *Group) GetPathNodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PathNode, true
}

// SetPathNode sets field value
func (o *Group) SetPathNode(v string) {
	o.PathNode = v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["creationTs"] = o.CreationTs
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["groupId"] = o.GroupId
	}
	if true {
		toSerialize["lastUpdateTs"] = o.LastUpdateTs
	}
	if true {
		toSerialize["parent"] = o.Parent
	}
	if true {
		toSerialize["path"] = o.Path
	}
	if true {
		toSerialize["pathNode"] = o.PathNode
	}
	return json.Marshal(toSerialize)
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


