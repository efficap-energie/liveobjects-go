/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// Command struct for Command
type Command struct {
	// command unique identifier
	Id *string `json:"id,omitempty"`
	// targeted device identifier (URN)
	TargetDeviceId *string `json:"targetDeviceId,omitempty"`
	Request *CommandRequest `json:"request,omitempty"`
	Response *CommandResponse `json:"response,omitempty"`
	// command current status
	Status *string `json:"status,omitempty"`
	// command current delivery status
	DeliveryStatus *string `json:"deliveryStatus,omitempty"`
	// error code in case of ERROR status
	ErrorCode *string `json:"errorCode,omitempty"`
	Policy *CommandPolicy `json:"policy,omitempty"`
	// command history
	History *[]CommandHistory `json:"history,omitempty"`
	// topic where command status change notification are published
	NotifyTo *string `json:"notifyTo,omitempty"`
	// command creation date/time
	Created *string `json:"created,omitempty"`
	// command last status update date/time
	Updated *string `json:"updated,omitempty"`
}

// NewCommand instantiates a new Command object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommand() *Command {
	this := Command{}
	return &this
}

// NewCommandWithDefaults instantiates a new Command object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandWithDefaults() *Command {
	this := Command{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Command) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Command) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Command) SetId(v string) {
	o.Id = &v
}

// GetTargetDeviceId returns the TargetDeviceId field value if set, zero value otherwise.
func (o *Command) GetTargetDeviceId() string {
	if o == nil || o.TargetDeviceId == nil {
		var ret string
		return ret
	}
	return *o.TargetDeviceId
}

// GetTargetDeviceIdOk returns a tuple with the TargetDeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetTargetDeviceIdOk() (*string, bool) {
	if o == nil || o.TargetDeviceId == nil {
		return nil, false
	}
	return o.TargetDeviceId, true
}

// HasTargetDeviceId returns a boolean if a field has been set.
func (o *Command) HasTargetDeviceId() bool {
	if o != nil && o.TargetDeviceId != nil {
		return true
	}

	return false
}

// SetTargetDeviceId gets a reference to the given string and assigns it to the TargetDeviceId field.
func (o *Command) SetTargetDeviceId(v string) {
	o.TargetDeviceId = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *Command) GetRequest() CommandRequest {
	if o == nil || o.Request == nil {
		var ret CommandRequest
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetRequestOk() (*CommandRequest, bool) {
	if o == nil || o.Request == nil {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *Command) HasRequest() bool {
	if o != nil && o.Request != nil {
		return true
	}

	return false
}

// SetRequest gets a reference to the given CommandRequest and assigns it to the Request field.
func (o *Command) SetRequest(v CommandRequest) {
	o.Request = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *Command) GetResponse() CommandResponse {
	if o == nil || o.Response == nil {
		var ret CommandResponse
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetResponseOk() (*CommandResponse, bool) {
	if o == nil || o.Response == nil {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *Command) HasResponse() bool {
	if o != nil && o.Response != nil {
		return true
	}

	return false
}

// SetResponse gets a reference to the given CommandResponse and assigns it to the Response field.
func (o *Command) SetResponse(v CommandResponse) {
	o.Response = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Command) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Command) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Command) SetStatus(v string) {
	o.Status = &v
}

// GetDeliveryStatus returns the DeliveryStatus field value if set, zero value otherwise.
func (o *Command) GetDeliveryStatus() string {
	if o == nil || o.DeliveryStatus == nil {
		var ret string
		return ret
	}
	return *o.DeliveryStatus
}

// GetDeliveryStatusOk returns a tuple with the DeliveryStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetDeliveryStatusOk() (*string, bool) {
	if o == nil || o.DeliveryStatus == nil {
		return nil, false
	}
	return o.DeliveryStatus, true
}

// HasDeliveryStatus returns a boolean if a field has been set.
func (o *Command) HasDeliveryStatus() bool {
	if o != nil && o.DeliveryStatus != nil {
		return true
	}

	return false
}

// SetDeliveryStatus gets a reference to the given string and assigns it to the DeliveryStatus field.
func (o *Command) SetDeliveryStatus(v string) {
	o.DeliveryStatus = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *Command) GetErrorCode() string {
	if o == nil || o.ErrorCode == nil {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetErrorCodeOk() (*string, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *Command) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *Command) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *Command) GetPolicy() CommandPolicy {
	if o == nil || o.Policy == nil {
		var ret CommandPolicy
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetPolicyOk() (*CommandPolicy, bool) {
	if o == nil || o.Policy == nil {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *Command) HasPolicy() bool {
	if o != nil && o.Policy != nil {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given CommandPolicy and assigns it to the Policy field.
func (o *Command) SetPolicy(v CommandPolicy) {
	o.Policy = &v
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *Command) GetHistory() []CommandHistory {
	if o == nil || o.History == nil {
		var ret []CommandHistory
		return ret
	}
	return *o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetHistoryOk() (*[]CommandHistory, bool) {
	if o == nil || o.History == nil {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *Command) HasHistory() bool {
	if o != nil && o.History != nil {
		return true
	}

	return false
}

// SetHistory gets a reference to the given []CommandHistory and assigns it to the History field.
func (o *Command) SetHistory(v []CommandHistory) {
	o.History = &v
}

// GetNotifyTo returns the NotifyTo field value if set, zero value otherwise.
func (o *Command) GetNotifyTo() string {
	if o == nil || o.NotifyTo == nil {
		var ret string
		return ret
	}
	return *o.NotifyTo
}

// GetNotifyToOk returns a tuple with the NotifyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetNotifyToOk() (*string, bool) {
	if o == nil || o.NotifyTo == nil {
		return nil, false
	}
	return o.NotifyTo, true
}

// HasNotifyTo returns a boolean if a field has been set.
func (o *Command) HasNotifyTo() bool {
	if o != nil && o.NotifyTo != nil {
		return true
	}

	return false
}

// SetNotifyTo gets a reference to the given string and assigns it to the NotifyTo field.
func (o *Command) SetNotifyTo(v string) {
	o.NotifyTo = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Command) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetCreatedOk() (*string, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Command) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *Command) SetCreated(v string) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Command) GetUpdated() string {
	if o == nil || o.Updated == nil {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Command) GetUpdatedOk() (*string, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Command) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *Command) SetUpdated(v string) {
	o.Updated = &v
}

func (o Command) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.TargetDeviceId != nil {
		toSerialize["targetDeviceId"] = o.TargetDeviceId
	}
	if o.Request != nil {
		toSerialize["request"] = o.Request
	}
	if o.Response != nil {
		toSerialize["response"] = o.Response
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.DeliveryStatus != nil {
		toSerialize["deliveryStatus"] = o.DeliveryStatus
	}
	if o.ErrorCode != nil {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if o.Policy != nil {
		toSerialize["policy"] = o.Policy
	}
	if o.History != nil {
		toSerialize["history"] = o.History
	}
	if o.NotifyTo != nil {
		toSerialize["notifyTo"] = o.NotifyTo
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableCommand struct {
	value *Command
	isSet bool
}

func (v NullableCommand) Get() *Command {
	return v.value
}

func (v *NullableCommand) Set(val *Command) {
	v.value = val
	v.isSet = true
}

func (v NullableCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommand(val *Command) *NullableCommand {
	return &NullableCommand{value: val, isSet: true}
}

func (v NullableCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


