/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// Asset struct for Asset
type Asset struct {
	// True if asset is considered connected
	Connected bool `json:"connected"`
	// Date/time when asset was first registered
	CreationTs int64 `json:"creationTs"`
	// device description
	Description *string `json:"description,omitempty"`
	// Group Id where this asset is localize
	GroupId *string `json:"groupId,omitempty"`
	// Group path where this asset is localize
	GroupPath *string `json:"groupPath,omitempty"`
	// Asset identifier
	Id string `json:"id"`
	// Date/time when asset status has been lastly updated
	LastUpdateTs *int64 `json:"lastUpdateTs,omitempty"`
	// Additional asset info (from last device \"connected\" event)
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	// human readable name
	Name *string `json:"name,omitempty"`
	// Asset identifier namespace
	Namespace string `json:"namespace"`
	// Last path taken by a received message describing the asset status(i.e. connected/disconnected): the series of assets that forwarded the message.
	Path *[]AssetAlias `json:"path,omitempty"`
	// Static asset properties (from device provisioning
	Properties *map[string]string `json:"properties,omitempty"`
	// Device tags
	Tags *[]string `json:"tags,omitempty"`
	// Topic where generic commands can be sent to asset (if asset is still connected)
	TopicCommand *string `json:"topicCommand,omitempty"`
	// Topic where param update requests can be sent to asset (if asset is still connected)
	TopicParamUpdate *string `json:"topicParamUpdate,omitempty"`
	// Topic where resource update requests can be sent to asset (if asset is still connected)
	TopicResourceUpdate *string `json:"topicResourceUpdate,omitempty"`
}

// NewAsset instantiates a new Asset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsset(connected bool, creationTs int64, id string, namespace string, ) *Asset {
	this := Asset{}
	this.Connected = connected
	this.CreationTs = creationTs
	this.Id = id
	this.Namespace = namespace
	return &this
}

// NewAssetWithDefaults instantiates a new Asset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetWithDefaults() *Asset {
	this := Asset{}
	return &this
}

// GetConnected returns the Connected field value
func (o *Asset) GetConnected() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Connected
}

// GetConnectedOk returns a tuple with the Connected field value
// and a boolean to check if the value has been set.
func (o *Asset) GetConnectedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Connected, true
}

// SetConnected sets field value
func (o *Asset) SetConnected(v bool) {
	o.Connected = v
}

// GetCreationTs returns the CreationTs field value
func (o *Asset) GetCreationTs() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.CreationTs
}

// GetCreationTsOk returns a tuple with the CreationTs field value
// and a boolean to check if the value has been set.
func (o *Asset) GetCreationTsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreationTs, true
}

// SetCreationTs sets field value
func (o *Asset) SetCreationTs(v int64) {
	o.CreationTs = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Asset) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Asset) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Asset) SetDescription(v string) {
	o.Description = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *Asset) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *Asset) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *Asset) SetGroupId(v string) {
	o.GroupId = &v
}

// GetGroupPath returns the GroupPath field value if set, zero value otherwise.
func (o *Asset) GetGroupPath() string {
	if o == nil || o.GroupPath == nil {
		var ret string
		return ret
	}
	return *o.GroupPath
}

// GetGroupPathOk returns a tuple with the GroupPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetGroupPathOk() (*string, bool) {
	if o == nil || o.GroupPath == nil {
		return nil, false
	}
	return o.GroupPath, true
}

// HasGroupPath returns a boolean if a field has been set.
func (o *Asset) HasGroupPath() bool {
	if o != nil && o.GroupPath != nil {
		return true
	}

	return false
}

// SetGroupPath gets a reference to the given string and assigns it to the GroupPath field.
func (o *Asset) SetGroupPath(v string) {
	o.GroupPath = &v
}

// GetId returns the Id field value
func (o *Asset) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Asset) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Asset) SetId(v string) {
	o.Id = v
}

// GetLastUpdateTs returns the LastUpdateTs field value if set, zero value otherwise.
func (o *Asset) GetLastUpdateTs() int64 {
	if o == nil || o.LastUpdateTs == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdateTs
}

// GetLastUpdateTsOk returns a tuple with the LastUpdateTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetLastUpdateTsOk() (*int64, bool) {
	if o == nil || o.LastUpdateTs == nil {
		return nil, false
	}
	return o.LastUpdateTs, true
}

// HasLastUpdateTs returns a boolean if a field has been set.
func (o *Asset) HasLastUpdateTs() bool {
	if o != nil && o.LastUpdateTs != nil {
		return true
	}

	return false
}

// SetLastUpdateTs gets a reference to the given int64 and assigns it to the LastUpdateTs field.
func (o *Asset) SetLastUpdateTs(v int64) {
	o.LastUpdateTs = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Asset) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetMetadataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Asset) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Asset) SetMetadata(v map[string]interface{}) {
	o.Metadata = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Asset) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Asset) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Asset) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value
func (o *Asset) GetNamespace() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *Asset) GetNamespaceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *Asset) SetNamespace(v string) {
	o.Namespace = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *Asset) GetPath() []AssetAlias {
	if o == nil || o.Path == nil {
		var ret []AssetAlias
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetPathOk() (*[]AssetAlias, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *Asset) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given []AssetAlias and assigns it to the Path field.
func (o *Asset) SetPath(v []AssetAlias) {
	o.Path = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Asset) GetProperties() map[string]string {
	if o == nil || o.Properties == nil {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Asset) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *Asset) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Asset) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Asset) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Asset) SetTags(v []string) {
	o.Tags = &v
}

// GetTopicCommand returns the TopicCommand field value if set, zero value otherwise.
func (o *Asset) GetTopicCommand() string {
	if o == nil || o.TopicCommand == nil {
		var ret string
		return ret
	}
	return *o.TopicCommand
}

// GetTopicCommandOk returns a tuple with the TopicCommand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetTopicCommandOk() (*string, bool) {
	if o == nil || o.TopicCommand == nil {
		return nil, false
	}
	return o.TopicCommand, true
}

// HasTopicCommand returns a boolean if a field has been set.
func (o *Asset) HasTopicCommand() bool {
	if o != nil && o.TopicCommand != nil {
		return true
	}

	return false
}

// SetTopicCommand gets a reference to the given string and assigns it to the TopicCommand field.
func (o *Asset) SetTopicCommand(v string) {
	o.TopicCommand = &v
}

// GetTopicParamUpdate returns the TopicParamUpdate field value if set, zero value otherwise.
func (o *Asset) GetTopicParamUpdate() string {
	if o == nil || o.TopicParamUpdate == nil {
		var ret string
		return ret
	}
	return *o.TopicParamUpdate
}

// GetTopicParamUpdateOk returns a tuple with the TopicParamUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetTopicParamUpdateOk() (*string, bool) {
	if o == nil || o.TopicParamUpdate == nil {
		return nil, false
	}
	return o.TopicParamUpdate, true
}

// HasTopicParamUpdate returns a boolean if a field has been set.
func (o *Asset) HasTopicParamUpdate() bool {
	if o != nil && o.TopicParamUpdate != nil {
		return true
	}

	return false
}

// SetTopicParamUpdate gets a reference to the given string and assigns it to the TopicParamUpdate field.
func (o *Asset) SetTopicParamUpdate(v string) {
	o.TopicParamUpdate = &v
}

// GetTopicResourceUpdate returns the TopicResourceUpdate field value if set, zero value otherwise.
func (o *Asset) GetTopicResourceUpdate() string {
	if o == nil || o.TopicResourceUpdate == nil {
		var ret string
		return ret
	}
	return *o.TopicResourceUpdate
}

// GetTopicResourceUpdateOk returns a tuple with the TopicResourceUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetTopicResourceUpdateOk() (*string, bool) {
	if o == nil || o.TopicResourceUpdate == nil {
		return nil, false
	}
	return o.TopicResourceUpdate, true
}

// HasTopicResourceUpdate returns a boolean if a field has been set.
func (o *Asset) HasTopicResourceUpdate() bool {
	if o != nil && o.TopicResourceUpdate != nil {
		return true
	}

	return false
}

// SetTopicResourceUpdate gets a reference to the given string and assigns it to the TopicResourceUpdate field.
func (o *Asset) SetTopicResourceUpdate(v string) {
	o.TopicResourceUpdate = &v
}

func (o Asset) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["connected"] = o.Connected
	}
	if true {
		toSerialize["creationTs"] = o.CreationTs
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.GroupId != nil {
		toSerialize["groupId"] = o.GroupId
	}
	if o.GroupPath != nil {
		toSerialize["groupPath"] = o.GroupPath
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.LastUpdateTs != nil {
		toSerialize["lastUpdateTs"] = o.LastUpdateTs
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TopicCommand != nil {
		toSerialize["topicCommand"] = o.TopicCommand
	}
	if o.TopicParamUpdate != nil {
		toSerialize["topicParamUpdate"] = o.TopicParamUpdate
	}
	if o.TopicResourceUpdate != nil {
		toSerialize["topicResourceUpdate"] = o.TopicResourceUpdate
	}
	return json.Marshal(toSerialize)
}

type NullableAsset struct {
	value *Asset
	isSet bool
}

func (v NullableAsset) Get() *Asset {
	return v.value
}

func (v *NullableAsset) Set(val *Asset) {
	v.value = val
	v.isSet = true
}

func (v NullableAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsset(val *Asset) *NullableAsset {
	return &NullableAsset{value: val, isSet: true}
}

func (v NullableAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


