/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// MessageSelectorFilter struct for MessageSelectorFilter
type MessageSelectorFilter struct {
	// list of filtered connectors.
	Connectors *[]string `json:"connectors,omitempty"`
	// list of filtered devices.
	DeviceIds *[]string `json:"deviceIds,omitempty"`
	// list of filtered group paths
	GroupPaths *[]GroupPath `json:"groupPaths,omitempty"`
}

// NewMessageSelectorFilter instantiates a new MessageSelectorFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageSelectorFilter() *MessageSelectorFilter {
	this := MessageSelectorFilter{}
	return &this
}

// NewMessageSelectorFilterWithDefaults instantiates a new MessageSelectorFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageSelectorFilterWithDefaults() *MessageSelectorFilter {
	this := MessageSelectorFilter{}
	return &this
}

// GetConnectors returns the Connectors field value if set, zero value otherwise.
func (o *MessageSelectorFilter) GetConnectors() []string {
	if o == nil || o.Connectors == nil {
		var ret []string
		return ret
	}
	return *o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageSelectorFilter) GetConnectorsOk() (*[]string, bool) {
	if o == nil || o.Connectors == nil {
		return nil, false
	}
	return o.Connectors, true
}

// HasConnectors returns a boolean if a field has been set.
func (o *MessageSelectorFilter) HasConnectors() bool {
	if o != nil && o.Connectors != nil {
		return true
	}

	return false
}

// SetConnectors gets a reference to the given []string and assigns it to the Connectors field.
func (o *MessageSelectorFilter) SetConnectors(v []string) {
	o.Connectors = &v
}

// GetDeviceIds returns the DeviceIds field value if set, zero value otherwise.
func (o *MessageSelectorFilter) GetDeviceIds() []string {
	if o == nil || o.DeviceIds == nil {
		var ret []string
		return ret
	}
	return *o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageSelectorFilter) GetDeviceIdsOk() (*[]string, bool) {
	if o == nil || o.DeviceIds == nil {
		return nil, false
	}
	return o.DeviceIds, true
}

// HasDeviceIds returns a boolean if a field has been set.
func (o *MessageSelectorFilter) HasDeviceIds() bool {
	if o != nil && o.DeviceIds != nil {
		return true
	}

	return false
}

// SetDeviceIds gets a reference to the given []string and assigns it to the DeviceIds field.
func (o *MessageSelectorFilter) SetDeviceIds(v []string) {
	o.DeviceIds = &v
}

// GetGroupPaths returns the GroupPaths field value if set, zero value otherwise.
func (o *MessageSelectorFilter) GetGroupPaths() []GroupPath {
	if o == nil || o.GroupPaths == nil {
		var ret []GroupPath
		return ret
	}
	return *o.GroupPaths
}

// GetGroupPathsOk returns a tuple with the GroupPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageSelectorFilter) GetGroupPathsOk() (*[]GroupPath, bool) {
	if o == nil || o.GroupPaths == nil {
		return nil, false
	}
	return o.GroupPaths, true
}

// HasGroupPaths returns a boolean if a field has been set.
func (o *MessageSelectorFilter) HasGroupPaths() bool {
	if o != nil && o.GroupPaths != nil {
		return true
	}

	return false
}

// SetGroupPaths gets a reference to the given []GroupPath and assigns it to the GroupPaths field.
func (o *MessageSelectorFilter) SetGroupPaths(v []GroupPath) {
	o.GroupPaths = &v
}

func (o MessageSelectorFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Connectors != nil {
		toSerialize["connectors"] = o.Connectors
	}
	if o.DeviceIds != nil {
		toSerialize["deviceIds"] = o.DeviceIds
	}
	if o.GroupPaths != nil {
		toSerialize["groupPaths"] = o.GroupPaths
	}
	return json.Marshal(toSerialize)
}

type NullableMessageSelectorFilter struct {
	value *MessageSelectorFilter
	isSet bool
}

func (v NullableMessageSelectorFilter) Get() *MessageSelectorFilter {
	return v.value
}

func (v *NullableMessageSelectorFilter) Set(val *MessageSelectorFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageSelectorFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageSelectorFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageSelectorFilter(val *MessageSelectorFilter) *NullableMessageSelectorFilter {
	return &NullableMessageSelectorFilter{value: val, isSet: true}
}

func (v NullableMessageSelectorFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageSelectorFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


