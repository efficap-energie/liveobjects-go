/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// MatchingRule defines the dataPredicate that will be applied to all new data. When it matches, then it may trigger a FiredEvent based on linked FiringRules defined.
type MatchingRule struct {
	// the JsonLogic (http://jsonlogic.com/) pattern matching that will trigger an event for each new data that match this predicate. This JsonLogic predicate needs to return a boolean.
	DataPredicate *map[string]interface{} `json:"dataPredicate,omitempty"`
	// activate or not the MatchingRule. Default is false.
	Enabled *bool `json:"enabled,omitempty"`
	// id of the MatchingRule. Should be null when used for POST.
	Id *string `json:"id,omitempty"`
	// name of the MatchingRule. Must be unique.
	Name string `json:"name"`
}

// NewMatchingRule instantiates a new MatchingRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchingRule(name string, ) *MatchingRule {
	this := MatchingRule{}
	this.Name = name
	return &this
}

// NewMatchingRuleWithDefaults instantiates a new MatchingRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchingRuleWithDefaults() *MatchingRule {
	this := MatchingRule{}
	return &this
}

// GetDataPredicate returns the DataPredicate field value if set, zero value otherwise.
func (o *MatchingRule) GetDataPredicate() map[string]interface{} {
	if o == nil || o.DataPredicate == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.DataPredicate
}

// GetDataPredicateOk returns a tuple with the DataPredicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchingRule) GetDataPredicateOk() (*map[string]interface{}, bool) {
	if o == nil || o.DataPredicate == nil {
		return nil, false
	}
	return o.DataPredicate, true
}

// HasDataPredicate returns a boolean if a field has been set.
func (o *MatchingRule) HasDataPredicate() bool {
	if o != nil && o.DataPredicate != nil {
		return true
	}

	return false
}

// SetDataPredicate gets a reference to the given map[string]interface{} and assigns it to the DataPredicate field.
func (o *MatchingRule) SetDataPredicate(v map[string]interface{}) {
	o.DataPredicate = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *MatchingRule) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchingRule) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *MatchingRule) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *MatchingRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MatchingRule) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchingRule) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MatchingRule) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MatchingRule) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *MatchingRule) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MatchingRule) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MatchingRule) SetName(v string) {
	o.Name = v
}

func (o MatchingRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataPredicate != nil {
		toSerialize["dataPredicate"] = o.DataPredicate
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableMatchingRule struct {
	value *MatchingRule
	isSet bool
}

func (v NullableMatchingRule) Get() *MatchingRule {
	return v.value
}

func (v *NullableMatchingRule) Set(val *MatchingRule) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchingRule) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchingRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchingRule(val *MatchingRule) *NullableMatchingRule {
	return &NullableMatchingRule{value: val, isSet: true}
}

func (v NullableMatchingRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchingRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


