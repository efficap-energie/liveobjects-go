/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// FiringGuard Hold a FiringRule from triggering a FiredEvent if it has already been sent for the same aggregationKeys. Will exist only for FiringRule of type ONCE or SLEEP.
type FiringGuard struct {
	// creation of this FiringGuard
	Created string `json:"created"`
	// expiration of this FiringGuard
	ExpireAt *string `json:"expireAt,omitempty"`
	// id of the FiringRule linked to this FiringGuard.
	FiringRuleId string `json:"firingRuleId"`
	// pairs of aggregationKey/value that are hold by this FiringGuard
	GuardCriteria []SelectionCriteria `json:"guardCriteria"`
	// id of the FiringGuard.
	Id string `json:"id"`
	MatchingContext MatchingContext `json:"matchingContext"`
	// identifier of tenant account this FiringRule belongs to .
	TenantId string `json:"tenantId"`
}

// NewFiringGuard instantiates a new FiringGuard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiringGuard(created string, firingRuleId string, guardCriteria []SelectionCriteria, id string, matchingContext MatchingContext, tenantId string, ) *FiringGuard {
	this := FiringGuard{}
	this.Created = created
	this.FiringRuleId = firingRuleId
	this.GuardCriteria = guardCriteria
	this.Id = id
	this.MatchingContext = matchingContext
	this.TenantId = tenantId
	return &this
}

// NewFiringGuardWithDefaults instantiates a new FiringGuard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiringGuardWithDefaults() *FiringGuard {
	this := FiringGuard{}
	return &this
}

// GetCreated returns the Created field value
func (o *FiringGuard) GetCreated() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *FiringGuard) GetCreatedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *FiringGuard) SetCreated(v string) {
	o.Created = v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise.
func (o *FiringGuard) GetExpireAt() string {
	if o == nil || o.ExpireAt == nil {
		var ret string
		return ret
	}
	return *o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiringGuard) GetExpireAtOk() (*string, bool) {
	if o == nil || o.ExpireAt == nil {
		return nil, false
	}
	return o.ExpireAt, true
}

// HasExpireAt returns a boolean if a field has been set.
func (o *FiringGuard) HasExpireAt() bool {
	if o != nil && o.ExpireAt != nil {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given string and assigns it to the ExpireAt field.
func (o *FiringGuard) SetExpireAt(v string) {
	o.ExpireAt = &v
}

// GetFiringRuleId returns the FiringRuleId field value
func (o *FiringGuard) GetFiringRuleId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.FiringRuleId
}

// GetFiringRuleIdOk returns a tuple with the FiringRuleId field value
// and a boolean to check if the value has been set.
func (o *FiringGuard) GetFiringRuleIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FiringRuleId, true
}

// SetFiringRuleId sets field value
func (o *FiringGuard) SetFiringRuleId(v string) {
	o.FiringRuleId = v
}

// GetGuardCriteria returns the GuardCriteria field value
func (o *FiringGuard) GetGuardCriteria() []SelectionCriteria {
	if o == nil  {
		var ret []SelectionCriteria
		return ret
	}

	return o.GuardCriteria
}

// GetGuardCriteriaOk returns a tuple with the GuardCriteria field value
// and a boolean to check if the value has been set.
func (o *FiringGuard) GetGuardCriteriaOk() (*[]SelectionCriteria, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GuardCriteria, true
}

// SetGuardCriteria sets field value
func (o *FiringGuard) SetGuardCriteria(v []SelectionCriteria) {
	o.GuardCriteria = v
}

// GetId returns the Id field value
func (o *FiringGuard) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FiringGuard) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FiringGuard) SetId(v string) {
	o.Id = v
}

// GetMatchingContext returns the MatchingContext field value
func (o *FiringGuard) GetMatchingContext() MatchingContext {
	if o == nil  {
		var ret MatchingContext
		return ret
	}

	return o.MatchingContext
}

// GetMatchingContextOk returns a tuple with the MatchingContext field value
// and a boolean to check if the value has been set.
func (o *FiringGuard) GetMatchingContextOk() (*MatchingContext, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MatchingContext, true
}

// SetMatchingContext sets field value
func (o *FiringGuard) SetMatchingContext(v MatchingContext) {
	o.MatchingContext = v
}

// GetTenantId returns the TenantId field value
func (o *FiringGuard) GetTenantId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *FiringGuard) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *FiringGuard) SetTenantId(v string) {
	o.TenantId = v
}

func (o FiringGuard) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created"] = o.Created
	}
	if o.ExpireAt != nil {
		toSerialize["expireAt"] = o.ExpireAt
	}
	if true {
		toSerialize["firingRuleId"] = o.FiringRuleId
	}
	if true {
		toSerialize["guardCriteria"] = o.GuardCriteria
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["matchingContext"] = o.MatchingContext
	}
	if true {
		toSerialize["tenantId"] = o.TenantId
	}
	return json.Marshal(toSerialize)
}

type NullableFiringGuard struct {
	value *FiringGuard
	isSet bool
}

func (v NullableFiringGuard) Get() *FiringGuard {
	return v.value
}

func (v *NullableFiringGuard) Set(val *FiringGuard) {
	v.value = val
	v.isSet = true
}

func (v NullableFiringGuard) IsSet() bool {
	return v.isSet
}

func (v *NullableFiringGuard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiringGuard(val *FiringGuard) *NullableFiringGuard {
	return &NullableFiringGuard{value: val, isSet: true}
}

func (v NullableFiringGuard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiringGuard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


