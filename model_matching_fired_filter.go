/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// MatchingFiredFilter struct for MatchingFiredFilter
type MatchingFiredFilter struct {
	// list of filtered rule Ids. Null or empty to accept all rule Ids
	RuleIds *[]string `json:"ruleIds,omitempty"`
}

// NewMatchingFiredFilter instantiates a new MatchingFiredFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchingFiredFilter() *MatchingFiredFilter {
	this := MatchingFiredFilter{}
	return &this
}

// NewMatchingFiredFilterWithDefaults instantiates a new MatchingFiredFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchingFiredFilterWithDefaults() *MatchingFiredFilter {
	this := MatchingFiredFilter{}
	return &this
}

// GetRuleIds returns the RuleIds field value if set, zero value otherwise.
func (o *MatchingFiredFilter) GetRuleIds() []string {
	if o == nil || o.RuleIds == nil {
		var ret []string
		return ret
	}
	return *o.RuleIds
}

// GetRuleIdsOk returns a tuple with the RuleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchingFiredFilter) GetRuleIdsOk() (*[]string, bool) {
	if o == nil || o.RuleIds == nil {
		return nil, false
	}
	return o.RuleIds, true
}

// HasRuleIds returns a boolean if a field has been set.
func (o *MatchingFiredFilter) HasRuleIds() bool {
	if o != nil && o.RuleIds != nil {
		return true
	}

	return false
}

// SetRuleIds gets a reference to the given []string and assigns it to the RuleIds field.
func (o *MatchingFiredFilter) SetRuleIds(v []string) {
	o.RuleIds = &v
}

func (o MatchingFiredFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RuleIds != nil {
		toSerialize["ruleIds"] = o.RuleIds
	}
	return json.Marshal(toSerialize)
}

type NullableMatchingFiredFilter struct {
	value *MatchingFiredFilter
	isSet bool
}

func (v NullableMatchingFiredFilter) Get() *MatchingFiredFilter {
	return v.value
}

func (v *NullableMatchingFiredFilter) Set(val *MatchingFiredFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchingFiredFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchingFiredFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchingFiredFilter(val *MatchingFiredFilter) *NullableMatchingFiredFilter {
	return &NullableMatchingFiredFilter{value: val, isSet: true}
}

func (v NullableMatchingFiredFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchingFiredFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


