/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// EventProcessingMatchingApiService EventProcessingMatchingApi service
type EventProcessingMatchingApiService service

type ApiDeleteUsingDELETE18Request struct {
	ctx _context.Context
	ApiService *EventProcessingMatchingApiService
	matchingRuleId string
	xAPIKEY *string
}

func (r ApiDeleteUsingDELETE18Request) XAPIKEY(xAPIKEY string) ApiDeleteUsingDELETE18Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiDeleteUsingDELETE18Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteUsingDELETE18Execute(r)
}

/*
 * DeleteUsingDELETE18 Delete a MatchingRule
 * Usage of this API will be reported in your access log under 'alarming' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param matchingRuleId id of the MatchingRule to delete
 * @return ApiDeleteUsingDELETE18Request
 */
func (a *EventProcessingMatchingApiService) DeleteUsingDELETE18(ctx _context.Context, matchingRuleId string) ApiDeleteUsingDELETE18Request {
	return ApiDeleteUsingDELETE18Request{
		ApiService: a,
		ctx: ctx,
		matchingRuleId: matchingRuleId,
	}
}

/*
 * Execute executes the request
 */
func (a *EventProcessingMatchingApiService) DeleteUsingDELETE18Execute(r ApiDeleteUsingDELETE18Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingMatchingApiService.DeleteUsingDELETE18")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/matching-rule/{matchingRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"matchingRuleId"+"}", _neturl.PathEscape(parameterToString(r.matchingRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetUsingGET17Request struct {
	ctx _context.Context
	ApiService *EventProcessingMatchingApiService
	matchingRuleId string
	xAPIKEY *string
}

func (r ApiGetUsingGET17Request) XAPIKEY(xAPIKEY string) ApiGetUsingGET17Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetUsingGET17Request) Execute() (MatchingRule, *_nethttp.Response, error) {
	return r.ApiService.GetUsingGET17Execute(r)
}

/*
 * GetUsingGET17 Retrieve a MatchingRule
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param matchingRuleId id of the MatchingRule to retrieve
 * @return ApiGetUsingGET17Request
 */
func (a *EventProcessingMatchingApiService) GetUsingGET17(ctx _context.Context, matchingRuleId string) ApiGetUsingGET17Request {
	return ApiGetUsingGET17Request{
		ApiService: a,
		ctx: ctx,
		matchingRuleId: matchingRuleId,
	}
}

/*
 * Execute executes the request
 * @return MatchingRule
 */
func (a *EventProcessingMatchingApiService) GetUsingGET17Execute(r ApiGetUsingGET17Request) (MatchingRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MatchingRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingMatchingApiService.GetUsingGET17")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/matching-rule/{matchingRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"matchingRuleId"+"}", _neturl.PathEscape(parameterToString(r.matchingRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUsingGET20Request struct {
	ctx _context.Context
	ApiService *EventProcessingMatchingApiService
	xAPIKEY *string
	name *string
}

func (r ApiListUsingGET20Request) XAPIKEY(xAPIKEY string) ApiListUsingGET20Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiListUsingGET20Request) Name(name string) ApiListUsingGET20Request {
	r.name = &name
	return r
}

func (r ApiListUsingGET20Request) Execute() ([]MatchingRule, *_nethttp.Response, error) {
	return r.ApiService.ListUsingGET20Execute(r)
}

/*
 * ListUsingGET20 Retrieve the list of all the MatchingRules or get a MatchingRule by its name
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListUsingGET20Request
 */
func (a *EventProcessingMatchingApiService) ListUsingGET20(ctx _context.Context) ApiListUsingGET20Request {
	return ApiListUsingGET20Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []MatchingRule
 */
func (a *EventProcessingMatchingApiService) ListUsingGET20Execute(r ApiListUsingGET20Request) ([]MatchingRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MatchingRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingMatchingApiService.ListUsingGET20")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/matching-rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostUsingPOST15Request struct {
	ctx _context.Context
	ApiService *EventProcessingMatchingApiService
	xAPIKEY *string
	matchRule *MatchingRule
}

func (r ApiPostUsingPOST15Request) XAPIKEY(xAPIKEY string) ApiPostUsingPOST15Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiPostUsingPOST15Request) MatchRule(matchRule MatchingRule) ApiPostUsingPOST15Request {
	r.matchRule = &matchRule
	return r
}

func (r ApiPostUsingPOST15Request) Execute() (MatchingRule, *_nethttp.Response, error) {
	return r.ApiService.PostUsingPOST15Execute(r)
}

/*
 * PostUsingPOST15 Create a MatchingRule
 * Total number of MatchingRules is limited. Contact the commercial team or see developer guide to get more information.<br><br>Usage of this API will be reported in your access log under 'alarming' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPostUsingPOST15Request
 */
func (a *EventProcessingMatchingApiService) PostUsingPOST15(ctx _context.Context) ApiPostUsingPOST15Request {
	return ApiPostUsingPOST15Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return MatchingRule
 */
func (a *EventProcessingMatchingApiService) PostUsingPOST15Execute(r ApiPostUsingPOST15Request) (MatchingRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MatchingRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingMatchingApiService.PostUsingPOST15")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/matching-rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.matchRule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTestUsingPOST4Request struct {
	ctx _context.Context
	ApiService *EventProcessingMatchingApiService
	xAPIKEY *string
	dataMatchTest *DataMatchTest
}

func (r ApiTestUsingPOST4Request) XAPIKEY(xAPIKEY string) ApiTestUsingPOST4Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiTestUsingPOST4Request) DataMatchTest(dataMatchTest DataMatchTest) ApiTestUsingPOST4Request {
	r.dataMatchTest = &dataMatchTest
	return r
}

func (r ApiTestUsingPOST4Request) Execute() (DataMatchResult, *_nethttp.Response, error) {
	return r.ApiService.TestUsingPOST4Execute(r)
}

/*
 * TestUsingPOST4 Test a JsonLogic predicate with some data sample
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiTestUsingPOST4Request
 */
func (a *EventProcessingMatchingApiService) TestUsingPOST4(ctx _context.Context) ApiTestUsingPOST4Request {
	return ApiTestUsingPOST4Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return DataMatchResult
 */
func (a *EventProcessingMatchingApiService) TestUsingPOST4Execute(r ApiTestUsingPOST4Request) (DataMatchResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DataMatchResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingMatchingApiService.TestUsingPOST4")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/matching-rule/test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.dataMatchTest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateUsingPUT9Request struct {
	ctx _context.Context
	ApiService *EventProcessingMatchingApiService
	matchingRuleId string
	xAPIKEY *string
	matchingRule *MatchingRule
}

func (r ApiUpdateUsingPUT9Request) XAPIKEY(xAPIKEY string) ApiUpdateUsingPUT9Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiUpdateUsingPUT9Request) MatchingRule(matchingRule MatchingRule) ApiUpdateUsingPUT9Request {
	r.matchingRule = &matchingRule
	return r
}

func (r ApiUpdateUsingPUT9Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UpdateUsingPUT9Execute(r)
}

/*
 * UpdateUsingPUT9 Update a MatchingRule
 * Usage of this API will be reported in your access log under 'alarming' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param matchingRuleId id of the MatchingRule to update
 * @return ApiUpdateUsingPUT9Request
 */
func (a *EventProcessingMatchingApiService) UpdateUsingPUT9(ctx _context.Context, matchingRuleId string) ApiUpdateUsingPUT9Request {
	return ApiUpdateUsingPUT9Request{
		ApiService: a,
		ctx: ctx,
		matchingRuleId: matchingRuleId,
	}
}

/*
 * Execute executes the request
 */
func (a *EventProcessingMatchingApiService) UpdateUsingPUT9Execute(r ApiUpdateUsingPUT9Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingMatchingApiService.UpdateUsingPUT9")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/matching-rule/{matchingRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"matchingRuleId"+"}", _neturl.PathEscape(parameterToString(r.matchingRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.matchingRule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
