/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// DataManagementDataSearchApiService DataManagementDataSearchApi service
type DataManagementDataSearchApiService service

type ApiDslQueryHitsOnlyUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *DataManagementDataSearchApiService
	xAPIKEY *string
	dslRequest *map[string]interface{}
}

func (r ApiDslQueryHitsOnlyUsingPOSTRequest) XAPIKEY(xAPIKEY string) ApiDslQueryHitsOnlyUsingPOSTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiDslQueryHitsOnlyUsingPOSTRequest) DslRequest(dslRequest map[string]interface{}) ApiDslQueryHitsOnlyUsingPOSTRequest {
	r.dslRequest = &dslRequest
	return r
}

func (r ApiDslQueryHitsOnlyUsingPOSTRequest) Execute() ([]DataStoredWeb, *_nethttp.Response, error) {
	return r.ApiService.DslQueryHitsOnlyUsingPOSTExecute(r)
}

/*
 * DslQueryHitsOnlyUsingPOST Query an Elasticsearch Domain Specific Language request and get only hits result
 * return a json array of stored data that match the query.<br><br>Restricted to API keys with at least one of the following roles : DATA_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDslQueryHitsOnlyUsingPOSTRequest
 */
func (a *DataManagementDataSearchApiService) DslQueryHitsOnlyUsingPOST(ctx _context.Context) ApiDslQueryHitsOnlyUsingPOSTRequest {
	return ApiDslQueryHitsOnlyUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []DataStoredWeb
 */
func (a *DataManagementDataSearchApiService) DslQueryHitsOnlyUsingPOSTExecute(r ApiDslQueryHitsOnlyUsingPOSTRequest) ([]DataStoredWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []DataStoredWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataManagementDataSearchApiService.DslQueryHitsOnlyUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/data/search/hits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.dslRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDslQueryUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *DataManagementDataSearchApiService
	xAPIKEY *string
	dslRequest *map[string]interface{}
}

func (r ApiDslQueryUsingPOSTRequest) XAPIKEY(xAPIKEY string) ApiDslQueryUsingPOSTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiDslQueryUsingPOSTRequest) DslRequest(dslRequest map[string]interface{}) ApiDslQueryUsingPOSTRequest {
	r.dslRequest = &dslRequest
	return r
}

func (r ApiDslQueryUsingPOSTRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.DslQueryUsingPOSTExecute(r)
}

/*
 * DslQueryUsingPOST Query an Elasticsearch Domain Specific Language request
 * return the json serialization of an Elasticsearch SearchResponse for the query<br><br>Restricted to API keys with at least one of the following roles : DATA_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDslQueryUsingPOSTRequest
 */
func (a *DataManagementDataSearchApiService) DslQueryUsingPOST(ctx _context.Context) ApiDslQueryUsingPOSTRequest {
	return ApiDslQueryUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return map[string]interface{}
 */
func (a *DataManagementDataSearchApiService) DslQueryUsingPOSTExecute(r ApiDslQueryUsingPOSTRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataManagementDataSearchApiService.DslQueryUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/data/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.dslRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
