/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// MonthMetrics struct for MonthMetrics
type MonthMetrics struct {
	// connector (lora, mqtt, http) statistics
	Connectors *map[string]ConnectorAccounting `json:"connectors,omitempty"`
	// month in \"YYYY-MM\" format.
	Month *string `json:"month,omitempty"`
	// service statistics
	Services *map[string]map[string]int64 `json:"services,omitempty"`
}

// NewMonthMetrics instantiates a new MonthMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthMetrics() *MonthMetrics {
	this := MonthMetrics{}
	return &this
}

// NewMonthMetricsWithDefaults instantiates a new MonthMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthMetricsWithDefaults() *MonthMetrics {
	this := MonthMetrics{}
	return &this
}

// GetConnectors returns the Connectors field value if set, zero value otherwise.
func (o *MonthMetrics) GetConnectors() map[string]ConnectorAccounting {
	if o == nil || o.Connectors == nil {
		var ret map[string]ConnectorAccounting
		return ret
	}
	return *o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthMetrics) GetConnectorsOk() (*map[string]ConnectorAccounting, bool) {
	if o == nil || o.Connectors == nil {
		return nil, false
	}
	return o.Connectors, true
}

// HasConnectors returns a boolean if a field has been set.
func (o *MonthMetrics) HasConnectors() bool {
	if o != nil && o.Connectors != nil {
		return true
	}

	return false
}

// SetConnectors gets a reference to the given map[string]ConnectorAccounting and assigns it to the Connectors field.
func (o *MonthMetrics) SetConnectors(v map[string]ConnectorAccounting) {
	o.Connectors = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *MonthMetrics) GetMonth() string {
	if o == nil || o.Month == nil {
		var ret string
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthMetrics) GetMonthOk() (*string, bool) {
	if o == nil || o.Month == nil {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *MonthMetrics) HasMonth() bool {
	if o != nil && o.Month != nil {
		return true
	}

	return false
}

// SetMonth gets a reference to the given string and assigns it to the Month field.
func (o *MonthMetrics) SetMonth(v string) {
	o.Month = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *MonthMetrics) GetServices() map[string]map[string]int64 {
	if o == nil || o.Services == nil {
		var ret map[string]map[string]int64
		return ret
	}
	return *o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthMetrics) GetServicesOk() (*map[string]map[string]int64, bool) {
	if o == nil || o.Services == nil {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *MonthMetrics) HasServices() bool {
	if o != nil && o.Services != nil {
		return true
	}

	return false
}

// SetServices gets a reference to the given map[string]map[string]int64 and assigns it to the Services field.
func (o *MonthMetrics) SetServices(v map[string]map[string]int64) {
	o.Services = &v
}

func (o MonthMetrics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Connectors != nil {
		toSerialize["connectors"] = o.Connectors
	}
	if o.Month != nil {
		toSerialize["month"] = o.Month
	}
	if o.Services != nil {
		toSerialize["services"] = o.Services
	}
	return json.Marshal(toSerialize)
}

type NullableMonthMetrics struct {
	value *MonthMetrics
	isSet bool
}

func (v NullableMonthMetrics) Get() *MonthMetrics {
	return v.value
}

func (v *NullableMonthMetrics) Set(val *MonthMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthMetrics(val *MonthMetrics) *NullableMonthMetrics {
	return &NullableMonthMetrics{value: val, isSet: true}
}

func (v NullableMonthMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


