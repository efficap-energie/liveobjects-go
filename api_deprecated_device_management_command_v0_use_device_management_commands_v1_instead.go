/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApi service
type DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService service

type ApiAddCommandUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService
	assetNamespace string
	assetId string
	xAPIKEY *string
	notifyTo *string
	command *AssetCommandWeb
}

func (r ApiAddCommandUsingPOSTRequest) XAPIKEY(xAPIKEY string) ApiAddCommandUsingPOSTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiAddCommandUsingPOSTRequest) NotifyTo(notifyTo string) ApiAddCommandUsingPOSTRequest {
	r.notifyTo = &notifyTo
	return r
}
func (r ApiAddCommandUsingPOSTRequest) Command(command AssetCommandWeb) ApiAddCommandUsingPOSTRequest {
	r.command = &command
	return r
}

func (r ApiAddCommandUsingPOSTRequest) Execute() (CommandV0, *_nethttp.Response, error) {
	return r.ApiService.AddCommandUsingPOSTExecute(r)
}

/*
 * AddCommandUsingPOST Register a new command
 * Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetNamespace target asset namespace. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId target asset identifier. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @return ApiAddCommandUsingPOSTRequest
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) AddCommandUsingPOST(ctx _context.Context, assetNamespace string, assetId string) ApiAddCommandUsingPOSTRequest {
	return ApiAddCommandUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
		assetNamespace: assetNamespace,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 * @return CommandV0
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) AddCommandUsingPOSTExecute(r ApiAddCommandUsingPOSTRequest) (CommandV0, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CommandV0
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService.AddCommandUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/assets/{assetNamespace}/{assetId}/commands"
	localVarPath = strings.Replace(localVarPath, "{"+"assetNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.notifyTo != nil {
		localVarQueryParams.Add("notifyTo", parameterToString(*r.notifyTo, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.command
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCommandUsingDELETERequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService
	commandId string
	xAPIKEY *string
}

func (r ApiDeleteCommandUsingDELETERequest) XAPIKEY(xAPIKEY string) ApiDeleteCommandUsingDELETERequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiDeleteCommandUsingDELETERequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteCommandUsingDELETEExecute(r)
}

/*
 * DeleteCommandUsingDELETE Delete a specific command
 * Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param commandId identifier of specific command. Expected identifier (max 24 characters)
 * @return ApiDeleteCommandUsingDELETERequest
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) DeleteCommandUsingDELETE(ctx _context.Context, commandId string) ApiDeleteCommandUsingDELETERequest {
	return ApiDeleteCommandUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		commandId: commandId,
	}
}

/*
 * Execute executes the request
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) DeleteCommandUsingDELETEExecute(r ApiDeleteCommandUsingDELETERequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService.DeleteCommandUsingDELETE")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/commands/{commandId}"
	localVarPath = strings.Replace(localVarPath, "{"+"commandId"+"}", _neturl.PathEscape(parameterToString(r.commandId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAssetCommandsUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService
	assetNamespace string
	assetId string
	xAPIKEY *string
	size *int64
	page *int64
	sort *[]string
}

func (r ApiGetAssetCommandsUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetAssetCommandsUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiGetAssetCommandsUsingGETRequest) Size(size int64) ApiGetAssetCommandsUsingGETRequest {
	r.size = &size
	return r
}
func (r ApiGetAssetCommandsUsingGETRequest) Page(page int64) ApiGetAssetCommandsUsingGETRequest {
	r.page = &page
	return r
}
func (r ApiGetAssetCommandsUsingGETRequest) Sort(sort []string) ApiGetAssetCommandsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiGetAssetCommandsUsingGETRequest) Execute() (PageableCommandV0, *_nethttp.Response, error) {
	return r.ApiService.GetAssetCommandsUsingGETExecute(r)
}

/*
 * GetAssetCommandsUsingGET Get a list of commands targeting a specific asset
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetNamespace requested commands target asset namespace. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId requested commands target asset identifier. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @return ApiGetAssetCommandsUsingGETRequest
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) GetAssetCommandsUsingGET(ctx _context.Context, assetNamespace string, assetId string) ApiGetAssetCommandsUsingGETRequest {
	return ApiGetAssetCommandsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		assetNamespace: assetNamespace,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 * @return PageableCommandV0
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) GetAssetCommandsUsingGETExecute(r ApiGetAssetCommandsUsingGETRequest) (PageableCommandV0, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageableCommandV0
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService.GetAssetCommandsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/assets/{assetNamespace}/{assetId}/commands"
	localVarPath = strings.Replace(localVarPath, "{"+"assetNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sort", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sort", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCommandStatusUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService
	commandId string
	xAPIKEY *string
}

func (r ApiGetCommandStatusUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetCommandStatusUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetCommandStatusUsingGETRequest) Execute() (SimpleStringWeb, *_nethttp.Response, error) {
	return r.ApiService.GetCommandStatusUsingGETExecute(r)
}

/*
 * GetCommandStatusUsingGET Get the status of a specific command
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param commandId identifier of specific command. Expected identifier (max 24 characters)
 * @return ApiGetCommandStatusUsingGETRequest
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) GetCommandStatusUsingGET(ctx _context.Context, commandId string) ApiGetCommandStatusUsingGETRequest {
	return ApiGetCommandStatusUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		commandId: commandId,
	}
}

/*
 * Execute executes the request
 * @return SimpleStringWeb
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) GetCommandStatusUsingGETExecute(r ApiGetCommandStatusUsingGETRequest) (SimpleStringWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SimpleStringWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService.GetCommandStatusUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/commands/{commandId}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"commandId"+"}", _neturl.PathEscape(parameterToString(r.commandId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCommandUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService
	commandId string
	xAPIKEY *string
}

func (r ApiGetCommandUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetCommandUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetCommandUsingGETRequest) Execute() (CommandV0, *_nethttp.Response, error) {
	return r.ApiService.GetCommandUsingGETExecute(r)
}

/*
 * GetCommandUsingGET Get a specific command
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param commandId identifier of specific command. Expected identifier (max 24 characters)
 * @return ApiGetCommandUsingGETRequest
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) GetCommandUsingGET(ctx _context.Context, commandId string) ApiGetCommandUsingGETRequest {
	return ApiGetCommandUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		commandId: commandId,
	}
}

/*
 * Execute executes the request
 * @return CommandV0
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) GetCommandUsingGETExecute(r ApiGetCommandUsingGETRequest) (CommandV0, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CommandV0
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService.GetCommandUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/commands/{commandId}"
	localVarPath = strings.Replace(localVarPath, "{"+"commandId"+"}", _neturl.PathEscape(parameterToString(r.commandId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCommandsUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService
	xAPIKEY *string
	size *int64
	page *int64
	sort *[]string
}

func (r ApiListCommandsUsingGETRequest) XAPIKEY(xAPIKEY string) ApiListCommandsUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiListCommandsUsingGETRequest) Size(size int64) ApiListCommandsUsingGETRequest {
	r.size = &size
	return r
}
func (r ApiListCommandsUsingGETRequest) Page(page int64) ApiListCommandsUsingGETRequest {
	r.page = &page
	return r
}
func (r ApiListCommandsUsingGETRequest) Sort(sort []string) ApiListCommandsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListCommandsUsingGETRequest) Execute() (PageableCommandV0, *_nethttp.Response, error) {
	return r.ApiService.ListCommandsUsingGETExecute(r)
}

/*
 * ListCommandsUsingGET List registered commands
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListCommandsUsingGETRequest
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) ListCommandsUsingGET(ctx _context.Context) ApiListCommandsUsingGETRequest {
	return ApiListCommandsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PageableCommandV0
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) ListCommandsUsingGETExecute(r ApiListCommandsUsingGETRequest) (PageableCommandV0, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageableCommandV0
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService.ListCommandsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/commands"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sort", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sort", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetCommandStatusUsingPUTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService
	commandId string
	xAPIKEY *string
	force *bool
	newStatus *string
}

func (r ApiSetCommandStatusUsingPUTRequest) XAPIKEY(xAPIKEY string) ApiSetCommandStatusUsingPUTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiSetCommandStatusUsingPUTRequest) Force(force bool) ApiSetCommandStatusUsingPUTRequest {
	r.force = &force
	return r
}
func (r ApiSetCommandStatusUsingPUTRequest) NewStatus(newStatus string) ApiSetCommandStatusUsingPUTRequest {
	r.newStatus = &newStatus
	return r
}

func (r ApiSetCommandStatusUsingPUTRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SetCommandStatusUsingPUTExecute(r)
}

/*
 * SetCommandStatusUsingPUT Update the status of specific command 
 * Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param commandId identifier of specific command. Expected identifier (max 24 characters)
 * @return ApiSetCommandStatusUsingPUTRequest
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) SetCommandStatusUsingPUT(ctx _context.Context, commandId string) ApiSetCommandStatusUsingPUTRequest {
	return ApiSetCommandStatusUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		commandId: commandId,
	}
}

/*
 * Execute executes the request
 */
func (a *DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService) SetCommandStatusUsingPUTExecute(r ApiSetCommandStatusUsingPUTRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementCommandV0UseDeviceManagementCommandsV1InsteadApiService.SetCommandStatusUsingPUT")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/commands/{commandId}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"commandId"+"}", _neturl.PathEscape(parameterToString(r.commandId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.newStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
