/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// AssetParameterValue struct for AssetParameterValue
type AssetParameterValue struct {
	Type *string `json:"type,omitempty"`
	ValueBinary *[]string `json:"valueBinary,omitempty"`
	ValueFloat *float64 `json:"valueFloat,omitempty"`
	ValueInt32 *int32 `json:"valueInt32,omitempty"`
	ValueString *string `json:"valueString,omitempty"`
	ValueUInt32 *int64 `json:"valueUInt32,omitempty"`
}

// NewAssetParameterValue instantiates a new AssetParameterValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetParameterValue() *AssetParameterValue {
	this := AssetParameterValue{}
	return &this
}

// NewAssetParameterValueWithDefaults instantiates a new AssetParameterValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetParameterValueWithDefaults() *AssetParameterValue {
	this := AssetParameterValue{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AssetParameterValue) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetParameterValue) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AssetParameterValue) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AssetParameterValue) SetType(v string) {
	o.Type = &v
}

// GetValueBinary returns the ValueBinary field value if set, zero value otherwise.
func (o *AssetParameterValue) GetValueBinary() []string {
	if o == nil || o.ValueBinary == nil {
		var ret []string
		return ret
	}
	return *o.ValueBinary
}

// GetValueBinaryOk returns a tuple with the ValueBinary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetParameterValue) GetValueBinaryOk() (*[]string, bool) {
	if o == nil || o.ValueBinary == nil {
		return nil, false
	}
	return o.ValueBinary, true
}

// HasValueBinary returns a boolean if a field has been set.
func (o *AssetParameterValue) HasValueBinary() bool {
	if o != nil && o.ValueBinary != nil {
		return true
	}

	return false
}

// SetValueBinary gets a reference to the given []string and assigns it to the ValueBinary field.
func (o *AssetParameterValue) SetValueBinary(v []string) {
	o.ValueBinary = &v
}

// GetValueFloat returns the ValueFloat field value if set, zero value otherwise.
func (o *AssetParameterValue) GetValueFloat() float64 {
	if o == nil || o.ValueFloat == nil {
		var ret float64
		return ret
	}
	return *o.ValueFloat
}

// GetValueFloatOk returns a tuple with the ValueFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetParameterValue) GetValueFloatOk() (*float64, bool) {
	if o == nil || o.ValueFloat == nil {
		return nil, false
	}
	return o.ValueFloat, true
}

// HasValueFloat returns a boolean if a field has been set.
func (o *AssetParameterValue) HasValueFloat() bool {
	if o != nil && o.ValueFloat != nil {
		return true
	}

	return false
}

// SetValueFloat gets a reference to the given float64 and assigns it to the ValueFloat field.
func (o *AssetParameterValue) SetValueFloat(v float64) {
	o.ValueFloat = &v
}

// GetValueInt32 returns the ValueInt32 field value if set, zero value otherwise.
func (o *AssetParameterValue) GetValueInt32() int32 {
	if o == nil || o.ValueInt32 == nil {
		var ret int32
		return ret
	}
	return *o.ValueInt32
}

// GetValueInt32Ok returns a tuple with the ValueInt32 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetParameterValue) GetValueInt32Ok() (*int32, bool) {
	if o == nil || o.ValueInt32 == nil {
		return nil, false
	}
	return o.ValueInt32, true
}

// HasValueInt32 returns a boolean if a field has been set.
func (o *AssetParameterValue) HasValueInt32() bool {
	if o != nil && o.ValueInt32 != nil {
		return true
	}

	return false
}

// SetValueInt32 gets a reference to the given int32 and assigns it to the ValueInt32 field.
func (o *AssetParameterValue) SetValueInt32(v int32) {
	o.ValueInt32 = &v
}

// GetValueString returns the ValueString field value if set, zero value otherwise.
func (o *AssetParameterValue) GetValueString() string {
	if o == nil || o.ValueString == nil {
		var ret string
		return ret
	}
	return *o.ValueString
}

// GetValueStringOk returns a tuple with the ValueString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetParameterValue) GetValueStringOk() (*string, bool) {
	if o == nil || o.ValueString == nil {
		return nil, false
	}
	return o.ValueString, true
}

// HasValueString returns a boolean if a field has been set.
func (o *AssetParameterValue) HasValueString() bool {
	if o != nil && o.ValueString != nil {
		return true
	}

	return false
}

// SetValueString gets a reference to the given string and assigns it to the ValueString field.
func (o *AssetParameterValue) SetValueString(v string) {
	o.ValueString = &v
}

// GetValueUInt32 returns the ValueUInt32 field value if set, zero value otherwise.
func (o *AssetParameterValue) GetValueUInt32() int64 {
	if o == nil || o.ValueUInt32 == nil {
		var ret int64
		return ret
	}
	return *o.ValueUInt32
}

// GetValueUInt32Ok returns a tuple with the ValueUInt32 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetParameterValue) GetValueUInt32Ok() (*int64, bool) {
	if o == nil || o.ValueUInt32 == nil {
		return nil, false
	}
	return o.ValueUInt32, true
}

// HasValueUInt32 returns a boolean if a field has been set.
func (o *AssetParameterValue) HasValueUInt32() bool {
	if o != nil && o.ValueUInt32 != nil {
		return true
	}

	return false
}

// SetValueUInt32 gets a reference to the given int64 and assigns it to the ValueUInt32 field.
func (o *AssetParameterValue) SetValueUInt32(v int64) {
	o.ValueUInt32 = &v
}

func (o AssetParameterValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.ValueBinary != nil {
		toSerialize["valueBinary"] = o.ValueBinary
	}
	if o.ValueFloat != nil {
		toSerialize["valueFloat"] = o.ValueFloat
	}
	if o.ValueInt32 != nil {
		toSerialize["valueInt32"] = o.ValueInt32
	}
	if o.ValueString != nil {
		toSerialize["valueString"] = o.ValueString
	}
	if o.ValueUInt32 != nil {
		toSerialize["valueUInt32"] = o.ValueUInt32
	}
	return json.Marshal(toSerialize)
}

type NullableAssetParameterValue struct {
	value *AssetParameterValue
	isSet bool
}

func (v NullableAssetParameterValue) Get() *AssetParameterValue {
	return v.value
}

func (v *NullableAssetParameterValue) Set(val *AssetParameterValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetParameterValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetParameterValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetParameterValue(val *AssetParameterValue) *NullableAssetParameterValue {
	return &NullableAssetParameterValue{value: val, isSet: true}
}

func (v NullableAssetParameterValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetParameterValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


