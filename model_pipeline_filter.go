/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// PipelineFilter struct for PipelineFilter
type PipelineFilter struct {
	// list of filtered connectors. Null or empty to accept all connectors
	Connectors *[]string `json:"connectors,omitempty"`
	// list of filtered datamessage's encodings. Null or empty to accept all datamessage's encodings
	Encodings *[]string `json:"encodings,omitempty"`
	// list of filtered group paths. Null or empty to accept all group paths
	GroupPaths *[]GroupPath `json:"groupPaths,omitempty"`
	// list of groups of tags that should be contained in message tags. There is a match if at least one group of tags is a match. A group of tags is a match if the tags of the message contains all elements of this group.<br>e.g. [[\"ALERT\"]] will match all messages containing tag 'ALERT'.<br>e.g. [[\"HIGH\", \"ALERT\"],[\"PROD\"]] will match messages with either tag 'PROD' or both tags 'ALERT' and 'HIGH'.
	Tags *[][]string `json:"tags,omitempty"`
}

// NewPipelineFilter instantiates a new PipelineFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineFilter() *PipelineFilter {
	this := PipelineFilter{}
	return &this
}

// NewPipelineFilterWithDefaults instantiates a new PipelineFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineFilterWithDefaults() *PipelineFilter {
	this := PipelineFilter{}
	return &this
}

// GetConnectors returns the Connectors field value if set, zero value otherwise.
func (o *PipelineFilter) GetConnectors() []string {
	if o == nil || o.Connectors == nil {
		var ret []string
		return ret
	}
	return *o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineFilter) GetConnectorsOk() (*[]string, bool) {
	if o == nil || o.Connectors == nil {
		return nil, false
	}
	return o.Connectors, true
}

// HasConnectors returns a boolean if a field has been set.
func (o *PipelineFilter) HasConnectors() bool {
	if o != nil && o.Connectors != nil {
		return true
	}

	return false
}

// SetConnectors gets a reference to the given []string and assigns it to the Connectors field.
func (o *PipelineFilter) SetConnectors(v []string) {
	o.Connectors = &v
}

// GetEncodings returns the Encodings field value if set, zero value otherwise.
func (o *PipelineFilter) GetEncodings() []string {
	if o == nil || o.Encodings == nil {
		var ret []string
		return ret
	}
	return *o.Encodings
}

// GetEncodingsOk returns a tuple with the Encodings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineFilter) GetEncodingsOk() (*[]string, bool) {
	if o == nil || o.Encodings == nil {
		return nil, false
	}
	return o.Encodings, true
}

// HasEncodings returns a boolean if a field has been set.
func (o *PipelineFilter) HasEncodings() bool {
	if o != nil && o.Encodings != nil {
		return true
	}

	return false
}

// SetEncodings gets a reference to the given []string and assigns it to the Encodings field.
func (o *PipelineFilter) SetEncodings(v []string) {
	o.Encodings = &v
}

// GetGroupPaths returns the GroupPaths field value if set, zero value otherwise.
func (o *PipelineFilter) GetGroupPaths() []GroupPath {
	if o == nil || o.GroupPaths == nil {
		var ret []GroupPath
		return ret
	}
	return *o.GroupPaths
}

// GetGroupPathsOk returns a tuple with the GroupPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineFilter) GetGroupPathsOk() (*[]GroupPath, bool) {
	if o == nil || o.GroupPaths == nil {
		return nil, false
	}
	return o.GroupPaths, true
}

// HasGroupPaths returns a boolean if a field has been set.
func (o *PipelineFilter) HasGroupPaths() bool {
	if o != nil && o.GroupPaths != nil {
		return true
	}

	return false
}

// SetGroupPaths gets a reference to the given []GroupPath and assigns it to the GroupPaths field.
func (o *PipelineFilter) SetGroupPaths(v []GroupPath) {
	o.GroupPaths = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PipelineFilter) GetTags() [][]string {
	if o == nil || o.Tags == nil {
		var ret [][]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineFilter) GetTagsOk() (*[][]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PipelineFilter) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given [][]string and assigns it to the Tags field.
func (o *PipelineFilter) SetTags(v [][]string) {
	o.Tags = &v
}

func (o PipelineFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Connectors != nil {
		toSerialize["connectors"] = o.Connectors
	}
	if o.Encodings != nil {
		toSerialize["encodings"] = o.Encodings
	}
	if o.GroupPaths != nil {
		toSerialize["groupPaths"] = o.GroupPaths
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullablePipelineFilter struct {
	value *PipelineFilter
	isSet bool
}

func (v NullablePipelineFilter) Get() *PipelineFilter {
	return v.value
}

func (v *NullablePipelineFilter) Set(val *PipelineFilter) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineFilter) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineFilter(val *PipelineFilter) *NullablePipelineFilter {
	return &NullablePipelineFilter{value: val, isSet: true}
}

func (v NullablePipelineFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


