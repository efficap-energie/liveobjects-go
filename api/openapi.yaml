openapi: 3.0.1
info:
  contact:
    email: liveobjects.support@orange.com
    name: Live Objects Team
  description: API description for Live Objects service
  termsOfService: http://opensource.itn.ftgroup/index.php/Orange_Source
  title: Live Objects REST API Guide v2.13.3
  version: 2.13.3
servers:
- url: https://liveobjects.orange-business.com/
tags:
- description: get your accounting metrics
  name: Accounting - V1
- description: API key management
  name: Api keys
- description: Search through your AuditLog messages
  name: Audit Log
- description: FIFO management and publication
  name: Bus management
- description: CA certificates for MQTT client cert. authentication
  name: CA certificates
- description: Management of actions on a fleet of devices
  name: Campaign management
- description: APIs to inject a bulk of data
  name: Data bulk injection
- description: APIs to manage dataMessage custom pipelines
  name: Data management custom pipelines
- description: APIs to search through injected data
  name: Data management data search
- description: APIs to store and retrieve data
  name: Data management data store
- description: list all decoders for a tenant
  name: Decoders
- description: CSV decoder provisioning
  name: Decoders - CSV
- description: binary decoder provisioning
  name: Decoders - binary
- description: public decoder management
  name: Decoders - public
- description: Devices commands
  name: Device management - Commands - V1
- description: Devices configuration
  name: Device management - Configuration - V1
- description: Connector Nodes Controller
  name: Device management - Connector nodes - V1
- description: Group management
  name: Device management - Groups - V1
- description: Devices' interfaces management
  name: Device management - Interfaces - V1
- description: Devices inventory
  name: Device management - Inventory - V1
- description: Devices resources
  name: Device management - Resources - V1
- description: Resources management
  name: Device management - Resources management
- description: COAP/LWM2M device management
  name: Device management for COAP/LWM2M (beta)
- description: Lora Connector Controller
  name: Device management for LoRa
- description: ActivityRule management
  name: Event processing - Activity
- description: Context management
  name: Event processing - Context
- description: FiringRules and FiringGuards management
  name: Event processing - Firing
- description: Geozone management
  name: Event processing - Geozone
- description: MatchingRules management
  name: Event processing - Matching
- description: State processing Rules management
  name: Event processing - State processing
- description: sending email or sms notifications
  name: Notification
- description: Store partners data
  name: Partner data push
- description: Management for partners
  name: Partners management
- description: Retrieve OAuth 2 access token for partners
  name: Partners tokens management
- description: Tenant account management
  name: Tenant accounts
- description: Action policies on event and messages
  name: Triggers and Actions
- description: Test api for actions
  name: Triggers and Actions - Test
- description: authentication
  name: User authentication
- description: manage users
  name: Users management
- description: binding topics / fifo
  name: _(deprecated) Bus management router
- description: Devices firmwares
  name: _(deprecated) Device management - Devices firmwares
- description: asset commands
  name: _(deprecated) Device management command - V0 (use Device management - Commands
    - V1 instead)
- description: asset inventory
  name: _(deprecated) Device management inventory - V0 (use Device management - Inventory
    - V1 instead)
- description: asset parameters
  name: _(deprecated) Device management parameter - V0 (use Device management - Configuration
    - V1 instead)
- description: asset resources
  name: _(deprecated) Device management resource - V0 (use Device management - Resource
    - V1 instead)
- description: group management
  name: _(deprecated) Group management - V0 (use Device management - Groups - V1 instead)
- description: Router topic management
  name: _(deprecated) Router topic management
- description: sms connector management
  name: _(deprecated) SMS Connector
- description: sms connector business settings management
  name: _(deprecated) SMS Connector BusinessSettings (use Device management - Connector
    nodes - V1 instead)
- description: legacy
  name: _(deprecated) Statistics (use Accounting - V1 accounting instead)
- description: Action policies on event and messages
  name: _(deprecated) Triggers and Actions
- description: Test api for actions
  name: _(deprecated) Triggers and Actions - Test
- description: get your accounting metrics
  name: accounting-controller
- description: API key management
  name: api-key-controller
- description: asset commands
  name: asset-commands-controller
- description: asset inventory
  name: asset-item-controller
- description: asset parameters
  name: asset-param-item-controller
- description: asset parameters
  name: asset-params-controller
- description: asset resources
  name: asset-resource-manager-controller
- description: assets inventory
  name: assets-controller
- description: Search through your AuditLog messages
  name: audit-log-search-controller
- description: authentication
  name: auth-controller
- description: binary decoder provisioning
  name: binary-payload-description-controller
- description: binding topics / fifo
  name: bindings-controller
- description: CA certificates for MQTT client cert. authentication
  name: ca-certificate-controller
- description: Management of actions on a fleet of devices
  name: campaign-controller
- description: asset commands
  name: commands-controller
- description: Connector Nodes Controller
  name: connector-nodes-controller
- description: CSV decoder provisioning
  name: csv-payload-description-controller
- description: APIs to inject a bulk of data
  name: data-bulk-controller
- description: APIs to manage dataMessage custom pipelines
  name: data-message-pipeline-controller
- description: APIs to search through injected data
  name: data-search-controller
- description: APIs to store and retrieve data
  name: data-series-controller
- description: Devices commands
  name: device-commands-controller
- description: Devices configuration
  name: device-config-controller
- description: Devices firmwares
  name: device-firmware-updates-controller
- description: Devices firmwares
  name: device-firmwares-controller
- description: Devices' interfaces management
  name: device-interfaces-controller
- description: Devices resources
  name: device-resources-controller
- description: Devices inventory
  name: devices-controller
- description: Action policies on event and messages
  name: event-2-action-provisioning-controller
- description: Test api for actions
  name: event-2-action-test-controller
- description: ActivityRule management
  name: event-processing-activity-controller
- description: Context management
  name: event-processing-context-controller
- description: FiringRules and FiringGuards management
  name: event-processing-firing-controller
- description: Geozone management
  name: event-processing-geozone-controller
- description: MatchingRules management
  name: event-processing-matching-controller
- description: State processing Rules management
  name: event-processing-state-processing-controller
- description: FIFO management and publication
  name: fifo-controller
- description: group management
  name: group-controller
- description: assets inventory
  name: inventory-asset-namespaces-controller
- description: Lora Connector Controller
  name: lora-connector-controller
- description: LoRa device management
  name: lora-controller
- description: COAP/LWM2M device management
  name: lwm-2m-controller
- description: sending email or sms notifications
  name: message-controller
- description: Management for partners
  name: partner-controller
- description: Store partners data
  name: partner-data-push-controller
- description: Retrieve OAuth 2 access token for partners
  name: partner-token-controller
- description: list all decoders for a tenant
  name: payload-description-controller
- description: public decoder management
  name: public-payload-description-controller
- description: Resources management
  name: resource-manager-controller
- description: Router topic management
  name: router-controller
- description: sms connector business settings management
  name: smsc-business-settings-controller
- description: sms connector management
  name: smsc-controller
- description: legacy
  name: statistics-controller
- description: Tenant account management
  name: tenants-controller
- description: manage users
  name: user-controller
paths:
  /api/v0/apiKeys:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : API_KEY_R.'
      operationId: getApiKeysUsingGET_3
      parameters:
      - description: the maximum number of items per page (optional)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: 'identifier of tenant account (optionnal) ex: "57xxxxxxxxxxxxxxxxxxxxxx".
          Expected identifier (max 24 characters)'
        in: query
        name: tenantId
        schema:
          type: string
      - description: 'the id of your parent (optional)  ex: "57xxxxxxxxxxxxxxxxxxxxxx".
          Expected identifier (max 24 characters)'
        in: query
        name: parentId
        schema:
          type: string
      - description: include the session Keys (optional)
        in: query
        name: showSessionKeys
        schema:
          default: false
          type: boolean
      - description: list of API Key associated roles (optional). Basic roles are
          "USER_R", "USER_W", "API_KEY_R", "API_KEY_W" or any role string supplied
          at tenant account creation time. Expected array of role name (max all roles,
          role value max 255 characters)
        explode: true
        in: query
        name: roles
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Boolean to show or not the master api key
        in: query
        name: showMasterKey
        schema:
          default: true
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«ApiKey»'
          description: The list of the ApiKeys
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
      summary: List API keys
      tags:
      - Api keys
    post:
      description: 'Usage of this API will be reported in your access log under ''api_key''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : API_KEY_W.'
      operationId: createApiKeyUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyCreationReqWeb'
        description: body for create API key
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: The created ApiKey
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
      summary: Create an API key
      tags:
      - Api keys
      x-codegen-request-body-name: apiKeyCreationRequest
  /api/v0/apiKeys/current_key:
    get:
      operationId: getApiKeyFromAuthenticationUsingGET_3
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: The ApiKey
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
      summary: getApiKeyFromAuthentication
      tags:
      - Api keys
  /api/v0/apiKeys/{apiKeyId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''api_key''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : API_KEY_W.'
      operationId: deleteApiKeyUsingDELETE
      parameters:
      - description: identifier of your API key. Expected identifier (max 24 characters)
        in: path
        name: apiKeyId
        required: true
        schema:
          type: string
      - description: 'identifier of tenant account (optionnal) ex: "57xxxxxxxxxxxxxxxxxxxxxx".
          Expected identifier (max 24 characters)'
        in: query
        name: tenantId
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Deletion is done, nothing in the response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
      summary: Delete an API key
      tags:
      - Api keys
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : API_KEY_R.'
      operationId: getApiKeyUsingGET_3
      parameters:
      - description: the id of your API key. Expected identifier (max 24 characters)
        in: path
        name: apiKeyId
        required: true
        schema:
          type: string
      - description: 'identifier of tenant account (optionnal) ex: "57xxxxxxxxxxxxxxxxxxxxxx".
          Expected identifier (max 24 characters)'
        in: query
        name: tenantId
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: The ApiKey
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
      summary: Get an API key
      tags:
      - Api keys
    post:
      description: 'Update a set of properties of the selected API key<br><br>Usage
        of this API will be reported in your access log under ''api_key'' category.<br><br>Restricted
        to API keys with at least one of the following roles : API_KEY_W.'
      operationId: updateApiKeyUsingPOST_1
      parameters:
      - description: the id of your API key. Expected identifier (max 24 characters)
        in: path
        name: apiKeyId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyUpdateReqWeb'
        description: body for update API key
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: The updated ApiKey
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
      summary: Update an API key
      tags:
      - Api keys
      x-codegen-request-body-name: apiKeyUpdateRequest
  /api/v0/apiKeys/{apiKeyId}/debugMode:
    put:
      description: 'Usage of this API will be reported in your access log under ''api_key''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : API_KEY_W.'
      operationId: setApiKeyDebugModeUsingPUT_3
      parameters:
      - description: identifier of your API key. Expected identifier (max 24 characters)
        in: path
        name: apiKeyId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeySetDebugModeReqWeb'
        description: body for API key debug mode
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: The updated ApiKey
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: ApiKey or Tenant not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Internal error
      summary: Activate/Deactivate the debug mode on an API key
      tags:
      - Api keys
      x-codegen-request-body-name: setApiKeyDebugModeRequest
  /api/v0/assets:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listAssetsUsingGET
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int64
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int64
          type: integer
      - description: 'sorting list by attributes.  Supported columns: namespace, id,
          creationTs, lastUpdateTs, connected, groupPath.'
        explode: true
        in: query
        name: sort
        schema:
          items:
            type: string
          type: array
        style: form
      - description: filter list by asset namespace. Expected string (max 128 characters)
        in: query
        name: namespace
        schema:
          type: string
      - description: filter list by asset groupPath.  (with optional use of wildcard
          '/*' at the end of search term)Expected string (max 255 characters)
        in: query
        name: groupPath
        schema:
          type: string
      - description: filter list by asset groupId. Expected string (max 6 characters)
        in: query
        name: groupId
        schema:
          type: string
      - description: filter list by asset id. (with optional use of wildcard '*' at
          the beginning or end of search term) Expected string (max 128 characters)
        in: query
        name: id
        schema:
          type: string
      - description: filter list by asset connected state
        in: query
        name: connected
        schema:
          type: boolean
      - description: filter list by asset name.  (with optional use of wildcard '*'
          at the beginning or end of search term)Expected string (max 255 characters)
        in: query
        name: name
        schema:
          type: string
      - description: filter list by asset tags. Max number of tags depends of your
          offer settings. Tag value max length is 32.
        explode: true
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'Multiple filters, Example : assets?property.temperature=25&property.humidity=58...[cannot
          be tested in swagger-ui]. Max number of properties depends of your offer
          settings. A property name must not include following characters <code>$.</code>
          and max length is 128. Invalid property names are : ''class'', ''_class''.
          Property value max length is 256.'
        in: query
        name: property.{filterName}
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«Asset»'
          description: The list of assets
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List registered assets status
      tags:
      - _(deprecated) Device management inventory - V0 (use Device management - Inventory
        - V1 instead)
    post:
      deprecated: true
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: createAssetUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetCreateReqWeb'
        description: The device to register
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: The device newly created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: the server cannot or will not process the request due to something
            that is perceived to be a client error
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Device already exists in the inventory
      summary: Create a device
      tags:
      - _(deprecated) Device management inventory - V0 (use Device management - Inventory
        - V1 instead)
      x-codegen-request-body-name: body
  /api/v0/assets/{assetNamespace}/{assetId}:
    delete:
      deprecated: true
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: deleteDeviceStatusUsingDELETE
      parameters:
      - description: targeted for deletion asset namespace. Asset namespace must respect
          the following regular expression <code>([\w\-_]{1,128})</code> (max 128
          characters)
        in: path
        name: assetNamespace
        required: true
        schema:
          type: string
      - description: targeted for deletion asset identifier. Asset identifier must
          respect the following regular expression <code>([\w\-_:]{1,128})</code>
          (max 128 characters)
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Asset deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Asset not found
      summary: Delete a device
      tags:
      - _(deprecated) Device management inventory - V0 (use Device management - Inventory
        - V1 instead)
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getAssetStatusUsingGET
      parameters:
      - description: requested asset namespace. Asset namespace must respect the following
          regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)
        in: path
        name: assetNamespace
        required: true
        schema:
          type: string
      - description: requested asset identifier. Asset identifier must respect the
          following regular expression <code>([\w\-_:]{1,128})</code> (max 128 characters)
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: The assets
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Asset not found
      summary: Get a device status
      tags:
      - _(deprecated) Device management inventory - V0 (use Device management - Inventory
        - V1 instead)
    put:
      deprecated: true
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: updateAssetUsingPUT
      parameters:
      - description: namespace targeted to update assets. Asset namespace must respect
          the following regular expression <code>([\w\-_]{1,128})</code> (max 128
          characters)
        in: path
        name: assetNamespace
        required: true
        schema:
          type: string
      - description: asset identifier to update. Asset identifier must respect the
          following regular expression <code>([\w\-_:]{1,128})</code> (max 128 characters)
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetUpdateReqWeb'
        description: the updated asset definition
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: The device newly created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Asset/Group not found
      summary: Update a device
      tags:
      - _(deprecated) Device management inventory - V0 (use Device management - Inventory
        - V1 instead)
      x-codegen-request-body-name: body
  /api/v0/assets/{assetNamespace}/{assetId}/commands:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getAssetCommandsUsingGET
      parameters:
      - description: requested commands target asset namespace. Asset namespace must
          respect the following regular expression <code>([\w\-_]{1,128})</code> (max
          128 characters)
        in: path
        name: assetNamespace
        required: true
        schema:
          type: string
      - description: requested commands target asset identifier. Asset identifier
          must respect the following regular expression <code>([\w\-_:]{1,128})</code>
          (max 128 characters)
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: page size
        in: query
        name: size
        schema:
          default: 20
          format: int64
          type: integer
      - description: page
        in: query
        name: page
        schema:
          default: 0
          format: int64
          type: integer
      - description: 'sorting list by attributes (supported columns:  id, status,
          created). DefaultValue : -created'
        explode: true
        in: query
        name: sort
        schema:
          items:
            type: string
          type: array
        style: form
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«CommandV0»'
          description: The list of commands of the asset
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get a list of commands targeting a specific asset
      tags:
      - _(deprecated) Device management command - V0 (use Device management - Commands
        - V1 instead)
    post:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: addCommandUsingPOST
      parameters:
      - description: target asset namespace. Asset namespace must respect the following
          regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)
        in: path
        name: assetNamespace
        required: true
        schema:
          type: string
      - description: target asset identifier. Asset identifier must respect the following
          regular expression <code>([\w\-_:]{1,128})</code> (max 128 characters)
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: 'fifo used to relay status notification ex: fifo/~notif. A valid
          ''notify to'' starts with one of [''fifo/'', ''pubsub/'', ''router/''] and
          max length is 255'
        in: query
        name: notifyTo
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetCommandWeb'
        description: command to send to the device
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandV0'
          description: The command
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Register a new command
      tags:
      - _(deprecated) Device management command - V0 (use Device management - Commands
        - V1 instead)
      x-codegen-request-body-name: command
  /api/v0/assets/{assetNamespace}/{assetId}/params:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getAssetParamsUsingGET
      parameters:
      - description: 'asset namespace ex : myNode1. Asset namespace must respect the
          following regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)'
        in: path
        name: assetNamespace
        required: true
        schema:
          type: string
      - description: 'asset identifier ex: assetInteg. Asset identifier must respect
          the following regular expression <code>([\w\-_:]{1,128})</code> (max 128
          characters)'
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/AssetParameter'
                type: object
          description: The map of parameters of the asset
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get a specific asset list of parameters
      tags:
      - _(deprecated) Device management parameter - V0 (use Device management - Configuration
        - V1 instead)
    post:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: setAssetParamsUsingPOST
      parameters:
      - description: 'asset namespace ex : myNode1. Asset namespace must respect the
          following regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)'
        in: path
        name: assetNamespace
        required: true
        schema:
          type: string
      - description: 'asset identifier ex: assetInteg. Asset identifier must respect
          the following regular expression <code>([\w\-_:]{1,128})</code> (max 128
          characters)'
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: 'fifo used to relay status notification ex: fifo/~notif. A valid
          ''notify to'' starts with one of [''fifo/'', ''pubsub/'', ''router/''] and
          max length is 255'
        in: query
        name: notifyTo
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                $ref: '#/components/schemas/AssetParameterValue'
              type: object
        description: 'new param value ( type ex :  INT32, UINT32 , STRING, FLOAT,
          BINARY ). Max number of parameters is 100. Parameter name max length is
          128. Parameter value must be valid according to the type and max length
          is 2000.'
        required: false
      responses:
        "200":
          content: {}
          description: Asset parameters set
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Update a specific asset list of parameters
      tags:
      - _(deprecated) Device management parameter - V0 (use Device management - Configuration
        - V1 instead)
      x-codegen-request-body-name: newParamValues
  /api/v0/assets/{assetNamespace}/{assetId}/params/status:
    put:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: setDeviceParamsUpdateStatusUsingPUT
      parameters:
      - description: 'asset namespace ex : myNode1. Asset namespace must respect the
          following regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)'
        in: path
        name: assetNamespace
        required: true
        schema:
          type: string
      - description: 'asset identifier ex: assetInteg. Asset identifier must respect
          the following regular expression <code>([\w\-_:]{1,128})</code> (max 128
          characters)'
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: force the status update
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetParamsStatusUpdateReqWeb'
        description: parameters keys and their future status. Maximum 100 parameters,
          and parameter name max length is 128
        required: false
      responses:
        "200":
          content: {}
          description: Asset parameters update state updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Parameter not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Conflict
      summary: Update the status of a specific asset parameters update
      tags:
      - _(deprecated) Device management parameter - V0 (use Device management - Configuration
        - V1 instead)
      x-codegen-request-body-name: reqWeb
  /api/v0/assets/{assetNamespace}/{assetId}/params/{paramKey}:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getAssetParamUsingGET
      parameters:
      - description: 'asset namespace ex : myNode1. Asset namespace must respect the
          following regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)'
        in: path
        name: assetNamespace
        required: true
        schema:
          type: string
      - description: 'asset identifier ex: assetInteg. Asset identifier must respect
          the following regular expression <code>([\w\-_:]{1,128})</code> (max 128
          characters)'
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: key identifying the targeted asset parameter. Expected string
          (max 128 characters)
        in: path
        name: paramKey
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetParameter'
          description: The parameter of the assets
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Parameter not found
      summary: Get a specific asset parameter
      tags:
      - _(deprecated) Device management parameter - V0 (use Device management - Configuration
        - V1 instead)
  /api/v0/assets/{assetNamespace}/{assetId}/params/{paramKey}/status:
    put:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: setDeviceParamUpdateStatusUsingPUT
      parameters:
      - description: 'asset namespace ex : myNode1. Asset namespace must respect the
          following regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)'
        in: path
        name: assetNamespace
        required: true
        schema:
          type: string
      - description: 'asset identifier ex: assetInteg. Asset identifier must respect
          the following regular expression <code>([\w\-_:]{1,128})</code> (max 128
          characters)'
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: key identifying the targeted asset parameter. Expected string
          (max 128 characters)
        in: path
        name: paramKey
        required: true
        schema:
          type: string
      - description: force the status update
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              enum:
              - NONE
              - PENDING
              - SENT
              - CANCELED
              - OK
              - FAILED
              type: string
        description: future state of the parameter --> CANCELED
        required: false
      responses:
        "200":
          content: {}
          description: Asset parameter update state updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Parameter not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Conflict
      summary: Update the status of a specific asset parameter update
      tags:
      - _(deprecated) Device management parameter - V0 (use Device management - Configuration
        - V1 instead)
      x-codegen-request-body-name: newStatus
  /api/v0/auditlog/messages:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : LOGS_R.'
      operationId: searchUsingGET
      parameters:
      - description: Search for messages after this date. Use ISO-8601 normalization.
        in: query
        name: from
        schema:
          type: string
      - description: Search for messages before this date. Use ISO-8601 normalization.
        in: query
        name: to
        schema:
          type: string
      - description: Offset from the first result you want to fetch. offset + limit
          should not exceed 10.000.
        in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - description: Maximum amount of messages to return. limit should not exceed
          1.000.
        in: query
        name: limit
        schema:
          default: 100
          format: int32
          type: integer
      - description: Sort order, based on timestamp field of the AuditLog message.
        in: query
        name: sort
        schema:
          default: desc
          enum:
          - desc
          - asc
          type: string
      - description: 'Filter query based on parameter name = field path and parameter
          value = value to search for : {fiedlName}={value}. You can put several filters
          that way, they will all be treated with an AND operator. Common filters
          field names you can use : level, category, subcategory, type, source.deviceId,
          source.nodeId, description, detailedDescription. e.g. : level=error&source.deviceId=urn:lora:0E5EAB0ABCD00000'
        in: query
        name: filters
        schema:
          type: string
      - description: Search for AuditLog Messages where any of the fields contains
          all these values.
        explode: true
        in: query
        name: '@any'
        schema:
          items:
            type: string
          type: array
        style: form
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuditLogMessage'
                type: array
          description: list of AuditLogMessages
      summary: Retrieve messages available in your AuditLog
      tags:
      - Audit Log
  /api/v0/auth:
    post:
      description: Usage of this API will be reported in your access log under 'authentication'
        category.
      operationId: authenticateUserUsingPOST
      parameters:
      - description: if true, send the API key value in a secure cookie
        in: query
        name: cookie
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthReqWeb'
        description: body of authentication request
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResWeb'
          description: OK
      summary: Authenticate a user
      tags:
      - User authentication
      x-codegen-request-body-name: authenticationRequest
  /api/v0/bindings:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : BUS_CONFIG_R.'
      operationId: listBindingsUsingGET
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«FifoBinding»'
          description: a page of bindings
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List registered bindings
      tags:
      - _(deprecated) Bus management router
    post:
      deprecated: true
      description: 'Usage of this API will be reported in your access log under ''routing''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : BUS_CONFIG_W.'
      operationId: addBindingUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFifoBindingRequest'
        description: body of create FIFO bindings
        required: false
      responses:
        "200":
          content: {}
          description: Binding created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: FIFO not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Binding already exists
      summary: Add a binding for a FIFO queue
      tags:
      - _(deprecated) Bus management router
      x-codegen-request-body-name: req
  /api/v0/bindings/{routingKeyFilter}/{fifoName}:
    delete:
      deprecated: true
      description: 'Usage of this API will be reported in your access log under ''routing''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : BUS_CONFIG_W.'
      operationId: deleteBindingUsingDELETE
      parameters:
      - description: routing key filter. Routing key must respect the following regular
          expression <code>[A-Za-z\d-_:~#\.\*]+</code> (max 1000 characters)
        in: path
        name: routingKeyFilter
        required: true
        schema:
          type: string
      - description: name of the fifo. Fifo name must respect the following regular
          expression <code>[A-Za-z\d-_~]+</code> (max 255 characters)
        in: path
        name: fifoName
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Binding deleted (if true)
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: FIFO or binding not found
      summary: Delete a binding
      tags:
      - _(deprecated) Bus management router
  /api/v0/certificates/ca:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : API_KEY_R.'
      operationId: listUsingGET_11
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CaCertificate'
                type: array
          description: Ca certificates Successfully retrieved
      summary: List CA certificates
      tags:
      - CA certificates
    post:
      description: 'Usage of this API will be reported in your access log under ''security''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : API_KEY_W.'
      operationId: createUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaCertificateCreateReqWeb'
        description: Root or intermediate Certification Authority (CA) certificate.
          Only PEM format is supported. Certificate chains are not allowed. In case
          that intermediates CA are used, it must be the intermediate CA certificate
          which signs the devices certificates.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaCertificateCreateResWeb'
          description: PEM X.509 CA certificate uploaded
        "400":
          content: {}
          description: Invalid X.509 certificate
      summary: Upload CA certificate
      tags:
      - CA certificates
      x-codegen-request-body-name: caCertificate
  /api/v0/certificates/ca/{certificateId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''security''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : API_KEY_W.'
      operationId: deleteUsingDELETE_9
      parameters:
      - description: id of the CA certificate to delete
        in: path
        name: certificateId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: CA certificate Successfully deleted
        "404":
          content: {}
          description: Unknown CA certificate
      summary: Delete CA certificate
      tags:
      - CA certificates
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : API_KEY_R.'
      operationId: retrieveUsingGET
      parameters:
      - description: id of the CA certificate
        in: path
        name: certificateId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaCertificate'
          description: CA certificate Successfully retrieved
        "404":
          content: {}
          description: Unknown CA certificate
      summary: Retrieve CA certificate
      tags:
      - CA certificates
  /api/v0/commands:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listCommandsUsingGET
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int64
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int64
          type: integer
      - description: 'sorting list by attributes (supported columns:  id, status,
          created). DefaultValue : -created'
        explode: true
        in: query
        name: sort
        schema:
          items:
            type: string
          type: array
        style: form
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«CommandV0»'
          description: The list of commands
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List registered commands
      tags:
      - _(deprecated) Device management command - V0 (use Device management - Commands
        - V1 instead)
  /api/v0/commands/{commandId}:
    delete:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: deleteCommandUsingDELETE
      parameters:
      - description: identifier of specific command. Expected identifier (max 24 characters)
        in: path
        name: commandId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Command deleted
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Command not found
      summary: Delete a specific command
      tags:
      - _(deprecated) Device management command - V0 (use Device management - Commands
        - V1 instead)
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getCommandUsingGET
      parameters:
      - description: identifier of specific command. Expected identifier (max 24 characters)
        in: path
        name: commandId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandV0'
          description: The command
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Command not found
      summary: Get a specific command
      tags:
      - _(deprecated) Device management command - V0 (use Device management - Commands
        - V1 instead)
  /api/v0/commands/{commandId}/status:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getCommandStatusUsingGET
      parameters:
      - description: identifier of specific command. Expected identifier (max 24 characters)
        in: path
        name: commandId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleStringWeb'
          description: The command status
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Command not found
      summary: Get the status of a specific command
      tags:
      - _(deprecated) Device management command - V0 (use Device management - Commands
        - V1 instead)
    put:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: setCommandStatusUsingPUT
      parameters:
      - description: identifier of specific command. Expected identifier (max 24 characters)
        in: path
        name: commandId
        required: true
        schema:
          type: string
      - description: force the status update
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              enum:
              - PENDING
              - SENT
              - PROCESSED
              - CANCELED
              - ERROR
              - UNKNOWN
              type: string
        description: future state of the command --> CANCELED
        required: false
      responses:
        "200":
          content: {}
          description: Command status updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Command not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid command status update
      summary: 'Update the status of specific command '
      tags:
      - _(deprecated) Device management command - V0 (use Device management - Commands
        - V1 instead)
      x-codegen-request-body-name: newStatus
  /api/v0/contact:
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_W.'
      operationId: sendMessageUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
        description: contact and message are mandatory
        required: false
      responses:
        "200":
          content: {}
          description: Message is sending, nothing in response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Forbidden
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Too Many Message
      summary: API to send message
      tags:
      - Notification
      x-codegen-request-body-name: request
  /api/v0/cookies:
    delete:
      operationId: cookiesDeleteUsingDELETE
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
      summary: cookiesDelete
      tags:
      - User authentication
  /api/v0/data/bulk:
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_W.'
      operationId: addDataBulkUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/DataBulkItemWeb'
              type: array
        description: Bulk of Data to add
        required: false
      responses:
        "202":
          content:
            application/json:
              schema:
                type: string
          description: Request has been accepted. Data processing ongoing.
      summary: Insert a bulk of new Data
      tags:
      - Data bulk injection
      x-codegen-request-body-name: dataBulk
  /api/v0/data/search:
    post:
      description: 'return the json serialization of an Elasticsearch SearchResponse
        for the query<br><br>Restricted to API keys with at least one of the following
        roles : DATA_R.'
      operationId: dslQueryUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: elasticsearch DSL request
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonObject'
          description: json serialization of an Elasticsearch SearchResponse for the
            query
      summary: Query an Elasticsearch Domain Specific Language request
      tags:
      - Data management data search
      x-codegen-request-body-name: dslRequest
  /api/v0/data/search/hits:
    post:
      description: 'return a json array of stored data that match the query.<br><br>Restricted
        to API keys with at least one of the following roles : DATA_R.'
      operationId: dslQueryHitsOnlyUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: elasticsearch DSL request
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DataStoredWeb'
                type: array
          description: json array of stored data that match the query
      summary: Query an Elasticsearch Domain Specific Language request and get only
        hits result
      tags:
      - Data management data search
      x-codegen-request-body-name: dslRequest
  /api/v0/data/streams/{streamId}:
    get:
      description: 'return an array of StoredDataMessage matching the request parameters.<br><br>Restricted
        to API keys with at least one of the following roles : DATA_R.'
      operationId: retrieveDataUsingGET
      parameters:
      - description: StreamId from which the data will be retrieved
        in: path
        name: streamId
        required: true
        schema:
          type: string
      - description: max number of data to return, value is limited to 1000
        in: query
        name: limit
        schema:
          default: 100
          format: int32
          type: integer
      - description: 'filter data where timestamp is in timeRange (must be ISO 8601
          formatted) : ?timeRange=[lowerbound],[upperbound]. Coma is mandatory, lowerbound
          and upperbound are optionals. Lowerbound is inclusiv, upperbound is exclusiv.'
        explode: true
        in: query
        name: timeRange
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'id of the last document retrieved that can be used to paginate
          : first result will be the one following this document id'
        in: query
        name: bookmarkId
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DataStoredWeb'
                type: array
          description: array of StoredDataMessage matching the request parameters
      summary: Retrieve data from the streamId
      tags:
      - Data management data store
    post:
      description: 'In order for the data to be enriched by decoders and pipelines
        functionalities, ''metadata.encoding'' field must be set.<br><br>Restricted
        to API keys with at least one of the following roles : DATA_W.'
      operationId: addDataMessageUsingPOST
      parameters:
      - description: 'StreamId in which the data will be added. Should not contains
          following character or space : '' \ " ; { } ( )'
        in: path
        name: streamId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataWeb'
        description: DataMessage to add
        required: false
      responses:
        "202":
          content:
            application/json:
              schema:
                type: string
          description: Request has been accepted. Data processing ongoing.
      summary: Insert a new Data into the stream
      tags:
      - Data management data store
      x-codegen-request-body-name: data
  /api/v0/decoders:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_22
      parameters:
      - description: target filtering tags
        explode: true
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
        style: form
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PayloadDescription'
                type: array
          description: list all decoders
      summary: Retrieve the list of all decoders (binary, csv, js)
      tags:
      - Decoders
  /api/v0/decoders/binary:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_10
      parameters:
      - description: target filtering tags
        explode: true
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
        style: form
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BinaryPayloadDescription'
                type: array
          description: list of binary decoders
      summary: Retrieve the list of binary decoders
      tags:
      - Decoders - binary
    post:
      description: 'The number of binary decoders is limited to 100.<br><br>Usage
        of this API will be reported in your access log under ''data_decoder'' category.<br><br>Restricted
        to API keys with at least one of the following roles : DATA_PROCESSING_W.'
      operationId: postUsingPOST_10
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BinaryPayloadDescription'
        description: Binary decoder description
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BinaryPayloadDescription'
          description: Binary decoder created
      summary: Create a binary decoder
      tags:
      - Decoders - binary
      x-codegen-request-body-name: binaryPayloadDescription
  /api/v0/decoders/binary/test:
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: testUsingPOST_2
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BinaryPayloadDescriptionTestRequest'
        description: Binary format and encoded payload on which decoding shall be
          peformed
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadDescriptionTestResult'
          description: Test has been perfomed. Response body contains decoded data
            as Json
      summary: Test a binary decoder format with an encoded payload
      tags:
      - Decoders - binary
      x-codegen-request-body-name: dataDecodingTestRequest
  /api/v0/decoders/binary/{decoderId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''data_decoder''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: deleteUsingDELETE_8
      parameters:
      - description: id of the binary decoder to delete
        in: path
        name: decoderId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Binary decoder deleted
      summary: Delete a binary decoder
      tags:
      - Decoders - binary
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: getUsingGET_10
      parameters:
      - description: id of the binary decoder to retrieve
        in: path
        name: decoderId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BinaryPayloadDescription'
          description: binary decoder
      summary: Retrieve a binary decoder
      tags:
      - Decoders - binary
    put:
      description: 'Usage of this API will be reported in your access log under ''data_decoder''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: putUsingPUT_2
      parameters:
      - description: id of the binary decoder to update
        in: path
        name: decoderId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BinaryPayloadDescription'
        description: Binary decoder description
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BinaryPayloadDescription'
          description: Binary decoder updated
      summary: Update a binary decoder
      tags:
      - Decoders - binary
      x-codegen-request-body-name: binaryPayloadDescription
  /api/v0/decoders/binary/{decoderId}/enabled:
    put:
      description: 'Usage of this API will be reported in your access log under ''data_decoder''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: activateUsingPUT_8
      parameters:
      - description: id of the binary decoder to activate or deactivate
        in: path
        name: decoderId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: true to activate, false otherwise
        required: false
      responses:
        "204":
          content: {}
          description: Update request has been accepted.
      summary: Activate or deactivate a decoder
      tags:
      - Decoders - binary
      x-codegen-request-body-name: enabled
  /api/v0/decoders/csv:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_12
      parameters:
      - description: target filtering tags
        explode: true
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
        style: form
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CsvPayloadDescription'
                type: array
          description: list of csv decoders
      summary: Retrieve the list of csv decoders filtered by tags
      tags:
      - Decoders - CSV
    post:
      description: 'The number of csv decoders is limited to 100.<br><br>Usage of
        this API will be reported in your access log under ''data_decoder'' category.<br><br>Restricted
        to API keys with at least one of the following roles : DATA_PROCESSING_W.'
      operationId: postUsingPOST_11
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CsvPayloadDescription'
        description: Csv decoder description
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CsvPayloadDescription'
          description: Csv decoder created
      summary: Create a csv decoder
      tags:
      - Decoders - CSV
      x-codegen-request-body-name: csvPayloadDescription
  /api/v0/decoders/csv/test:
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: testUsingPOST_3
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CsvPayloadDescriptionTestRequest'
        description: Csv format and encoded payload on which decoding shall be peformed
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayloadDescriptionTestResult'
          description: Test has been perfomed. Response body contains decoded data
            as Json
      summary: Test a csv decoder format with an encoded payload
      tags:
      - Decoders - CSV
      x-codegen-request-body-name: dataDecodingTestRequest
  /api/v0/decoders/csv/{decoderId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''data_decoder''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: deleteUsingDELETE_10
      parameters:
      - description: id of the csv decoder to delete
        in: path
        name: decoderId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Csv decoder deleted
      summary: Delete a csv decoder
      tags:
      - Decoders - CSV
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: getUsingGET_11
      parameters:
      - description: id of the csv decoder to retrieve
        in: path
        name: decoderId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CsvPayloadDescription'
          description: csv decoder
      summary: Retrieve a csv decoder
      tags:
      - Decoders - CSV
    put:
      description: 'Usage of this API will be reported in your access log under ''data_decoder''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: putUsingPUT_3
      parameters:
      - description: id of the csv decoder to update
        in: path
        name: decoderId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CsvPayloadDescription'
        description: Csv decoder description
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CsvPayloadDescription'
          description: Csv decoder updated
      summary: Update a csv decoder
      tags:
      - Decoders - CSV
      x-codegen-request-body-name: csvPayloadDescription
  /api/v0/decoders/csv/{decoderId}/enabled:
    put:
      description: 'Usage of this API will be reported in your access log under ''data_decoder''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: activateUsingPUT_9
      parameters:
      - description: id of the csv decoder to activate or deactivate
        in: path
        name: decoderId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: true to activate, false otherwise
        required: false
      responses:
        "204":
          content: {}
          description: Update request has been accepted.
      summary: Activate or deactivate a decoder
      tags:
      - Decoders - CSV
      x-codegen-request-body-name: enabled
  /api/v0/decoders/public:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_23
      parameters:
      - description: target filtering tags
        explode: true
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
        style: form
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PayloadDescription'
                type: array
          description: list all decoders
      summary: Retrieve the list of all public decoders (binary, csv, js)
      tags:
      - Decoders - public
  /api/v0/deviceMgt/campaigns:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : CAMPAIGN_R.'
      operationId: listCampaignsUsingGET
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: status list filter
        explode: true
        in: query
        name: status
        schema:
          enum:
          - COMPLETE
          - INCOMPLETE
          - RUNNING
          - SCHEDULED
          - SERVER_ERROR
          - CANCELED
          - CANCELING
          items:
            type: string
          type: array
        style: form
      - description: 'sorting list by attributes (supported columns:  id, name, status,
          created, updated). DefaultValue : -created'
        explode: true
        in: query
        name: sort
        schema:
          items:
            type: string
          type: array
        style: form
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignList'
          description: List of campaigns.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden.
      summary: List all campaigns
      tags:
      - Campaign management
    post:
      description: 'Usage of this API will be reported in your access log under ''device_campaign''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : CAMPAIGN_W.'
      operationId: createCampaignUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignDefinition'
        description: campaign
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
          description: Campaign has been created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request. Check the campaign definition.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden.
      summary: Create a campaign
      tags:
      - Campaign management
      x-codegen-request-body-name: campaign
  /api/v0/deviceMgt/campaigns/{campaignId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''device_campaign''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : CAMPAIGN_W.'
      operationId: deleteCampaignUsingDELETE
      parameters:
      - description: identifier of a campaign
        in: path
        name: campaignId
        required: true
        schema:
          type: string
      - description: cancelling mode. When force is false, the campaign manager prevents
          devices with status not started from starting, cancel devices with status
          pending and let devices with status in progress finish properly. When force
          is true, the campaign manager aborts all pending and in progress sequences
          immediately.
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEntity'
          description: Campaign deleted.
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEntity'
          description: Campaign will be deleted soon.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Campaign not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Conflict on campaign action
      summary: Delete a campaign
      tags:
      - Campaign management
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : CAMPAIGN_R.'
      operationId: getCampaignUsingGET
      parameters:
      - description: identifier of a campaign
        in: path
        name: campaignId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
          description: A single campaign definition and status.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Campaign not found
      summary: Get a campaign
      tags:
      - Campaign management
    patch:
      description: 'Usage of this API will be reported in your access log under ''device_campaign''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : CAMPAIGN_W.'
      operationId: updateCampaignUsingPATCH
      parameters:
      - description: identifier of a campaign
        in: path
        name: campaignId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignUpdating'
        description: campaign
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
          description: Campaign has been updated.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Campaign not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Conflict on campaign action
      summary: Update a campaign
      tags:
      - Campaign management
      x-codegen-request-body-name: campaign
  /api/v0/deviceMgt/campaigns/{campaignId}/cancel:
    put:
      description: 'Usage of this API will be reported in your access log under ''device_campaign''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : CAMPAIGN_W.'
      operationId: cancelCampaignUsingPUT
      parameters:
      - description: identifier of a campaign
        in: path
        name: campaignId
        required: true
        schema:
          type: string
      - description: When force is false, the campaign manager prevents devices with
          status not started from starting, cancel devices with status pending and
          let devices with status in progress finish properly. When force is true,
          the campaign manager aborts all pending and in progress sequences immediately.
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
          description: Campaign has been canceled.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Campaign not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Conflict on campaign action
      summary: Cancel a campaign
      tags:
      - Campaign management
  /api/v0/deviceMgt/campaigns/{campaignId}/targets:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : CAMPAIGN_R.'
      operationId: getCampaignDetailsUsingGET
      parameters:
      - description: identifier of a campaign
        in: path
        name: campaignId
        required: true
        schema:
          type: string
      - description: Status of the device
        in: query
        name: status
        schema:
          type: string
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignPerTargetList'
          description: Campaign status per device
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Campaign not found
      summary: Get the campaign status per device
      tags:
      - Campaign management
  /api/v0/event2action/actionPolicies:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_14
      parameters:
      - description: Filter on ActionPolicy trigger type. Can be either "rules" or
          "messages".
        in: query
        name: triggerType
        schema:
          enum:
          - rules
          - messages
          type: string
      - description: the maximum number of items per page (optional)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«ActionPolicyV0»'
          description: Action Policies Successfully retrieved
      summary: List ActionPolicies
      tags:
      - _(deprecated) Triggers and Actions
    post:
      description: 'The field `id` must not be provided, it will be automatically
        generated by the service as an UUID.<br><br>Usage of this API will be reported
        in your access log under ''routing'' category.<br><br>Restricted to API keys
        with at least one of the following roles : DATA_PROCESSING_W.'
      operationId: createUsingPOST_1
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionPolicyV0'
        description: ActionPolicy to add
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionPolicyV0'
          description: ActionPolicy created
      summary: Create an ActionPolicy
      tags:
      - _(deprecated) Triggers and Actions
      x-codegen-request-body-name: actionPolicy
  /api/v0/event2action/actionPolicies/{policyId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''routing''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: deleteUsingDELETE_12
      parameters:
      - description: id of the action to delete
        in: path
        name: policyId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: ActionPolicy Successfully deleted
        "404":
          content: {}
          description: Unknown ActionPolicy
      summary: Delete an ActionPolicy
      tags:
      - _(deprecated) Triggers and Actions
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: retrieveUsingGET_1
      parameters:
      - description: id of the action to retrieve
        in: path
        name: policyId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionPolicyV0'
          description: ActionPolicy Successfully retrieved
        "404":
          content: {}
          description: Unknown ActionPolicy
      summary: Retrieve an ActionPolicy
      tags:
      - _(deprecated) Triggers and Actions
    put:
      description: 'The `id` field is mandatory in the path but is optional in the
        payload. In a case where an `id` is specified in the payload it must match
        the `id` specified in the path. Otherwise an HTTP 400 will be issued.<br><br>Usage
        of this API will be reported in your access log under ''routing'' category.<br><br>Restricted
        to API keys with at least one of the following roles : DATA_PROCESSING_W.'
      operationId: upsertUsingPUT
      parameters:
      - description: id of the action to save
        in: path
        name: policyId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionPolicyV0'
        description: ActionPolicy to add
        required: false
      responses:
        "200":
          content: {}
          description: ActionPolicy created or updated
      summary: Create or update an ActionPolicy
      tags:
      - _(deprecated) Triggers and Actions
      x-codegen-request-body-name: actionPolicy
  /api/v0/event2action/test/http-push:
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_W.'
      operationId: testHttpPushUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpPushWebhookTest'
        description: Http push request to be tested
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpPushTestResult'
          description: Http push test successful
      summary: Post an http request for testing a webhook
      tags:
      - _(deprecated) Triggers and Actions - Test
      x-codegen-request-body-name: req
  /api/v0/eventprocessing/activity/rules:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_16
      parameters:
      - description: name of the ActivityRule to retrieve
        in: query
        name: name
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ActivityRule'
                type: array
          description: list of ActivityRules
      summary: Retrieve the list of all the ActivityRules or get an ActivityRule by
        its name
      tags:
      - Event processing - Activity
    post:
      description: 'Total number of ActivityRules is limited. Contact the commercial
        team or see developer guide to get more information.<br><br>Usage of this
        API will be reported in your access log under ''alarming'' category.<br><br>Restricted
        to API keys with at least one of the following roles : DATA_PROCESSING_W.'
      operationId: postUsingPOST_13
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityRule'
        description: ActivityRule to add
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityRule'
          description: ActivityRule created
      summary: Create an ActivityRule
      tags:
      - Event processing - Activity
      x-codegen-request-body-name: activityRule
  /api/v0/eventprocessing/activity/rules/{activityRuleId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''alarming''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: deleteUsingDELETE_14
      parameters:
      - description: id of the ActivityRule to delete
        in: path
        name: activityRuleId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: ActivityRule has been deleted
      summary: Delete an ActivityRule
      tags:
      - Event processing - Activity
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: getUsingGET_13
      parameters:
      - description: id of the ActivityRule to retrieve
        in: path
        name: activityRuleId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityRule'
          description: ActivityRule
      summary: Retrieve an ActivityRule
      tags:
      - Event processing - Activity
    put:
      description: 'Usage of this API will be reported in your access log under ''alarming''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: updateUsingPUT_7
      parameters:
      - description: id of the ActivityRule to update
        in: path
        name: activityRuleId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityRule'
        description: updated ActivityRule
        required: false
      responses:
        "204":
          content: {}
          description: The ActivityRule has been updated
      summary: Update an ActivityRule
      tags:
      - Event processing - Activity
      x-codegen-request-body-name: activityRule
  /api/v0/eventprocessing/activity/states:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: getStatesUsingGET
      parameters:
      - description: id of the device targeted by the states to retrieve. At least
          one of deviceId/activityRuleId must be set.
        in: query
        name: deviceId
        schema:
          type: string
      - description: id of the rule targeted by the states to retrieve. At least one
          of deviceId/activityRuleId must be set.
        in: query
        name: activityRuleId
        schema:
          type: string
      - description: when listing by activityRuleId, thousands of devices could be
          targeted. Indicates the number of AvtivityStates to return (one per targeted
          device). Default is 20, max is 1000. To get next results use bookmarkDeviceId
          field.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: '''bookmark'' of previous listing by activityRuleId request :
          this is the last deviceId retrieved in previous request. If null, first
          ActivtyStates results will be returned.'
        in: query
        name: bookmarkDeviceId
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ActivityState'
                type: array
          description: list of ActivityStates
      summary: Retrieve the list of all the ActivityStates linked to a specific device
        and/or rule
      tags:
      - Event processing - Activity
  /api/v0/eventprocessing/activity/states/mute:
    put:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_W.'
      operationId: muteUsingPUT
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityStateMuteRequest'
        description: nextAlarmRequest
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: ActivityState has been updated, return the number of targeted
            states
      summary: Mute or reset nextAlarm of ActivityStates targeted by a specific deviceId/activityRuleId
      tags:
      - Event processing - Activity
      x-codegen-request-body-name: nextAlarmRequest
  /api/v0/eventprocessing/context:
    delete:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_W.'
      operationId: clearUsingDELETE
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: all entries deleted
      summary: Delete all context entries
      tags:
      - Event processing - Context
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_17
      parameters:
      - description: The requested page number
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of items per page
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: Filtering tags
        explode: true
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
        style: form
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ContextContainer'
                type: array
          description: list of contexts
      summary: Retrieve the list of contexts with optional tag filtering
      tags:
      - Event processing - Context
  /api/v0/eventprocessing/context/{contextKey}:
    delete:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_W.'
      operationId: deleteUsingDELETE_15
      parameters:
      - description: id of the context to delete
        in: path
        name: contextKey
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Deleted context key
      summary: Delete a context key
      tags:
      - Event processing - Context
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: getUsingGET_14
      parameters:
      - description: id of the context to get
        in: path
        name: contextKey
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContextContainer'
          description: a context
      summary: Retrieve a context
      tags:
      - Event processing - Context
    put:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_W.'
      operationId: saveUsingPUT
      parameters:
      - description: id of the context to save
        in: path
        name: contextKey
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContextContainer'
        description: JSON context object to add
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContextContainer'
          description: Context stored
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContextContainer'
          description: Created
      summary: Save a context
      tags:
      - Event processing - Context
      x-codegen-request-body-name: contextContainer
  /api/v0/eventprocessing/firing-guard:
    delete:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_W.'
      operationId: removeFiringGuardsUsingDELETE
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FiringGuardResetRequest'
        description: search parameters to select FiringGuard to remove
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: FiringGuards have been removed. Return actual number of removed
            FiringGuards.
      summary: Remove the FiringGuards linked to FiringRule, and where FiringGuards
        selection criteria match.
      tags:
      - Event processing - Firing
      x-codegen-request-body-name: resetParams
  /api/v0/eventprocessing/firing-guard/search:
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: getFiringGuardsUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FiringGuardGetRequest'
        description: Search parameters to select FiringGuard
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FiringGuard'
                type: array
          description: FiringGuards that match the criteria.
      summary: Get FiringGuards linked to a FiringRule, and where FiringGuards selection
        criteria match.
      tags:
      - Event processing - Firing
      x-codegen-request-body-name: searchParam
  /api/v0/eventprocessing/firing-guard/{firingGuardId}:
    delete:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_W.'
      operationId: removeFiringGuardUsingDELETE
      parameters:
      - description: id of the FiringGuard to remove
        in: path
        name: firingGuardId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: FiringGuard has been reset.
      summary: Remove a FiringGuard
      tags:
      - Event processing - Firing
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: getFiringGuardUsingGET
      parameters:
      - description: id of the FiringGuard
        in: path
        name: firingGuardId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FiringGuard'
          description: FiringGuard
      summary: Get a FiringGuard
      tags:
      - Event processing - Firing
  /api/v0/eventprocessing/firing-rule:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_18
      parameters:
      - description: name of the FiringRule to retrieve
        in: query
        name: name
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FiringRule'
                type: array
          description: list of FiringRules
      summary: Retrieve the list of all the FiringRules or get a FiringRule by its
        name
      tags:
      - Event processing - Firing
    post:
      description: 'Total number of FiringRules is limited. Contact the commercial
        team or see developer guide to get more information.<br><br>Usage of this
        API will be reported in your access log under ''alarming'' category.<br><br>Restricted
        to API keys with at least one of the following roles : DATA_PROCESSING_W.'
      operationId: postUsingPOST_14
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FiringRule'
        description: FiringRule to add
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FiringRule'
          description: FiringRule stored
      summary: Create a FiringRule
      tags:
      - Event processing - Firing
      x-codegen-request-body-name: firingRule
  /api/v0/eventprocessing/firing-rule/{firingRuleId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''alarming''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: deleteUsingDELETE_16
      parameters:
      - description: id of the FiringRule to delete
        in: path
        name: firingRuleId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Delete request has been accepted. Return true if the FiringRule
            did exist, false else.
      summary: Delete a FiringRule
      tags:
      - Event processing - Firing
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: getUsingGET_15
      parameters:
      - description: id of the FiringRule to retrieve
        in: path
        name: firingRuleId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FiringRule'
          description: FiringRule
      summary: Retrieve a FiringRule
      tags:
      - Event processing - Firing
    put:
      description: 'Usage of this API will be reported in your access log under ''alarming''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: updateUsingPUT_8
      parameters:
      - description: id of the FiringRule to update
        in: path
        name: firingRuleId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FiringRule'
        description: updated FiringRule
        required: false
      responses:
        "204":
          content: {}
          description: The FiringRule has been updated
      summary: Update a FiringRule
      tags:
      - Event processing - Firing
      x-codegen-request-body-name: firingRule
  /api/v0/eventprocessing/geozones:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_19
      parameters:
      - description: The requested page number. Starts from 0.
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of items per page. Must be between 1 and 1000.
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GeozoneContainer'
                type: array
          description: Geozones retrieved successfully
      summary: retrieve paginated list of geozones
      tags:
      - Event processing - Geozone
  /api/v0/eventprocessing/geozones/{zoneId}:
    delete:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_W.'
      operationId: deleteUsingDELETE_17
      parameters:
      - description: the id of the zone to delete
        in: path
        name: zoneId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Geo zone deleted
      summary: delete a geographic zone
      tags:
      - Event processing - Geozone
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: getUsingGET_16
      parameters:
      - description: the user-defined id of the zone to retrieve
        in: path
        name: zoneId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeozoneContainer'
          description: Geozone retrieved successfully
        "404":
          content: {}
          description: Unable to find specified geozone id
      summary: retrieve a geozone from repository
      tags:
      - Event processing - Geozone
    put:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_W.'
      operationId: saveUsingPUT_1
      parameters:
      - description: the id of the zone to save
        in: path
        name: zoneId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeozoneContainerBase'
        description: JSON geo zone object to add
        required: false
      responses:
        "201":
          content: {}
          description: Geo zone created or updated
      summary: Save a geographic zone
      tags:
      - Event processing - Geozone
      x-codegen-request-body-name: geozoneContainerBase
  /api/v0/eventprocessing/matching-rule:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_20
      parameters:
      - description: name of the MatchingRule to retrieve
        in: query
        name: name
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MatchingRule'
                type: array
          description: list of MatchingRules
      summary: Retrieve the list of all the MatchingRules or get a MatchingRule by
        its name
      tags:
      - Event processing - Matching
    post:
      description: 'Total number of MatchingRules is limited. Contact the commercial
        team or see developer guide to get more information.<br><br>Usage of this
        API will be reported in your access log under ''alarming'' category.<br><br>Restricted
        to API keys with at least one of the following roles : DATA_PROCESSING_W.'
      operationId: postUsingPOST_15
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchingRule'
        description: MatchingRule to add
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchingRule'
          description: MatchingRule stored
      summary: Create a MatchingRule
      tags:
      - Event processing - Matching
      x-codegen-request-body-name: matchRule
  /api/v0/eventprocessing/matching-rule/test:
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: testUsingPOST_4
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataMatchTest'
        description: jsonLogic predicate and json data of the evaluation test you
          want to perform
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataMatchResult'
          description: Test has been perfomed. Result is in the response body.
      summary: Test a JsonLogic predicate with some data sample
      tags:
      - Event processing - Matching
      x-codegen-request-body-name: dataMatchTest
  /api/v0/eventprocessing/matching-rule/{matchingRuleId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''alarming''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: deleteUsingDELETE_18
      parameters:
      - description: id of the MatchingRule to delete
        in: path
        name: matchingRuleId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: MatchingRule has been deleted
      summary: Delete a MatchingRule
      tags:
      - Event processing - Matching
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: getUsingGET_17
      parameters:
      - description: id of the MatchingRule to retrieve
        in: path
        name: matchingRuleId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchingRule'
          description: MatchingRule
      summary: Retrieve a MatchingRule
      tags:
      - Event processing - Matching
    put:
      description: 'Usage of this API will be reported in your access log under ''alarming''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: updateUsingPUT_9
      parameters:
      - description: id of the MatchingRule to update
        in: path
        name: matchingRuleId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchingRule'
        description: updated MatchingRule
        required: false
      responses:
        "204":
          content: {}
          description: The MatchingRule has been updated
      summary: Update a MatchingRule
      tags:
      - Event processing - Matching
      x-codegen-request-body-name: matchingRule
  /api/v0/eventprocessing/stateprocessing-rule:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_21
      parameters:
      - description: name of the StateProcessingRules to retrieve
        in: query
        name: name
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StateProcessingRule'
                type: array
          description: list of StateProcessingRules
      summary: Retrieve the list of all the StateProcessingRules or get a StateProcessingRule
        by its name
      tags:
      - Event processing - State processing
    post:
      description: 'Total number of StateProcessingRule is limited. Contact the commercial
        team or see developer guide to get more information.<br><br>Usage of this
        API will be reported in your access log under ''alarming'' category.<br><br>Restricted
        to API keys with at least one of the following roles : DATA_PROCESSING_W.'
      operationId: postUsingPOST_16
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateProcessingRule'
        description: StateProcessingRule to add
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateProcessingRule'
          description: StateProcessingRule stored
      summary: Create a StateProcessingRule
      tags:
      - Event processing - State processing
      x-codegen-request-body-name: stateProcessingRule
  /api/v0/eventprocessing/stateprocessing-rule/test:
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: testUsingPOST_5
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateProcessingFunctionTest'
        description: State Processing function test request
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateProcessingFunctionTestResult'
          description: State Processing function result
      summary: test a  State Processing function
      tags:
      - Event processing - State processing
      x-codegen-request-body-name: testRequest
  /api/v0/eventprocessing/stateprocessing-rule/{stateProcessingRuleId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''alarming''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: deleteUsingDELETE_19
      parameters:
      - description: id of the StateProcessingRule to delete
        in: path
        name: stateProcessingRuleId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: StateProcessingRule has been deleted
      summary: Delete a StateProcessingRule
      tags:
      - Event processing - State processing
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: getUsingGET_18
      parameters:
      - description: id of the StateProcessingRule to retrieve
        in: path
        name: stateProcessingRuleId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateProcessingRule'
          description: StateProcessingRule
      summary: Retrieve a StateProcessingRule
      tags:
      - Event processing - State processing
    put:
      description: 'Usage of this API will be reported in your access log under ''alarming''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: updateUsingPUT_10
      parameters:
      - description: id of the StateProcessingRule to update
        in: path
        name: stateProcessingRuleId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateProcessingRule'
        description: updated StateProcessingRule
        required: false
      responses:
        "204":
          content: {}
          description: The StateProcessingRule has been updated
      summary: Update a StateProcessingRule
      tags:
      - Event processing - State processing
      x-codegen-request-body-name: stateProcessingRule
  /api/v0/groups:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listGroupsUsingGET
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int64
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int64
          type: integer
      - description: filter list by group's parent. Expected string (max 6 characters)
        in: query
        name: parent
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«Group»'
          description: The list of groups
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List registered groups
      tags:
      - _(deprecated) Group management - V0 (use Device management - Groups - V1 instead)
    post:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: createGroupUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreateRequest'
        description: The group to register
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The group newly created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: the server cannot or will not process the request due to something
            that is perceived to be a client error
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Group already exists
      summary: Create a group
      tags:
      - _(deprecated) Group management - V0 (use Device management - Groups - V1 instead)
      x-codegen-request-body-name: request
  /api/v0/groups/{groupId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: deleteGroupUsingDELETE
      parameters:
      - description: targeted for deletion group identifier. Expected string (max
          6 characters)
        in: path
        name: groupId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Group deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Group not found
      summary: Delete a group
      tags:
      - _(deprecated) Group management - V0 (use Device management - Groups - V1 instead)
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getGroupUsingGET
      parameters:
      - description: the Group Identifier. Expected string (max 6 characters)
        in: path
        name: groupId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The group
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Group not found
      summary: Get a group
      tags:
      - _(deprecated) Group management - V0 (use Device management - Groups - V1 instead)
    put:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: updateGroupUsingPUT
      parameters:
      - description: identifier to update group. Expected string (max 6 characters)
        in: path
        name: groupId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdateRequest'
        description: The group to register
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The group newly created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Group not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Group already exists
      summary: Update a group
      tags:
      - _(deprecated) Group management - V0 (use Device management - Groups - V1 instead)
      x-codegen-request-body-name: body
  /api/v0/inventory/namespaces:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listAssetNamespacesUsingGET
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: The list of assets namespaces
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Enumerates the used asset namespaces
      tags:
      - _(deprecated) Device management inventory - V0 (use Device management - Inventory
        - V1 instead)
  /api/v0/logout:
    post:
      operationId: logoutUsingPOST
      parameters:
      - description: if true, send the API key value in a secure cookie
        in: query
        name: cookie
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
      summary: Log out of the current session
      tags:
      - User authentication
  /api/v0/oauth2/token:
    post:
      description: Usage of this API will be reported in your access log under 'authentication'
        category.
      operationId: createPartnerTokenUsingPOST
      parameters:
      - description: the authorization grant type. Must be set to "client_credentials"
        in: query
        name: grant_type
        schema:
          type: string
      - description: Basic Base64(clientId:clientSecret)
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerToken'
          description: The created partner
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ErrorWeb'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ErrorWeb'
          description: Unauthorized
      summary: Request a new Token
      tags:
      - Partners tokens management
  /api/v0/partners/data/streams:
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : IS_PARTNER.'
      operationId: dataPushUsingPOST
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartnerDataItemSwagger'
        description: data
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                type: string
          description: Request has been accepted. Data processing ongoing.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ErrorWeb'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Forbidden
      summary: Push data
      tags:
      - Partner data push
      x-codegen-request-body-name: data
  /api/v0/partners/tenants:
    post:
      description: 'Usage of this API will be reported in your access log under ''admin_account''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : IS_PARTNER.'
      operationId: createTenantByPartnerUsingPOST
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPartnerTenantRequest'
        description: req
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartnerTenant'
          description: The created tenant partner
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ErrorWeb'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ErrorWeb'
          description: Unauthorized
      summary: Create a partner's tenant
      tags:
      - Partners management
      x-codegen-request-body-name: req
  /api/v0/partners/tenants/{tenantId}/options:
    post:
      description: Usage of this API will be reported in your access log under 'admin_account'
        category.
      operationId: addOptionToTenantUsingPOST
      parameters:
      - description: Tenant identifier
        in: path
        name: tenantId
        required: true
        schema:
          type: string
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OptionPartnerTenant'
        description: req
        required: true
      responses:
        "200":
          content: {}
          description: The updated order success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request conflict
      summary: Subscribe an option for a partner's tenant
      tags:
      - Partners management
      x-codegen-request-body-name: req
  /api/v0/pipelines:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_13
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pipeline'
                type: array
          description: list of DataMessage pipelines
      summary: Retrieve the list of DataMessage pipelines, ordered by priorityLevel
      tags:
      - Data management custom pipelines
    post:
      description: 'Usage of this API will be reported in your access log under ''data_pipeline''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: postUsingPOST_12
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
        description: pipeline to create
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: DataMessage pipeline created
      summary: Create a DataMessage pipeline
      tags:
      - Data management custom pipelines
      x-codegen-request-body-name: pipelineDescription
  /api/v0/pipelines/{pipelineId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''data_pipeline''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: deleteUsingDELETE_11
      parameters:
      - description: id of the pipeline to delete
        in: path
        name: pipelineId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: DataMessage pipeline deleted
      summary: Delete a DataMessage pipeline
      tags:
      - Data management custom pipelines
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: getUsingGET_12
      parameters:
      - description: id of the pipeline to retrieve
        in: path
        name: pipelineId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: DataMessage pipeline
      summary: Retrieve a DataMessage pipeline
      tags:
      - Data management custom pipelines
    put:
      description: 'Usage of this API will be reported in your access log under ''data_pipeline''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: updateUsingPUT_6
      parameters:
      - description: id of the pipeline to update
        in: path
        name: pipelineId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
        description: pipeline to update
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
          description: DataMessage pipeline updated
      summary: Update a DataMessage pipeline
      tags:
      - Data management custom pipelines
      x-codegen-request-body-name: pipelineDescription
  /api/v0/resetpwd:
    post:
      description: Usage of this API will be reported in your access log under 'authentication'
        category.
      operationId: resetUserPasswordUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordReqWeb'
        description: 'body of user reset password '
        required: false
      responses:
        "200":
          content: {}
          description: OK
      summary: Reset user's password
      tags:
      - User authentication
      x-codegen-request-body-name: userResetPasswordRequest
  /api/v0/rm:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getResourcesUsingGET
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«Resource»'
          description: Treatment success
        "403":
          content: {}
          description: Request forbidden (missing role)
      summary: List all resources
      tags:
      - Device management - Resources management
    post:
      description: 'Usage of this API will be reported in your access log under ''device_resource''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: addResourceUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceAddReqWeb'
        description: body of add resource
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: Treatment success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden (missing role)
      summary: Add a resource in Resource Manager
      tags:
      - Device management - Resources management
      x-codegen-request-body-name: request
  /api/v0/rm/asset/{assetIdNamespace}/{assetId}:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getAllAssetResourcesUsingGET
      parameters:
      - description: the asset id namespace. Asset namespace must respect the following
          regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)
        in: path
        name: assetIdNamespace
        required: true
        schema:
          type: string
      - description: the asset id. Asset identifier must respect the following regular
          expression <code>([\w\-_:]{1,128})</code> (max 128 characters)
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«AssetResourceWeb»'
          description: The list of resources of the asset
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List the asset's resources (use /api/v1/deviceMgt/devices/{deviceId}/resources
        instead)
      tags:
      - _(deprecated) Device management resource - V0 (use Device management - Resource
        - V1 instead)
  /api/v0/rm/asset/{assetIdNamespace}/{assetId}/cancelUpdate:
    post:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: cancelResourceUpdateUsingPOST
      parameters:
      - description: the asset id namespace. Asset namespace must respect the following
          regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)
        in: path
        name: assetIdNamespace
        required: true
        schema:
          type: string
      - description: the asset id. Asset identifier must respect the following regular
          expression <code>([\w\-_:]{1,128})</code> (max 128 characters)
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: force update status change
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Update canceled
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Cancel asset resource update
      tags:
      - _(deprecated) Device management resource - V0 (use Device management - Resource
        - V1 instead)
  /api/v0/rm/asset/{assetIdNamespace}/{assetId}/resource/{resourceId}/targetversion:
    put:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: setAssetTargetResourceVersionUsingPUT
      parameters:
      - description: the asset id namespace. Asset namespace must respect the following
          regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)
        in: path
        name: assetIdNamespace
        required: true
        schema:
          type: string
      - description: the asset id. Asset identifier must respect the following regular
          expression <code>([\w\-_:]{1,128})</code> (max 128 characters)
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: the resource id. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: 'fifo used to relay status notification ex: fifo/~notif. A valid
          ''notify to'' starts with one of [''fifo/'', ''pubsub/'',''router/'']and
          max length is 255'
        in: query
        name: notifyTo
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetSetTargetResourceVersionReqWeb'
        description: the target resource version. Expected string (max 255 characters)
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResourceWeb'
          description: Target version set
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Resource, resource version or asset resource not found
      summary: Set asset's target resource version (use /api/v1/deviceMgt/devices/{deviceId}/resources/{resourceId}
        instead)
      tags:
      - _(deprecated) Device management resource - V0 (use Device management - Resource
        - V1 instead)
      x-codegen-request-body-name: targetVersion
  /api/v0/rm/asset/{assetIdNamespace}/{assetId}/update:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getLastUpdateUsingGET
      parameters:
      - description: the asset id namespace. Asset namespace must respect the following
          regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)
        in: path
        name: assetIdNamespace
        required: true
        schema:
          type: string
      - description: the asset id. Asset identifier must respect the following regular
          expression <code>([\w\-_:]{1,128})</code> (max 128 characters)
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: the resource id. Expected string (max 255 characters)
        in: query
        name: resourceId
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceUpdateWeb'
          description: The resource update
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get the asset's resources update status (use /api/v1/deviceMgt/devices/{deviceId}/firmwares/{firmwareId}/lastUpdate
        instead)
      tags:
      - _(deprecated) Device management resource - V0 (use Device management - Resource
        - V1 instead)
  /api/v0/rm/asset/{assetIdNamespace}/{assetId}/update/history:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getUpdateHistoryUsingGET
      parameters:
      - description: the asset id namespace. Asset namespace must respect the following
          regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)
        in: path
        name: assetIdNamespace
        required: true
        schema:
          type: string
      - description: the asset id. Asset identifier must respect the following regular
          expression <code>([\w\-_:]{1,128})</code> (max 128 characters)
        in: path
        name: assetId
        required: true
        schema:
          type: string
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«ResourceUpdateWeb»'
          description: The history of the resource updates
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get the asset's resources update history (use /api/v1/deviceMgt/devices/{deviceId}/firmwareUpdates
        instead)
      tags:
      - _(deprecated) Device management resource - V0 (use Device management - Resource
        - V1 instead)
  /api/v0/rm/connectors:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getAllConnectorsUsingGET
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: The set of all the available connectors
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get all available connectors
      tags:
      - Device management - Resources management
  /api/v0/rm/connectors/{connector}/metadata:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getConnectorMandatoryAndOptionalMetadataUsingGET
      parameters:
      - description: the resource's connector (ex. "http-updater"). A connector must
          respect the following regular expression <code>([\w\-_]{1,128})</code> (max
          128 characters)
        in: path
        name: connector
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResourceConnectors'
          description: The set of all the mandatory and optional metadata for the
            connector
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get mandatory and optional metadata of a connector
      tags:
      - Device management - Resources management
  /api/v0/rm/{resourceId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''device_resource''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: deleteResourceUsingDELETE
      parameters:
      - description: the resource id. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Resource deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Resource not found
      summary: Delete a resource
      tags:
      - Device management - Resources management
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getResourceUsingGET
      parameters:
      - description: the resource id. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: The resource
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Resource not found
      summary: Get a resource
      tags:
      - Device management - Resources management
    put:
      description: 'Usage of this API will be reported in your access log under ''device_resource''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: updateResourceUsingPUT
      parameters:
      - description: the resource Id. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceUpdateReqWeb'
        description: body of resource update
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
          description: The resource
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Resource not found
      summary: Update a resource
      tags:
      - Device management - Resources management
      x-codegen-request-body-name: resourceUpdate
  /api/v0/rm/{resourceId}/compatibleVersion/{currentVersion}:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getResourceCompatibleVersionsUsingGET
      parameters:
      - description: the resource id. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: current version. Expected string (max 255 characters)
        in: path
        name: currentVersion
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: The set of all the compatible versions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List the versions from which a resource update to the version can be
        done
      tags:
      - Device management - Resources management
  /api/v0/rm/{resourceId}/version:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getResourceVersionsUsingGET
      parameters:
      - description: the resource id. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«ResourceVersion»'
          description: The list of resource versions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List resource's versions
      tags:
      - Device management - Resources management
    post:
      description: 'Usage of this API will be reported in your access log under ''device_resource''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: addResourceVersionUsingPOST
      parameters:
      - description: the resource id. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceVersionAddReqWeb'
        description: body of add resource version
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceVersion'
          description: The resource version
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Resource not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Resource version already exists
      summary: Add a new version to a resource
      tags:
      - Device management - Resources management
      x-codegen-request-body-name: request
  /api/v0/rm/{resourceId}/version/{resourceVersionId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''device_resource''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: deleteResourceVersionUsingDELETE
      parameters:
      - description: the resource id. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: the resource version id. Expected string (max 255 characters)
        in: path
        name: resourceVersionId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Resource version deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Resource version not found
      summary: Delete a resource's version
      tags:
      - Device management - Resources management
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getResourceVersionUsingGET
      parameters:
      - description: the resource id. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: the resource version id
        in: path
        name: resourceVersionId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceVersion'
          description: The resource version
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Resource version not found
      summary: Get a resource's version
      tags:
      - Device management - Resources management
    put:
      description: 'Usage of this API will be reported in your access log under ''device_resource''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: updateResourceVersionUsingPUT
      parameters:
      - description: the resource id. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: the resource version id. Expected string (max 255 characters)
        in: path
        name: resourceVersionId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceVersionUpdateReqWeb'
        description: body of resource version update
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceVersion'
          description: The resource version
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Resource version not found
      summary: Update a resource's version
      tags:
      - Device management - Resources management
      x-codegen-request-body-name: resourceVersionUpdate
  /api/v0/setpwd:
    post:
      description: Usage of this API will be reported in your access log under 'authentication'
        category.
      operationId: updateUserPasswordWithTokenUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordWithTokenReqWeb'
        description: body of user update password with token
        required: false
      responses:
        "200":
          content: {}
          description: OK
      summary: Update user's password
      tags:
      - User authentication
      x-codegen-request-body-name: userUpdatePasswordRequest
  /api/v0/sms-connector/settings:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listSettingsUsingGET
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMSConnectorBusinessSettingsPageWeb'
          description: Listing all the business settings of Business Settings
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "401":
          content: {}
          description: Unauthorized action
        "403":
          content: {}
          description: Forbidden action (missing role)
      summary: List all the business settings of the SMSConnector for a tenant
      tags:
      - _(deprecated) SMS Connector BusinessSettings (use Device management - Connector
        nodes - V1 instead)
  /api/v0/sms-connector/settings/business:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getBusinessSettingsUsingGET
      parameters:
      - description: 'the server phone number ex: "20259", // Must be defined in OfferSettings'
        in: query
        name: serverPhoneNumber
        required: true
        schema:
          type: string
      - description: 'the decoder Name ex: "decoderName"'
        in: query
        name: decoderName
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessSettings'
          description: The getted Business Settings
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "401":
          content: {}
          description: Unauthorized action
        "403":
          content: {}
          description: Forbidden action (missing role)
      summary: Get a business settings of SMS Connector
      tags:
      - _(deprecated) SMS Connector BusinessSettings (use Device management - Connector
        nodes - V1 instead)
    post:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: createBusinessSettingsUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SMSConnectorBusinessSettingsCreationReqWeb'
        description: body to create business settings for SMS Connector
        required: false
      responses:
        "207":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorStatusResponse'
          description: 'Map of msisdn requested with status. ex: "{1374: {status:
            2000, message: OK}, ..."'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "401":
          content: {}
          description: Unauthorized action
        "403":
          content: {}
          description: Forbidden action (missing role)
      summary: Create a new business settings of SMS Connector (use Device management
        - Interfaces - V1 instead)
      tags:
      - _(deprecated) SMS Connector BusinessSettings (use Device management - Connector
        nodes - V1 instead)
      x-codegen-request-body-name: request
  /api/v0/sms-connector/settings/business/msisdn:
    delete:
      deprecated: true
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: deleteBusinessSettingsByMsiSDNUsingDELETE
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SMSConnectorBusinessSettingsDeleteMsisdnReqWeb'
        description: body to delete business settings per msisdn for SMS Connector
        required: false
      responses:
        "207":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorStatusResponse'
          description: 'Map of msisdn requested with status. ex: "{1374: {status:
            2000, message: OK}, ..."'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "401":
          content: {}
          description: Unauthorized action
        "403":
          content: {}
          description: Forbidden action (missing role)
      summary: Delete msisdn in business settings of SMS Connector
      tags:
      - _(deprecated) SMS Connector BusinessSettings (use Device management - Connector
        nodes - V1 instead)
      x-codegen-request-body-name: request
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listMsisdnUsingGET
      parameters:
      - description: 'the server phone number ex: "20259", // Must be defined in OfferSettings'
        in: query
        name: serverPhoneNumber
        required: true
        schema:
          type: string
      - description: 'the decoder Name ex: "decoderName"'
        in: query
        name: decoderName
        schema:
          type: string
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMSConnectorMsisdnPageWeb'
          description: The list of msisdn of Business Settings
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "401":
          content: {}
          description: Unauthorized action
        "403":
          content: {}
          description: Forbidden action (missing role)
      summary: List msisdn of business settings of SMS Connector
      tags:
      - _(deprecated) SMS Connector BusinessSettings (use Device management - Connector
        nodes - V1 instead)
  /api/v0/sms-connector/settings/business/{serverPhoneNumber}:
    post:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: updateBusinessSettingsUsingPOST
      parameters:
      - description: 'server phone number ex: "20259", // Must be defined in OfferSettings'
        in: path
        name: serverPhoneNumber
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SMSConnectorBusinessSettingsUpdateReqWeb'
        description: body to update business settings for SMS Connector
        required: false
      responses:
        "207":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorStatusResponse'
          description: 'Map of msisdn requested with status. ex: "{1374: {status:
            2000, message: OK}, ..."'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "401":
          content: {}
          description: Unauthorized action
        "403":
          content: {}
          description: Forbidden action (missing role)
      summary: Update business settings of the SMSConnector
      tags:
      - _(deprecated) SMS Connector BusinessSettings (use Device management - Connector
        nodes - V1 instead)
      x-codegen-request-body-name: request
  /api/v0/sms-connector/settings/business/{serverPhoneNumber}/msisdn/{msisdnNumber}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: deleteBusinessSettingsForOneMsiSDNUsingDELETE
      parameters:
      - description: 'server phone number ex: "20259", // Must be defined in OfferSettings'
        in: path
        name: serverPhoneNumber
        required: true
        schema:
          type: string
      - description: 'msisdn number ex: "0606060606"'
        in: path
        name: msisdnNumber
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Ok
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad Request
        "403":
          content: {}
          description: Forbidden action (missing role)
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Not Found
      summary: Delete one msisdn in business settings of SMS Connector
      tags:
      - _(deprecated) SMS Connector BusinessSettings (use Device management - Connector
        nodes - V1 instead)
  /api/v0/sms-connector/sms:
    post:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: sendSMSUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SMSConnectorSendSMSReqWeb'
        description: body to send SMS via SMS Connector (only one Payload field must
          be set)
        required: false
      responses:
        "207":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorStatusResponse'
          description: 'Map of msisdn requested with status. ex: "{1374: {status:
            2000, message: OK}, ..."'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "401":
          content: {}
          description: Unauthorized action
        "403":
          content: {}
          description: Request forbidden (missing role)
      summary: send SMS by SMS Connector for a list of MSISDN
      tags:
      - _(deprecated) SMS Connector
      x-codegen-request-body-name: request
  /api/v0/statistics/tenant/{tenantId}:
    get:
      deprecated: true
      description: 'There are 2 types of data in the statistics :  <br/>> counters
        : represent a flow (in/out) and are collected throughout the day. example
        : counters for device creation or device deletion.<br/>> inventories : represent
        a stock and are counted once a day. example : the total number of registered
        devices.<br/>The statistics, provided for a tenant and a range of dates, contain
        2 main sections :<br/> > ''total'': gives an aggregated view for each service.
        Counters are summed on the period. Inventories represent the max value on
        the period,<br/> > ''statisticsPerDay'': daily statistics. displays the counter
        and inventory values for each day and each service.<br/><br/> The existing
        sections are:<br/> - Datazone : each service can store (data storage) or access
        (advanced search) data in an internal dedicated area: datazone regroups all
        statistics linked to these actions,<br/> - for HTTP requests: restDataZoneQuery
        (for dataZone/dataSearch), restOthers (for user/mail/sms), restTraffic (for
        FIFO/PubSub/Router),<br/> - for MQTT : mqttNoSecure, mqttWebSocketNoSecure
        (with WebSocket), mqttSSL (with SSL), mqttWebSocketSSL (with WebSocket/SSL)<br/>
        - for SMS : sms_''server phone number'',<br/> - for Devices : the deviceInventory
        section gives the number of created/deleted devices during the day (counters)
        and the total number of devices (counted in the beginning of the day at 1.00
        am). It also gives statistics on device connections/disconnections (counters).<br/>
        - for Msisdn : the msisdnInventory section gives the number of msisdn provisioned/unprovisioned
        during the day (counters) and the total number of registered msisdns (inventory).<br/>
        - overall : aggregated connector name; virtual connector containing the data
        of all the connectors aggregated,<br/><br/> For the current day, the traffic
        information is updated within 15 minutes. The number of sources/active devices
        is updated every minute.<br/><u>About the virtual messages:</u><br/>When the
        MsgIn / MsgOut message size is bigger than 5 kilobytes, a new indicator MsgVirtualIn
        / MsgVirtualOut  is used to count the number of packets of 5 kilobytes for
        that message.'
      operationId: getTenantStatisticsUsingGET_3
      parameters:
      - description: 'the id of your tenant ex: 57xxxxxxxxxxxxxxxxxxxxxx'
        in: path
        name: tenantId
        required: true
        schema:
          type: string
      - description: the requested start date as yyyy-MM-dd
        in: query
        name: startDate
        required: true
        schema:
          type: string
      - description: the requested end date as yyyy-MM-dd
        in: query
        name: endDate
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantStatsWeb'
            text/csv:
              schema:
                $ref: '#/components/schemas/TenantStatsWeb'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
            text/csv:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "401":
          content: {}
          description: Unauthorized action
      summary: Get tenant statistics for a specific tenant and a range of dates
      tags:
      - _(deprecated) Statistics (use Accounting - V1 accounting instead)
  /api/v0/tenants/me:
    get:
      description: '<p><strong>Beware</strong>: The information contained in the following
        3 fields is restricted to Live Objects Portal application only. It may change
        without notice, no backward compatibility is guaranteed to customer applications<ul><li>"offerSettings"<li>"technicalSettings"<li>"userSettings"<ul>'
      operationId: getMyTenantUsingGET
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: The tenant details is returned
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
      summary: Get details of your account
      tags:
      - Tenant accounts
  /api/v0/topics/fifo:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : BUS_CONFIG_R.'
      operationId: listFifoTopicsUsingGET
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«FifoTopic»'
          description: The FIFO list
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List all FIFOs
      tags:
      - Bus management
    post:
      description: 'Usage of this API will be reported in your access log under ''routing''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : BUS_CONFIG_W.'
      operationId: createUsingPOST_3
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FifoCreateReqWeb'
        description: body for create a new fifo
        required: false
      responses:
        "200":
          content: {}
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: FIFO creation forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: FIFO already exists
      summary: Create a FIFO
      tags:
      - Bus management
      x-codegen-request-body-name: requestBody
  /api/v0/topics/fifo/{fifoName}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''routing''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : BUS_CONFIG_W.'
      operationId: deleteUsingDELETE_20
      parameters:
      - description: name of the fifo. Fifo name must respect the following regular
          expression <code>[A-Za-z\d-_~]+</code> (max 255 characters)
        in: path
        name: fifoName
        required: true
        schema:
          type: string
      - description: |-
          false: Live Objects prevents deleting fifo while there is at least one consumer,
          true: the fifo will be deleted in any cases.
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: FIFO deleted (if true)
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: FIFO not found
      summary: Delete a FIFO
      tags:
      - Bus management
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : BUS_CONFIG_R.'
      operationId: getUsingGET_19
      parameters:
      - description: name of the fifo. Fifo name must respect the following regular
          expression <code>[A-Za-z\d-_~]+</code> (max 255 characters)
        in: path
        name: fifoName
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FifoTopic'
          description: A FIFO
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: FIFO not found
      summary: Get a FIFO
      tags:
      - Bus management
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : BUS_W.'
      operationId: fifoPublishUsingPOST
      parameters:
      - description: name of the fifo. Fifo name must respect the following regular
          expression <code>[A-Za-z\d-_~]+</code> (max 255 characters)
        in: path
        name: fifoName
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: byte
              type: string
          '*/*':
            schema:
              format: byte
              type: string
        description: body for publish a message into your FIFO topic (your body is
          specific at your topic)
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Publish a message into a FIFO
      tags:
      - Bus management
      x-codegen-request-body-name: payload
  /api/v0/topics/router/{routingKey}:
    post:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : BUS_W.'
      operationId: publishUsingPOST
      parameters:
      - description: Routing Key
        in: path
        name: routingKey
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: byte
              type: string
          '*/*':
            schema:
              format: byte
              type: string
        description: payload
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: OK
      summary: Publishing a message into a ROUTER topic
      tags:
      - _(deprecated) Router topic management
      x-codegen-request-body-name: payload
  /api/v0/updateEmail:
    post:
      description: Usage of this API will be reported in your access log under 'authentication'
        category.
      operationId: updateUserEmailWithTokenUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailReqWeb'
        description: body of update User Email
        required: false
      responses:
        "200":
          content: {}
          description: OK
      summary: Update user's email
      tags:
      - User authentication
      x-codegen-request-body-name: userUpdateEmailRequest
  /api/v0/users:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : USER_R.'
      operationId: listUsersUsingGET_1
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: 'identifier of tenant account (optional) ex: "57xxxxxxxxxxxxxxxxxxxxxx"'
        in: query
        name: tenantId
        schema:
          type: string
      - description: 'login of tenant account (optional) ex: "login_name"'
        in: query
        name: login
        schema:
          type: string
      - description: 'email of tenant account (optional) ex: "myAccount@mail.com"'
        in: query
        name: email
        schema:
          type: string
      - description: 'external (IDP) provider of tenant account (optional) ex: "SIU"'
        in: query
        name: externalProvider
        schema:
          type: string
      - description: 'external (IDP) identifier of tenant account (optional) ex: "57xxxxxxxxxxxxxxxxxxxxxx"'
        in: query
        name: externalId
        schema:
          type: string
      - description: 'external (IDP) login of tenant account (optional) ex: "login_name"'
        in: query
        name: externalLogin
        schema:
          type: string
      - description: 'roles of tenant account (optional) ex: "[TENANT_ADMIN, USER_KEY]"'
        explode: true
        in: query
        name: roles
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'roles not in tenant account (optional) ex: "[LPWA_ORANGE_ADMIN]"'
        explode: true
        in: query
        name: 'roles not in '
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'userState of tenant account (optional) ex: "[enabled]"'
        explode: true
        in: query
        name: userState
        schema:
          items:
            type: string
          type: array
        style: form
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«User»'
          description: The list of the Users of the Tenant
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
      summary: List all users in a tenant account
      tags:
      - Users management
    post:
      description: 'Usage of this API will be reported in your access log under ''user''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : USER_W.'
      operationId: createUserAccountUsingPOST_3
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationReqWeb'
        description: body of user creation
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The created User
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Conflict
      summary: Create a user
      tags:
      - Users management
      x-codegen-request-body-name: userCreationRequest
  /api/v0/users/activateTrial:
    post:
      description: Usage of this API will be reported in your access log under 'user'
        category.
      operationId: updateUserPasswordWithTokenWithoutCaptchaUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordWithTokenReqWeb'
        description: userUpdatePasswordRequest
        required: true
      responses:
        "200":
          content: {}
          description: Updating of the password is done, nothing in the response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Conflict
      summary: Update user password with a token
      tags:
      - Users management
      x-codegen-request-body-name: userUpdatePasswordRequest
  /api/v0/users/activateUser:
    post:
      description: 'Usage of this API will be reported in your access log under ''user''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : USER_W.'
      operationId: activateUserUsingPOST_3
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActivationReqWeb'
        description: body of user activation
        required: false
      responses:
        "200":
          content: {}
          description: An email is sent to the user to activate his account
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
      summary: Activate a user in a tenant account
      tags:
      - Users management
      x-codegen-request-body-name: userActivationRequest
  /api/v0/users/me:
    get:
      operationId: getCurrentUserUsingGET
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The User data are available
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
      summary: Get a "myself" user data of Tenant
      tags:
      - Users management
  /api/v0/users/me/portaldata:
    get:
      operationId: getUserPortalDataUsingGET
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: My user's portal data
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
      summary: Get the portal data of me
      tags:
      - Users management
    put:
      operationId: updateUserPortalDataUsingPUT
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: body of my user portal data Update
        required: false
      responses:
        "204":
          content: {}
          description: No content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request Entity Too Large
      summary: Update the portal data of me
      tags:
      - Users management
      x-codegen-request-body-name: portalData
  /api/v0/users/{userId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''user''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : USER_W.'
      operationId: deleteUserUsingDELETE_3
      parameters:
      - description: the User Identifier. Expected identifier (max 24 characters)
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: 'identifier of tenant account ex: "57xxxxxxxxxxxxxxxxxxxxxx".
          Expected identifier (max 24 characters)'
        in: query
        name: tenantId
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Deletion of the user is done, nothing in the response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
      summary: Delete a user in a tenant account
      tags:
      - Users management
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : USER_R.'
      operationId: getUserUsingGET_3
      parameters:
      - description: the User Identifier
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: 'identifier of tenant account ex: "57xxxxxxxxxxxxxxxxxxxxxx".
          Expected identifier (max 24 characters)'
        in: query
        name: tenantId
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The User data are available
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
      summary: Get details of a user in a tenant account
      tags:
      - Users management
    post:
      description: 'Usage of this API will be reported in your access log under ''user''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : USER_W.'
      operationId: updateUserUsingPOST_1
      parameters:
      - description: the User Identifier. Expected identifier (max 24 characters)
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateReqWeb'
        description: body of user update
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The User data are updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Conflict
      summary: Update a user
      tags:
      - Users management
      x-codegen-request-body-name: userUpdateRequest
  /api/v0/users/{userId}/password:
    post:
      description: Usage of this API will be reported in your access log under 'user'
        category.
      operationId: updateUserPasswordUsingPOST
      parameters:
      - description: the User Identifier. Expected identifier (max 24 characters)
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordReqWeb'
        description: body of user update password
        required: false
      responses:
        "200":
          content: {}
          description: Updating of the password is done, nothing in the response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: An ErrorMessage
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Conflict
      summary: Update user password
      tags:
      - Users management
      x-codegen-request-body-name: userUpdatePasswordRequest
  /api/v0/vendors/lora/data/count:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getMessageCountUsingGET
      parameters:
      - description: the period to group by
        in: query
        name: period
        schema:
          enum:
          - day
          - week
          - month
          type: string
      - description: the timezone of the client
        in: query
        name: timezone
        schema:
          default: UTC
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeferredListenableFutureResult«string,string»'
          description: a list of message counts group by period
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List of message counts group by period
      tags:
      - Device management for LoRa
  /api/v0/vendors/lora/devices:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listDevicesUsingGET_3
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: Requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: DevEUI regexp filter
        in: query
        name: devEUI
        schema:
          type: string
      - description: Name regexp filter
        in: query
        name: name
        schema:
          type: string
      - description: Status filter
        in: query
        name: status
        schema:
          enum:
          - ACTIVATED
          - DEACTIVATED
          type: string
      - description: Tags filter
        explode: true
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Field used for sorting (prefix with '-' for descending order)
        in: query
        name: sort
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«LoraDevice»'
          description: A page of LoRa devices
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List LoRa devices (use Device management - Connector nodes - V1 instead)
      tags:
      - Device management for LoRa
    post:
      deprecated: true
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: registerDeviceUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoraDeviceCreateReqWeb'
        description: A LoRa device
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoraDevice'
          description: Return the registered LoRa device.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: '40413 : Bad account configuration. Please, contact the assistance.'
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: "4096 : The device EUI is already registered. \n40910 : The\
            \ device network address is already registered."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Internal error. Please, contact the assistance.
      summary: Register a LoRa device (use Device management - Interfaces - V1 instead)
      tags:
      - Device management for LoRa
      x-codegen-request-body-name: req
  /api/v0/vendors/lora/devices/count:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: countDevicesUsingGET_2
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoraDeviceStatsWeb'
          description: Return the count of activated and deactivated devices
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Device counts
      tags:
      - Device management for LoRa
  /api/v0/vendors/lora/devices/{devEUI}:
    delete:
      deprecated: true
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: unregisterDeviceUsingDELETE
      parameters:
      - description: DevEUI of the device
        in: path
        name: devEUI
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content:
            application/json:
              schema:
                type: boolean
          description: The device has been unregistered
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: '4001 : The device EUI validation has failed (must be an hexadecimal
            string of size 16)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: '40411 : the device was not found'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Internal error. Please, contact the assitance
      summary: Unregister a device (use Device management - Connector nodes - V1 instead)
      tags:
      - Device management for LoRa
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getDeviceUsingGET_3
      parameters:
      - description: DevEUI of the device
        in: path
        name: devEUI
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoraDevice'
          description: Return the requested LoRa device
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: '4001 : The device EUI validation has failed (must be an hexadecimal
            string of size 16)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: '40411 : the device was not found'
      summary: Get a device (use Device management - Connector nodes - V1 instead)
      tags:
      - Device management for LoRa
    patch:
      deprecated: true
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: updateDeviceUsingPATCH_1
      parameters:
      - description: DevEUI of the device
        in: path
        name: devEUI
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoraDeviceUpdateReqWeb'
        description: A LoRa device (add only fields you want to update)
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoraDevice'
          description: Return the modified LoRa device
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: '4001 : The device EUI validation has failed (must be an hexadecimal
            string of size 16)'
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: '40411 : the device was not found'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Internal error. Please, contact the assistance
      summary: Update a device (use Device management - Connector nodes - V1 instead)
      tags:
      - Device management for LoRa
      x-codegen-request-body-name: req
  /api/v0/vendors/lora/devices/{devEUI}/commands:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listCommandUsingGET_1
      parameters:
      - description: DevEUI of the device
        in: path
        name: devEUI
        required: true
        schema:
          type: string
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: The requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: The command status
        in: query
        name: status
        schema:
          type: string
      - description: 'Filter data where timestamp is in timeRange (must be ISO 8601
          formatted) : ?timeRange=[lowerbound],[upperbound]. Coma is mandatory, lowerbound
          and upperbound are optionals. Lowerbound is inclusive, upperbound is exclusive.'
        explode: true
        in: query
        name: timeRange
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Field used for sorting. Prefix with '-' for descending order
        in: query
        name: sort
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«LoraCommand»'
          description: Return a page of LoRa command
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: |-
            4001 : The device EUI validation has failed (must be an hexadecimal string of size 16)
            4002 : The parameter validation has failed for the specified field
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: '40411 : the device was not found'
      summary: List commands (use /api/v1/deviceMgt/connectors/lora/nodes/{devEUI}/downlinks
        instead)
      tags:
      - Device management for LoRa
    post:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R, DEVICE_W.'
      operationId: registerCommandUsingPOST_1
      parameters:
      - description: DevEUI of the device
        in: path
        name: devEUI
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoraCommandWeb'
        description: A LoRa command
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoraCommand'
          description: OK
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoraCommand'
          description: The command has been registered
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: |-
            4001 : The device EUI validation has failed (must be an hexadecimal string of size 16)
            4002 : The command validation has failed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: '40411 : the device was not found'
      summary: Register a command (use /api/v1/deviceMgt/connectors/lora/nodes/{devEUI}/downlinks
        instead)
      tags:
      - Device management for LoRa
      x-codegen-request-body-name: req
  /api/v0/vendors/lora/profiles:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getDeviceProfilesUsingGET_1
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Return the list of LoRa device profile
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get LoRa device profiles (use /api/v1/deviceMgt/connectors/lora/profiles
        instead)
      tags:
      - Device management for LoRa
  /api/v0/vendors/lwm2m/identities:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listDevicesUsingGET_4
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: sort
        explode: true
        in: query
        name: sort
        schema:
          items:
            type: string
          type: array
        style: form
      - description: filter, regexp on endpoint to filter list
        in: query
        name: ep
        schema:
          type: string
      - description: filter, required tags
        explode: true
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
        style: form
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lwm2mDevicePageWeb'
          description: a page of LWM2M devices
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List lwm2m devices
      tags:
      - Device management for COAP/LWM2M (beta)
    post:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: registerDeviceUsingPOST_1
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LWM2MDevice'
        description: device
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LWM2MDevice'
          description: CoAP-Lwm2m device has been created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Endpoint and identity must be unique
      summary: Register LWM2M/DTLS identity
      tags:
      - Device management for COAP/LWM2M (beta)
      x-codegen-request-body-name: device
  /api/v0/vendors/lwm2m/identity/{ep}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: unregisterDeviceUsingDELETE_1
      parameters:
      - description: the device's endpoint
        in: path
        name: ep
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: CoAP-Lwm2m device has been removed
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: No device found for such parameter
      summary: Unregister a device
      tags:
      - Device management for COAP/LWM2M (beta)
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getDeviceUsingGET_4
      parameters:
      - description: the device's endpoint
        in: path
        name: ep
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LWM2MDevice'
          description: A body is retrieved
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: No device found for such parameter
      summary: Find a device
      tags:
      - Device management for COAP/LWM2M (beta)
    put:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: updateDeviceUsingPUT
      parameters:
      - description: the device's endpoint
        in: path
        name: ep
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LWM2MDevice'
        description: device
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LWM2MDevice'
          description: CoAP-Lwm2m device has been updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: No device found for such parameter
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Endpoint and identity must be unique
      summary: Update a device
      tags:
      - Device management for COAP/LWM2M (beta)
      x-codegen-request-body-name: device
  /api/v0/whoami:
    get:
      operationId: getTenantIdUsingGET
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleStringWeb'
          description: The tenant id associated with the API key
      summary: Get your tenant id
      tags:
      - User authentication
  /api/v1/accounting/daily:
    get:
      description: '<p>Get accounting metrics for a given period (from one day to
        2 months) over the past 18 months. The data is aggregated by days.</p><p>The
        response contains 2 main sections : <strong>tenant</strong> and <strong>days</strong>.</p><p>The
        "<strong>tenant"</strong> section gives useful information related to the
        customer. It returns the current values, whatever has been specified in startDay
        and endDay parameters :</p><ul><li>id : Live Objects identifier</li><li>name
        : tenant name in Live Objects</li><li>detailed offer and options, including
        the display name</li><li>properties : custom fields</li></ul><p><br />The
        "<strong>days"</strong> section provides connectors and service metrics for
        each day.</p><ul><li><strong>connectors</strong> section (LoRa, mqtt (device),
        mqtt application, http, sms<strong>_[server phone number]</strong>, external)
        :<ul><li><strong>traffic</strong> metrics:<ul><li><strong>msg</strong>: number
        of messages (no unit)</li><li><strong>bytes</strong>: sum of the volume of
        all messages (unit: bytes)</li><li><strong>virtualMsg</strong>: number of
        messages split by a size of 5kB (no unit).<br />Example: 1 msg with a size
        of 7kB = 1 msg and 2 virtualMsg</li></ul></li><li><strong>inventory</strong>
        metrics:<ul><li><strong>maxNumberOfEnabledNodes</strong>: LoRa specific: max
        number of simultaneously registered LoRa interfaces for the day. Corresponding
        LoRa status : all status except DEACTIVATED.</li></ul></li><li><strong>service</strong>
        section:<ul><li><strong>deviceManagement</strong></li><ul><li><strong>numberOfSuccessfulDownloads</strong>:
        count of all firmware downloads in success</li></ul><li><strong>storage</strong></li><ul><li><strong>storedDataMessagesInMB</strong>:
        the total size of messages stored in database.This size does not include technical
        data (for ex. Index).Values in MB are rounded up.The value differs from the
        sum of “IN” bytes sent to the platform because it includes data coming from
        enrichment/decoding/event processing features.This information is available
        from June 2019.</li></ul></ul></li></ul></ul><p><span style="text-decoration:
        underline;">Additional info</span> :</p><p>Traffic is split by connector type
        (mqtt, mqtt application, sms_[server phone number], LoRa, http, external)
        and by directions (in/out).</p><ul><li><strong>In</strong>: means incoming
        traffic (i.e. from "outside" into Live Objects) (mostly from objects) also
        called <strong>Uplink</strong>.</li><li><strong>Out</strong>: any outgoing
        message (i.e. from Live Objects to "outside") except protocol messages (MQTT
        CONNACK, SUBACK … ) and messages consumed by applications on top of Live Objects
        (subscribe in MQTT application mode).<br /><br /></li></ul><p><strong>http
        specific:</strong></p><ul><li>IN traffic: sum (POST /api/v0/data/bulk &amp;
        POST /api/v0/data/streams/{streamId})</li></ul><p><strong>mqtt specific:</strong></p><ul><li>IN
        & OUT traffic: after may 2020 : the mqtt section contains only traffic in
        device mode. Mqtt application mode is computed only for incoming traffic (IN).</li></ul>'
      operationId: getDailyStatisticsUsingGET_2
      parameters:
      - description: the requested start day as yyyy-MM-dd. If missing, the current
          day is used.
        in: query
        name: startDay
        schema:
          type: string
      - description: the requested end day as yyyy-MM-dd. If missing, the current
          day is used.
        in: query
        name: endDay
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDayMetrics'
          description: OK
      summary: Get daily accounting metrics (Beta).
      tags:
      - Accounting - V1
  /api/v1/accounting/monthly:
    get:
      description: '<p>Get accounting metrics for a given period (up to 18 months).
        The data is aggregated by months.</p><p>The response contains 2 main sections
        : <strong>tenant</strong> and <strong>months</strong>.</p><p>The "<strong>tenant"</strong>
        section gives useful information related to the customer. It returns the current
        values, whatever has been specified in startMonth and endMonth parameters
        :</p><ul><li>id : Live Objects identifier</li><li>name : tenant name in Live
        Objects</li><li>detailed offer and options, including the display name</li><li>properties
        : custom fields</li></ul><p><br />The "<strong>months"</strong> section provides
        connectors and service metrics for each month.</p><ul><li><strong>connectors</strong>
        section (LoRa, mqtt (device), mqtt application, http, sms<strong>_[server
        phone number]</strong>, external) :<ul><li><strong>traffic</strong> metrics:<ul><li><strong>msg</strong>:
        number of messages (no unit)</li><li><strong>bytes</strong>: sum of the volume
        of all messages (unit: bytes)</li><li><strong>virtualMsg</strong>: number
        of messages split by a size of 5kB (no unit).<br />Example: 1 msg with a size
        of 7kB = 1 msg and 2 virtualMsg</li></ul></li><li><strong>inventory</strong>
        metrics:<ul><li><strong>numberOfCommunicatingNodes</strong>: this counter
        is available by connector: LoRa, mqtt, sms_[server phone number] or external.
        It is a unique count of devices that send at least one uplink message to the
        platform (except for mqtt, see below). More precisely, by connector:<ul><li>LoRa:
        distinct devEUIs sending an uplink</li><li>mqtt: distinct clientIds that have
        been connected at least one time</li><li>external: distinct nodeIds behind
        an external connector that have been declared online or have published a dataMessage</li><li>sms:
        distinct MSISDNs sending a message</li></ul></li><li><strong>numberOfActivatedNodes</strong>:
        LoRa specific: count of unique devices allowed to communicate and paired to
        the network. Corresponding LoRa status : ACTIVATED or INITIALIZED.</li><li><strong>numberOfActivatedTdoaNodes</strong>:
        LoRa specific: count of unique Activated devices that had TDOA lora option
        for the month.</li><li><strong>numberOfActivatedAckUlNodes</strong>: LoRa
        specific: count of unique Activated devices that had AckUL lora option for
        the month. </ul></ul></li></ul><ul><li><strong>service</strong> section:<ul><li><strong>deviceManagement</strong></li><ul><li><strong>numberOfSuccessfulDownloads</strong>:
        count of all firmware downloads in success</li></ul><li><strong>storage</strong></li><ul><li><strong>storedDataMessagesInMB</strong>:
        the total size of messages stored in database.This size does not include technical
        data (for ex. Index).Values in MB are rounded up.The value differs from the
        sum of “IN” bytes sent to the platform because it includes data coming from
        enrichment/decoding/event processing features.This information is available
        from June 2019.</li></ul></ul></li></ul><p><span style="text-decoration: underline;">Additional
        info</span> :</p><p>Traffic is split by connector type (mqtt, mqtt application,
        sms_[server phone number], LoRa, http, external) and by directions (in/out).</p><ul><li><strong>In</strong>:
        means incoming traffic (i.e. from "outside" into Live Objects) (mostly from
        objects) also called <strong>Uplink</strong>.</li><li><strong>Out</strong>:
        any outgoing message (i.e. from Live Objects to "outside") except protocol
        messages (MQTT CONNACK, SUBACK … ) and messages consumed by applications on
        top of Live Objects (subscribe in MQTT application mode).<br /><br /></li></ul><p><strong>http
        specific:</strong></p><ul><li>IN traffic: sum (POST /api/v0/data/bulk &amp;
        POST /api/v0/data/streams/{streamId})</li></ul><p><strong>mqtt specific:</strong></p><ul><li>IN
        & OUT traffic: after may 2020 : the mqtt section contains only traffic in
        device mode. Mqtt application mode is computed only for incoming traffic (IN).</li></ul>'
      operationId: getMonthlyStatisticsUsingGET_2
      parameters:
      - description: the requested start month as yyyy-MM. If missing, the current
          month is used.
        in: query
        name: startMonth
        schema:
          type: string
      - description: the requested end month as yyyy-MM. If missing, the current month
          is used.
        in: query
        name: endMonth
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantMonthMetrics'
          description: OK
      summary: Get monthly accounting metrics.
      tags:
      - Accounting - V1
  /api/v1/deviceMgt/commands/{commandId}:
    delete:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: deleteCommandUsingDELETE_1
      parameters:
      - description: identifier of specific command. Expected identifier (max 24 characters)
        in: path
        name: commandId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Command deleted
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Command not found
      summary: Delete a specific command
      tags:
      - Device management - Commands - V1
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getCommandUsingGET_1
      parameters:
      - description: identifier of specific command. Expected identifier (max 24 characters)
        in: path
        name: commandId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Command'
          description: The command
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Command not found
      summary: Get a specific command
      tags:
      - Device management - Commands - V1
  /api/v1/deviceMgt/commands/{commandId}/status:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getCommandStatusUsingGET_1
      parameters:
      - description: identifier of specific command. Expected identifier (max 24 characters)
        in: path
        name: commandId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleStringWeb'
          description: The command status
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Command not found
      summary: Get the status of a specific command
      tags:
      - Device management - Commands - V1
    put:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: setCommandStatusUsingPUT_1
      parameters:
      - description: identifier of specific command. Expected identifier (max 24 characters)
        in: path
        name: commandId
        required: true
        schema:
          type: string
      - description: force the update of the command status
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              enum:
              - PENDING
              - PROCESSING
              - PROCESSED
              - CANCELED
              - ERROR
              - RETRYING
              - EXPIRED
              - UNKNOWN
              type: string
        description: future state of the command  --> CANCELED
        required: true
      responses:
        "200":
          content: {}
          description: Command status updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Command not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid command status update
      summary: 'Update the status of specific command '
      tags:
      - Device management - Commands - V1
      x-codegen-request-body-name: newStatus
  /api/v1/deviceMgt/connectors/lora/connectivities:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listConnectivityPlansUsingGET
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/LoraNetworkSubscriptionDetail'
                type: array
          description: list of LoRa connectivity plans
      summary: List connectivity plans
      tags:
      - Device management for LoRa
  /api/v1/deviceMgt/connectors/lora/connectivity:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listConnectivityPlanUsingGET
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: a page of LoRa connectivity plan
      summary: List connectivity plan
      tags:
      - Device management for LoRa
  /api/v1/deviceMgt/connectors/lora/gateways:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listGatewaysUsingGET
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: filtering by identifier (regexp filter) of gateway
        in: query
        name: id
        schema:
          type: string
      - description: filtering by name (regexp filter) of gateway
        in: query
        name: name
        schema:
          type: string
      - description: filtering by type of gateway
        in: query
        name: type
        schema:
          type: string
      - description: filtering by status of gateway
        in: query
        name: status
        schema:
          type: string
      - description: filtering by manufacturer of gateway
        in: query
        name: manufacturer
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«LoraGatewayInfo»'
          description: Return a list of LoRa gateways
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List gateways
      tags:
      - Device management for LoRa
  /api/v1/deviceMgt/connectors/lora/gateways/{id}:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getGatewayUsingGET
      parameters:
      - description: identifier of the gateway
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoraGatewayInfo'
          description: Return a list of LoRa gateways
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Not found
      summary: Get a gateway
      tags:
      - Device management for LoRa
    patch:
      description: 'Set the location property to an empty object to remove the gateway
        location.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: updateGatewayUsingPATCH
      parameters:
      - description: identifier of the gateway
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoraGatewayData'
        description: loraGatewayData
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoraGatewayInfo'
          description: Return a list of LoRa gateways
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Not found
      summary: Update a gateway.
      tags:
      - Device management for LoRa
      x-codegen-request-body-name: loraGatewayData
  /api/v1/deviceMgt/connectors/lora/nodes/{devEUI}/downlinks:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listCommandUsingGET
      parameters:
      - description: DevEUI of the device
        in: path
        name: devEUI
        required: true
        schema:
          type: string
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: The requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: The command status
        in: query
        name: status
        schema:
          type: string
      - description: 'Filter data where timestamp is in timeRange (must be ISO 8601
          formatted) : ?timeRange=[lowerbound],[upperbound]. Coma is mandatory, lowerbound
          and upperbound are optionals. Lowerbound is inclusiv, upperbound is exclusiv.'
        explode: true
        in: query
        name: timeRange
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Field used for sorting. Prefix with '-' for descending order
        in: query
        name: sort
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable«LoraCommand»'
          description: Return a page of LoRa command
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: |-
            4001 : The device EUI validation has failed (must be an hexadecimal string of size 16)
            4002 : The parameter validation has failed for the specified field
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: '40411 : the device was not found'
      summary: List commands
      tags:
      - Device management for LoRa
    post:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R, DEVICE_W.'
      operationId: registerCommandUsingPOST
      parameters:
      - description: DevEUI of the device
        in: path
        name: devEUI
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoraCommandWeb'
        description: A LoRa command
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoraCommand'
          description: OK
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoraCommand'
          description: The command has been registered
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: |-
            4001 : The device EUI validation has failed (must be an hexadecimal string of size 16)
            4002 : The command validation has failed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unauthorized. Please check your API Key
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: '40411 : the device was not found'
      summary: Register a command
      tags:
      - Device management for LoRa
      x-codegen-request-body-name: req
  /api/v1/deviceMgt/connectors/lora/profiles:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getDeviceProfilesUsingGET
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Return the list of LoRa device profile
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get LoRa device profiles
      tags:
      - Device management for LoRa
  /api/v1/deviceMgt/connectors/{connector}/nodes:
    get:
      description: '<p>The <strong>definition</strong> depends on connector.</p><p><span
        style="text-decoration: underline;">Lora definition</span>:</p><ul><li>"devEUI":
        interface EUI</li><li>"appEUI": appEUI of the interface</li><li>"appKey":
        appKey of the interface</li><li>"activationType": supported value: "OTAA"</li><li>"profile":
        profile of the interface</li><li>"encoding": (Optional) encoding used in message''s
        payload (use /decoders APIs to define your own decoder)</li><li>"connectivityOptions":
        connectivity options used for the interface </li><ul><li>"tdoa": true/false
        </li><li>"ackUl": true/false</li></ul><li>"connectivityPlan": connectivity
        plan to use for the interface. Should be used preferably at connectivityOptions
        but at least one of two shall be defined.</li></ul><p><span style="text-decoration:
        underline;">SMS definition</span>:</p><ul><li>"msisdn": interface msisdn</li><li>"serverPhoneNumber":
        (Optional) server phone number</li><li>"encoding": (Optional) name of the
        decoder that will be used to decode received SMS</li></ul><p><span style="text-decoration:
        underline;">MQTT definition</span>:</p><ul><li>"clientId": interface client
        ID</li><li>"encoding": (Optional) encoding used in message''s payload (use
        /decoders APIs to define your own decoder)</li></ul><p><span style="text-decoration:
        underline;">X-CONNECTOR definition</span>:</p><ul><li>"nodeId": id used by
        the external connector to identify the communicating device (e.g. PUB connector/v1/nodes/{nodeId}/status)</li><li>"encoding":
        (Optional) encoding used in message''s payload (use /decoders APIs to define
        your own decoder)</li></ul><br /><p>The <strong>activity</strong> depends
        on connector.</p><p><span style="text-decoration: underline;">Lora activity</span>:</p><ul><li>"lastActivationTs":
        (Optional) last activation date of the interface</li><li>"lastDeactivationTs":
        (Optional) last deactivation date of the interface</li><li>"lastSignalLevel":
        (Optional) last signal level</li><li>"lastBatteryLevel": (Optional) last battery
        level</li><li>"lastDlFcnt": (Optional) last downlink frame counter</li><li>"lastUlFcnt":
        (Optional) last uplink frame counter</li></ul><p><span style="text-decoration:
        underline;">SMS activity</span>:</p><ul><li>"lastUplink": (Optional) last
        uplink date of the interface</li><ul><li>"timestamp": date of the activity</li><li>"serverPhoneNumber":
        server phone number used</li></ul><li>"lastDownlink": (Optional) last downlink
        date of the connector node</li><ul><li>"timestamp": date of the activity</li><li>"serverPhoneNumber":
        server phone number used</li></ul></ul><p><span style="text-decoration: underline;">MQTT
        activity</span>:</p><ul><li>"apiKeyId": api key ID used</li><li>"mqttVersion":
        mqtt version used</li><li>"mqttUsername": mqtt username used</li><li>"mqttTimeout":
        mqtt timeout</li><li>"remoteAddress"</li><li>"lastSessionStartTime"</li><li>"lastSessionEndTime"</li></ul><br><br>Restricted
        to API keys with at least one of the following roles : DEVICE_R.'
      operationId: listNodesUsingGET
      parameters:
      - description: the connector
        in: path
        name: connector
        required: true
        schema:
          type: string
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: limit
        schema:
          default: 20
          format: int32
          type: integer
      - description: number of items to skip (optional)
        in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - description: true if a total count must be returned in response
        in: header
        name: X-Total-Count
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ConnectorNode'
                type: array
          description: A page of nodes
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Forbidden
      summary: List all connector nodes
      tags:
      - Device management - Connector nodes - V1
  /api/v1/deviceMgt/connectors/{connector}/nodes/{nodeId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: deleteNodeUsingDELETE
      parameters:
      - description: the connector id
        in: path
        name: connector
        required: true
        schema:
          type: string
      - description: the node id
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Not found
      summary: Delete a connector node
      tags:
      - Device management - Connector nodes - V1
    get:
      description: '<p>The <strong>definition</strong> depends on connector.</p><p><span
        style="text-decoration: underline;">Lora definition</span>:</p><ul><li>"devEUI":
        interface EUI</li><li>"appEUI": appEUI of the interface</li><li>"appKey":
        appKey of the interface</li><li>"activationType": supported value: "OTAA"</li><li>"profile":
        profile of the interface</li><li>"encoding": (Optional) encoding used in message''s
        payload (use /decoders APIs to define your own decoder)</li><li>"connectivityOptions":
        connectivity options used for the interface </li><ul><li>"tdoa": true/false
        </li><li>"ackUl": true/false</li></ul><li>"connectivityPlan": connectivity
        plan to use for the interface. Should be used preferably at connectivityOptions
        but at least one of two shall be defined.</li></ul><p><span style="text-decoration:
        underline;">SMS definition</span>:</p><ul><li>"msisdn": interface msisdn</li><li>"serverPhoneNumber":
        (Optional) server phone number</li><li>"encoding": (Optional) name of the
        decoder that will be used to decode received SMS</li></ul><p><span style="text-decoration:
        underline;">MQTT definition</span>:</p><ul><li>"clientId": interface client
        ID</li><li>"encoding": (Optional) encoding used in message''s payload (use
        /decoders APIs to define your own decoder)</li></ul><p><span style="text-decoration:
        underline;">X-CONNECTOR definition</span>:</p><ul><li>"nodeId": id used by
        the external connector to identify the communicating device (e.g. PUB connector/v1/nodes/{nodeId}/status)</li><li>"encoding":
        (Optional) encoding used in message''s payload (use /decoders APIs to define
        your own decoder)</li></ul><br /><p>The <strong>activity</strong> depends
        on connector.</p><p><span style="text-decoration: underline;">Lora activity</span>:</p><ul><li>"lastActivationTs":
        (Optional) last activation date of the interface</li><li>"lastDeactivationTs":
        (Optional) last deactivation date of the interface</li><li>"lastSignalLevel":
        (Optional) last signal level</li><li>"lastBatteryLevel": (Optional) last battery
        level</li><li>"lastDlFcnt": (Optional) last downlink frame counter</li><li>"lastUlFcnt":
        (Optional) last uplink frame counter</li></ul><p><span style="text-decoration:
        underline;">SMS activity</span>:</p><ul><li>"lastUplink": (Optional) last
        uplink date of the interface</li><ul><li>"timestamp": date of the activity</li><li>"serverPhoneNumber":
        server phone number used</li></ul><li>"lastDownlink": (Optional) last downlink
        date of the connector node</li><ul><li>"timestamp": date of the activity</li><li>"serverPhoneNumber":
        server phone number used</li></ul></ul><p><span style="text-decoration: underline;">MQTT
        activity</span>:</p><ul><li>"apiKeyId": api key ID used</li><li>"mqttVersion":
        mqtt version used</li><li>"mqttUsername": mqtt username used</li><li>"mqttTimeout":
        mqtt timeout</li><li>"remoteAddress"</li><li>"lastSessionStartTime"</li><li>"lastSessionEndTime"</li></ul><br><br>Restricted
        to API keys with at least one of the following roles : DEVICE_R.'
      operationId: getNodeUsingGET
      parameters:
      - description: the connector
        in: path
        name: connector
        required: true
        schema:
          type: string
      - description: the node id
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorNode'
          description: Connector node details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Not found
      summary: Get details of connector node
      tags:
      - Device management - Connector nodes - V1
    patch:
      description: '<p>The <strong>definition</strong> depends on connector.</p><p><span
        style="text-decoration: underline;">Lora definition</span>:</p><ul><li>"devEUI":
        interface EUI</li><li>"appEUI": appEUI of the interface</li><li>"appKey":
        appKey of the interface</li><li>"activationType": supported value: "OTAA"</li><li>"profile":
        profile of the interface</li><li>"encoding": (Optional) encoding used in message''s
        payload (use /decoders APIs to define your own decoder)</li><li>"connectivityOptions":
        connectivity options used for the interface </li><ul><li>"tdoa": true/false
        </li><li>"ackUl": true/false</li></ul><li>"connectivityPlan": connectivity
        plan to use for the interface. Should be used preferably at connectivityOptions
        but at least one of two shall be defined.</li></ul><p><span style="text-decoration:
        underline;">SMS definition</span>:</p><ul><li>"msisdn": interface msisdn</li><li>"serverPhoneNumber":
        (Optional) server phone number</li><li>"encoding": (Optional) name of the
        decoder that will be used to decode received SMS</li></ul><p><span style="text-decoration:
        underline;">MQTT definition</span>:</p><ul><li>"clientId": interface client
        ID</li><li>"encoding": (Optional) encoding used in message''s payload (use
        /decoders APIs to define your own decoder)</li></ul><p><span style="text-decoration:
        underline;">X-CONNECTOR definition</span>:</p><ul><li>"nodeId": id used by
        the external connector to identify the communicating device (e.g. PUB connector/v1/nodes/{nodeId}/status)</li><li>"encoding":
        (Optional) encoding used in message''s payload (use /decoders APIs to define
        your own decoder)</li></ul><br><br>Usage of this API will be reported in your
        access log under ''device_inventory'' category.<br><br>Restricted to API keys
        with at least one of the following roles : DEVICE_W.'
      operationId: updateNodeUsingPATCH
      parameters:
      - description: the connector id
        in: path
        name: connector
        required: true
        schema:
          type: string
      - description: the node id
        in: path
        name: nodeId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConnectorNodeRequest'
        description: The fields to update
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorNode'
          description: A node
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Conflict
      summary: Update a connector node
      tags:
      - Device management - Connector nodes - V1
      x-codegen-request-body-name: body
  /api/v1/deviceMgt/devices:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listDevicesUsingGET_2
      parameters:
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: limit
        schema:
          default: 20
          format: int32
          type: integer
      - description: number of items to skip (optional)
        in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - description: 'sorting list by attributes. Supported columns: id, name, created,
          updated, group, interfaces.status, interfaces.enabled, interfaces.lastContact).
          Example: ["urn","-created"]. '
        explode: true
        in: query
        name: sort
        schema:
          items:
            type: string
          type: array
        style: form
      - description: filter list by device identifier (regexp). Expected string (max
          269 characters)
        in: query
        name: id
        schema:
          type: string
      - description: filter list by device groupPath.  (with optional use of wildcard
          '/*' at the end of search term)Expected string (max 255 characters)
        in: query
        name: groupPath
        schema:
          type: string
      - description: filter list by device groupId. Expected string (max 6 characters)
        in: query
        name: groupId
        schema:
          type: string
      - description: filter list by device name.  (with optional use of wildcard '*'
          at the beginning or end of search term)Expected string (max 255 characters)
        in: query
        name: name
        schema:
          type: string
      - description: filter list by device tags. Max number of tags depends of your
          offer settings. Tag value max length is 32.
        explode: true
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
        style: form
      - description: 'list devices with interfaces of the specified connector(s).
          precede the connector with "-" to exclude it, use "none" to list devices
          with no interfaces. Example: "mqtt, -lora, none".'
        explode: true
        in: query
        name: connectors
        schema:
          items:
            type: string
          type: array
        style: form
      - description: filter list by nodeId. Expected string (max 269 characters)
        in: query
        name: interfaces.nodeId
        schema:
          type: string
      - description: 'filter list by interface status. Supported values: REGISTERED,
          INITIALIZING, INITIALIZED, ONLINE, OFFLINE, ACTIVATED, REACTIVATED, DEACTIVATED,
          CONNECTIVITY_ERROR, DELETED.'
        explode: true
        in: query
        name: interfaces.status
        schema:
          items:
            type: string
          type: array
        style: form
      - description: filter list by interface enabled state.
        in: query
        name: interfaces.enabled
        schema:
          type: boolean
      - description: 'Multiple filters, Example : devices?property.temperature=25&property.humidity=58...[cannot
          be tested in swagger-ui]. Max number of properties depends of your offer
          settings. A property name must not include following characters <code>$.</code>
          and max length is 128. Invalid property names are : ''class'', ''_class''.
          Property value max length is 256.'
        in: query
        name: property.{filterName}
        schema:
          type: string
      - description: 'filter list by activity state. Supported values: ACTIVE, SILENT,
          UNKNOWN, NOT_MONITORED'
        explode: true
        in: query
        name: activityStates
        schema:
          items:
            type: string
          type: array
        style: form
      - description: device filter expression using RSQL notation.  Supported device
          properties are 'groupPath', 'groupId', 'tags', 'connector', 'properties'.
          Supported RSQL operators are '==','!=','=in=','=out=','=re=','=lt=','=le=','=gt=','=ge=','and','or'.
          Expected string (max 1000 characters)
        in: query
        name: filterQuery
        schema:
          type: string
      - description: 'list of fields to return.  Amongst: ''id'', ''name'', ''description'',
          ''tags'', ''properties'', ''group'', ''interfaces'', ''config'', ''resources'',
          ''activityState'', ''defaultDataStreamId'', ''created'', ''updated''), default:
          id, name, tags & group'
        explode: true
        in: query
        name: fields
        schema:
          items:
            type: string
          type: array
        style: form
      - description: true if a total count must be returned in response
        in: header
        name: X-Total-Count
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Device'
                type: array
          description: The list of devices
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List registered devices
      tags:
      - Device management - Inventory - V1
    post:
      description: 'Please refer to the ''Device Management > Interfaces'' API notes
        for more information about ''interfaces.[x].definition'' content<br><br>Usage
        of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: createDeviceUsingPOST
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceCreateRequest'
        description: The device to register
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: The device newly created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: the server cannot or will not process the request due to something
            that is perceived to be a client error
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Device already exists in the device manager
      summary: Create a device
      tags:
      - Device management - Inventory - V1
      x-codegen-request-body-name: body
  /api/v1/deviceMgt/devices/{deviceId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: deleteDeviceUsingDELETE
      parameters:
      - description: Target device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: The device was successfully deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: The device was not found
      summary: Delete a device
      tags:
      - Device management - Inventory - V1
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getDeviceUsingGET_2
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: The requested device
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: The device was not found
      summary: Get a device
      tags:
      - Device management - Inventory - V1
    patch:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: updateDeviceUsingPATCH
      parameters:
      - description: Targeted device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceUpdate'
        description: deviceUpdate
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: The device was successfully updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: The device was not found
      summary: Update a device
      tags:
      - Device management - Inventory - V1
      x-codegen-request-body-name: deviceUpdate
  /api/v1/deviceMgt/devices/{deviceId}/commands:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getAssetCommandsUsingGET_1
      parameters:
      - description: requested commands target device identifier (URN). A Live Objects
          URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression
          <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code> (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: Search for commands created after this date. Use ISO-8601 normalization.
        in: query
        name: from
        schema:
          type: string
      - description: Search for commands created before this date. Use ISO-8601 normalization.
        in: query
        name: to
        schema:
          type: string
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: limit
        schema:
          default: 20
          format: int32
          type: integer
      - description: number of items to skip (optional)
        in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - description: 'sorting list by attributes. DefaultValue : -created.  Supported
          columns: id, status, created. Example: ["status","-created"]. '
        explode: true
        in: query
        name: sort
        schema:
          items:
            type: string
          type: array
        style: form
      - description: true if a total count must be returned in response
        in: header
        name: X-Total-Count
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Command'
                type: array
          description: The list of commands of the device
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown device
      summary: List commands targeting a specific device
      tags:
      - Device management - Commands - V1
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: addCommandUsingPOST_1
      parameters:
      - description: target device identifier (URN). A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: Command will be validated by connector before registration. Default
          is "true"
        in: query
        name: validate
        schema:
          default: true
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandAddRequest'
        description: new command request
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Command'
          description: The command created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown device
      summary: Register a new command
      tags:
      - Device management - Commands - V1
      x-codegen-request-body-name: command
  /api/v1/deviceMgt/devices/{deviceId}/config:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getDeviceConfigurationUsingGET
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceConfigWeb'
          description: The configuration of the device
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown device
      summary: Get a description of the device configuration
      tags:
      - Device management - Configuration - V1
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: setMultipleDeviceConfigParamsUsingPOST
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceParametersSetRequest'
        description: 'a map of requested configuration parameter values (with type:
          ''INT32'', ''UINT32'', ''STRING'', ''FLOAT'', or ''BINARY'')'
        required: false
      responses:
        "200":
          content: {}
          description: nothing
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown device
      summary: Set requested values for a set of device configuration parameters
      tags:
      - Device management - Configuration - V1
      x-codegen-request-body-name: req
  /api/v1/deviceMgt/devices/{deviceId}/config/parameters:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getDeviceConfigParametersUsingGET
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/DeviceParameterWeb'
                type: object
          description: The map of configuration parameters of the device
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown device
      summary: Get a description of the device configuration parameters
      tags:
      - Device management - Configuration - V1
  /api/v1/deviceMgt/devices/{deviceId}/config/parameters/{paramKey}:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getDeviceConfigParameterUsingGET
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: config parameter identifier/key. Expected string (max 128 characters)
        in: path
        name: paramKey
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceParameterWeb'
          description: Device configuration parameter details
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown device
      summary: Get state of a specific device configuration parameter
      tags:
      - Device management - Configuration - V1
  /api/v1/deviceMgt/devices/{deviceId}/config/parameters/{paramKey}/status:
    put:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: setDeviceParamUpdateStatusUsingPUT_1
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: key identifying the targeted device parameter. Expected string
          (max 128 characters)
        in: path
        name: paramKey
        required: true
        schema:
          type: string
      - description: force the update of the parameter status
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              enum:
              - NONE
              - PENDING
              - SENT
              - CANCELED
              - OK
              - FAILED
              type: string
        description: future state of the parameter --> CANCELED
        required: false
      responses:
        "200":
          content: {}
          description: Parameter status updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Unknown device
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Conflict
      summary: Update the status of a specific device parameter
      tags:
      - Device management - Configuration - V1
      x-codegen-request-body-name: newStatus
  /api/v1/deviceMgt/devices/{deviceId}/data/streams:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_R.'
      operationId: getDeviceStreamsUsingGET
      parameters:
      - description: Targeted device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: maximum number of return items (optional, max 100 items)
        in: query
        name: limit
        schema:
          default: 10
          format: int32
          type: integer
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeviceStreamsResponseWeb'
                type: array
          description: The requested device streamIds and last data
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: The device was not found
      summary: Get a device's streamIds
      tags:
      - Device management - Inventory - V1
  /api/v1/deviceMgt/devices/{deviceId}/firmwareUpdates:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getDeviceResourceUpdatesUsingGET
      parameters:
      - description: requested target device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: the requested page number (optional)
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - description: true if a total count must be returned in response
        in: header
        name: X-Total-Count
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FirmwareUpdateWeb'
                type: array
          description: The list of device firmwares updates
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get a list of device firmware updates (use /api/v1/deviceMgt/devices/{deviceId}/resources/updates
      tags:
      - _(deprecated) Device management - Devices firmwares
  /api/v1/deviceMgt/devices/{deviceId}/firmwares:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listDeviceResourcesUsingGET
      parameters:
      - description: requested target device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/DeviceFirmwareWeb'
                type: object
          description: The list of device firmwares versions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get a map of all device firmwares (use /api/v1/deviceMgt/devices/{deviceId}/resources
        instead)
      tags:
      - _(deprecated) Device management - Devices firmwares
  /api/v1/deviceMgt/devices/{deviceId}/firmwares/{firmwareId}:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getDeviceFirmwareUsingGET
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: device firmware identifier. Expected string (max 255 characters)
        in: path
        name: firmwareId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceFirmwareWeb'
          description: The list of device firmware versions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get a specific device firmware (use /api/v1/deviceMgt/devices/{deviceId}/resources/{resourceId}
        instead)
      tags:
      - _(deprecated) Device management - Devices firmwares
    post:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: setDeviceResourceVersionUsingPOST
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: device firmware identifier. Expected string (max 255 characters)
        in: path
        name: firmwareId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceFirmwareReqWeb'
        description: The device firmware version to register
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceFirmwareWeb'
          description: The list of device firmware versions
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceFirmwareWeb'
          description: No Content, device firmware version is already updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Set device firmware versions (use /api/v1/deviceMgt/devices/{deviceId}/resources/{resourceId}
        instead)
      tags:
      - _(deprecated) Device management - Devices firmwares
      x-codegen-request-body-name: update
  /api/v1/deviceMgt/devices/{deviceId}/firmwares/{firmwareId}/lastUpdate:
    get:
      deprecated: true
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getLastResourceUpdateUsingGET
      parameters:
      - description: requested device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: device firmware identifier. Expected string (max 255 characters)
        in: path
        name: firmwareId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmwareUpdateWeb'
          description: the last firmware update
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get info about last update of this device firmware (use /api/v1/deviceMgt/devices/{deviceId}/resources/{resourceId}/updates/latest
        instead)
      tags:
      - _(deprecated) Device management - Devices firmwares
  /api/v1/deviceMgt/devices/{deviceId}/interfaces:
    get:
      description: '<p>The <strong>definition</strong> depends on connector.</p><p><span
        style="text-decoration: underline;">Lora definition</span>:</p><ul><li>"devEUI":
        interface EUI</li><li>"appEUI": appEUI of the interface</li><li>"appKey":
        appKey of the interface</li><li>"activationType": supported value: "OTAA"</li><li>"profile":
        profile of the interface</li><li>"encoding": (Optional) encoding used in message''s
        payload (use /decoders APIs to define your own decoder)</li><li>"connectivityOptions":
        connectivity options used for the interface </li><ul><li>"tdoa": true/false
        </li><li>"ackUl": true/false</li></ul><li>"connectivityPlan": connectivity
        plan to use for the interface. Should be used preferably at connectivityOptions
        but at least one of two shall be defined.</li></ul><p><span style="text-decoration:
        underline;">SMS definition</span>:</p><ul><li>"msisdn": interface msisdn</li><li>"serverPhoneNumber":
        (Optional) server phone number</li><li>"encoding": (Optional) name of the
        decoder that will be used to decode received SMS</li></ul><p><span style="text-decoration:
        underline;">MQTT definition</span>:</p><ul><li>"clientId": interface client
        ID</li><li>"encoding": (Optional) encoding used in message''s payload (use
        /decoders APIs to define your own decoder)</li></ul><p><span style="text-decoration:
        underline;">X-CONNECTOR definition</span>:</p><ul><li>"nodeId": id used by
        the external connector to identify the communicating device (e.g. PUB connector/v1/nodes/{nodeId}/status)</li><li>"encoding":
        (Optional) encoding used in message''s payload (use /decoders APIs to define
        your own decoder)</li></ul><br /><p>The <strong>activity</strong> depends
        on connector.</p><p><span style="text-decoration: underline;">Lora activity</span>:</p><ul><li>"lastActivationTs":
        (Optional) last activation date of the interface</li><li>"lastDeactivationTs":
        (Optional) last deactivation date of the interface</li><li>"lastSignalLevel":
        (Optional) last signal level</li><li>"lastBatteryLevel": (Optional) last battery
        level</li><li>"lastDlFcnt": (Optional) last downlink frame counter</li><li>"lastUlFcnt":
        (Optional) last uplink frame counter</li></ul><p><span style="text-decoration:
        underline;">SMS activity</span>:</p><ul><li>"lastUplink": (Optional) last
        uplink date of the interface</li><ul><li>"timestamp": date of the activity</li><li>"serverPhoneNumber":
        server phone number used</li></ul><li>"lastDownlink": (Optional) last downlink
        date of the connector node</li><ul><li>"timestamp": date of the activity</li><li>"serverPhoneNumber":
        server phone number used</li></ul></ul><p><span style="text-decoration: underline;">MQTT
        activity</span>:</p><ul><li>"apiKeyId": api key ID used</li><li>"mqttVersion":
        mqtt version used</li><li>"mqttUsername": mqtt username used</li><li>"mqttTimeout":
        mqtt timeout</li><li>"remoteAddress"</li><li>"lastSessionStartTime"</li><li>"lastSessionEndTime"</li></ul><br><br>Restricted
        to API keys with at least one of the following roles : DEVICE_R.'
      operationId: listInterfacesForADeviceUsingGET
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeviceInterface'
                type: array
          description: The interfaces list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: The device was not found
      summary: Get the interface list for a registered device
      tags:
      - Device management - Interfaces - V1
    post:
      description: '<p>The <strong>definition</strong> depends on connector.</p><p><span
        style="text-decoration: underline;">Lora definition</span>:</p><ul><li>"devEUI":
        interface EUI</li><li>"appEUI": appEUI of the interface</li><li>"appKey":
        appKey of the interface</li><li>"activationType": supported value: "OTAA"</li><li>"profile":
        profile of the interface</li><li>"encoding": (Optional) encoding used in message''s
        payload (use /decoders APIs to define your own decoder)</li><li>"connectivityOptions":
        connectivity options used for the interface </li><ul><li>"tdoa": true/false
        </li><li>"ackUl": true/false</li></ul><li>"connectivityPlan": connectivity
        plan to use for the interface. Should be used preferably at connectivityOptions
        but at least one of two shall be defined.</li></ul><p><span style="text-decoration:
        underline;">SMS definition</span>:</p><ul><li>"msisdn": interface msisdn</li><li>"serverPhoneNumber":
        (Optional) server phone number</li><li>"encoding": (Optional) name of the
        decoder that will be used to decode received SMS</li></ul><p><span style="text-decoration:
        underline;">MQTT definition</span>:</p><ul><li>"clientId": interface client
        ID</li><li>"encoding": (Optional) encoding used in message''s payload (use
        /decoders APIs to define your own decoder)</li></ul><p><span style="text-decoration:
        underline;">X-CONNECTOR definition</span>:</p><ul><li>"nodeId": id used by
        the external connector to identify the communicating device (e.g. PUB connector/v1/nodes/{nodeId}/status)</li><li>"encoding":
        (Optional) encoding used in message''s payload (use /decoders APIs to define
        your own decoder)</li></ul><br><br>Usage of this API will be reported in your
        access log under ''device_inventory'' category.<br><br>Restricted to API keys
        with at least one of the following roles : DEVICE_W.'
      operationId: addInterfaceToDeviceUsingPOST
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDeviceInterface'
        description: The device interface to add
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceInterface'
          description: The interface was successfully configured
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: The device was not found
      summary: Add an interface to a registered device
      tags:
      - Device management - Interfaces - V1
      x-codegen-request-body-name: newDeviceInterface
  /api/v1/deviceMgt/devices/{deviceId}/interfaces/{interfaceId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: deleteInterfaceUsingDELETE
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: Must be {connector}:{nodeId}.
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Not found
      summary: Delete an interface
      tags:
      - Device management - Interfaces - V1
    get:
      description: '<p>The <strong>definition</strong> depends on connector.</p><p><span
        style="text-decoration: underline;">Lora definition</span>:</p><ul><li>"devEUI":
        interface EUI</li><li>"appEUI": appEUI of the interface</li><li>"appKey":
        appKey of the interface</li><li>"activationType": supported value: "OTAA"</li><li>"profile":
        profile of the interface</li><li>"encoding": (Optional) encoding used in message''s
        payload (use /decoders APIs to define your own decoder)</li><li>"connectivityOptions":
        connectivity options used for the interface </li><ul><li>"tdoa": true/false
        </li><li>"ackUl": true/false</li></ul><li>"connectivityPlan": connectivity
        plan to use for the interface. Should be used preferably at connectivityOptions
        but at least one of two shall be defined.</li></ul><p><span style="text-decoration:
        underline;">SMS definition</span>:</p><ul><li>"msisdn": interface msisdn</li><li>"serverPhoneNumber":
        (Optional) server phone number</li><li>"encoding": (Optional) name of the
        decoder that will be used to decode received SMS</li></ul><p><span style="text-decoration:
        underline;">MQTT definition</span>:</p><ul><li>"clientId": interface client
        ID</li><li>"encoding": (Optional) encoding used in message''s payload (use
        /decoders APIs to define your own decoder)</li></ul><p><span style="text-decoration:
        underline;">X-CONNECTOR definition</span>:</p><ul><li>"nodeId": id used by
        the external connector to identify the communicating device (e.g. PUB connector/v1/nodes/{nodeId}/status)</li><li>"encoding":
        (Optional) encoding used in message''s payload (use /decoders APIs to define
        your own decoder)</li></ul><br /><p>The <strong>activity</strong> depends
        on connector.</p><p><span style="text-decoration: underline;">Lora activity</span>:</p><ul><li>"lastActivationTs":
        (Optional) last activation date of the interface</li><li>"lastDeactivationTs":
        (Optional) last deactivation date of the interface</li><li>"lastSignalLevel":
        (Optional) last signal level</li><li>"lastBatteryLevel": (Optional) last battery
        level</li><li>"lastDlFcnt": (Optional) last downlink frame counter</li><li>"lastUlFcnt":
        (Optional) last uplink frame counter</li></ul><p><span style="text-decoration:
        underline;">SMS activity</span>:</p><ul><li>"lastUplink": (Optional) last
        uplink date of the interface</li><ul><li>"timestamp": date of the activity</li><li>"serverPhoneNumber":
        server phone number used</li></ul><li>"lastDownlink": (Optional) last downlink
        date of the connector node</li><ul><li>"timestamp": date of the activity</li><li>"serverPhoneNumber":
        server phone number used</li></ul></ul><p><span style="text-decoration: underline;">MQTT
        activity</span>:</p><ul><li>"apiKeyId": api key ID used</li><li>"mqttVersion":
        mqtt version used</li><li>"mqttUsername": mqtt username used</li><li>"mqttTimeout":
        mqtt timeout</li><li>"remoteAddress"</li><li>"lastSessionStartTime"</li><li>"lastSessionEndTime"</li></ul><br><br>Restricted
        to API keys with at least one of the following roles : DEVICE_R.'
      operationId: getInterfaceForADeviceUsingGET
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: Must be {connector}:{nodeId}
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceInterface'
          description: An interface
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: The device was not found
      summary: Get a specific interface for a registered device
      tags:
      - Device management - Interfaces - V1
    patch:
      description: '<p>The <strong>definition</strong> depends on connector.</p><p><span
        style="text-decoration: underline;">Lora definition</span>:</p><ul><li>"devEUI":
        interface EUI</li><li>"appEUI": appEUI of the interface</li><li>"appKey":
        appKey of the interface</li><li>"activationType": supported value: "OTAA"</li><li>"profile":
        profile of the interface</li><li>"encoding": (Optional) encoding used in message''s
        payload (use /decoders APIs to define your own decoder)</li><li>"connectivityOptions":
        connectivity options used for the interface </li><ul><li>"tdoa": true/false
        </li><li>"ackUl": true/false</li></ul><li>"connectivityPlan": connectivity
        plan to use for the interface. Should be used preferably at connectivityOptions
        but at least one of two shall be defined.</li></ul><p><span style="text-decoration:
        underline;">SMS definition</span>:</p><ul><li>"msisdn": interface msisdn</li><li>"serverPhoneNumber":
        (Optional) server phone number</li><li>"encoding": (Optional) name of the
        decoder that will be used to decode received SMS</li></ul><p><span style="text-decoration:
        underline;">MQTT definition</span>:</p><ul><li>"clientId": interface client
        ID</li><li>"encoding": (Optional) encoding used in message''s payload (use
        /decoders APIs to define your own decoder)</li></ul><p><span style="text-decoration:
        underline;">X-CONNECTOR definition</span>:</p><ul><li>"nodeId": id used by
        the external connector to identify the communicating device (e.g. PUB connector/v1/nodes/{nodeId}/status)</li><li>"encoding":
        (Optional) encoding used in message''s payload (use /decoders APIs to define
        your own decoder)</li></ul><br><br>Usage of this API will be reported in your
        access log under ''device_inventory'' category.<br><br>Restricted to API keys
        with at least one of the following roles : DEVICE_W.'
      operationId: updateInterfaceUsingPATCH
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: Must be {connector}:{nodeId}
        in: path
        name: interfaceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInterfaceReqWeb'
        description: The fields to update
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceInterface'
          description: An interface
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Conflict
      summary: Update an interface
      tags:
      - Device management - Interfaces - V1
      x-codegen-request-body-name: body
  /api/v1/deviceMgt/devices/{deviceId}/resources:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listDeviceResourcesUsingGET_1
      parameters:
      - description: requested target device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/DeviceResourceWeb'
                type: object
          description: The list of device resources versions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get a map of all device resources
      tags:
      - Device management - Resources - V1
  /api/v1/deviceMgt/devices/{deviceId}/resources/updates:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getDeviceResourceUpdatesUsingGET_1
      parameters:
      - description: requested target device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: the requested page number (optional)
        in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - description: the maximum number of items per page (optional, highest value
          is 1000)
        in: query
        name: limit
        schema:
          default: 20
          format: int32
          type: integer
      - description: true if a total count must be returned in response
        in: header
        name: X-Total-Count
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ResourceUpdateWeb'
                type: array
          description: The list of device resources updates
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get a list of device resource updates
      tags:
      - Device management - Resources - V1
  /api/v1/deviceMgt/devices/{deviceId}/resources/{resourceId}:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getDeviceResourceUsingGET
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: device resource identifier. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceResourceWeb'
          description: The list of device resource versions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get a specific device resource
      tags:
      - Device management - Resources - V1
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_W.'
      operationId: setDeviceResourceVersionUsingPOST_1
      parameters:
      - description: device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: device resource identifier. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceResourceReqWeb'
        description: The device resource version to register
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceResourceWeb'
          description: The list of device resource versions
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceResourceWeb'
          description: No Content, device resource version is already updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Set device resource versions
      tags:
      - Device management - Resources - V1
      x-codegen-request-body-name: update
  /api/v1/deviceMgt/devices/{deviceId}/resources/{resourceId}/updates/latest:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getLastResourceUpdateUsingGET_1
      parameters:
      - description: requested device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
          must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
          (max 269 characters)
        in: path
        name: deviceId
        required: true
        schema:
          type: string
      - description: device resource identifier. Expected string (max 255 characters)
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceUpdateWeb'
          description: the last resource update
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: Get info about last update of this device resource
      tags:
      - Device management - Resources - V1
  /api/v1/deviceMgt/groups:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: listGroupsUsingGET_1
      parameters:
      - description: the maximum number of items per page (optional)
        in: query
        name: limit
        schema:
          default: 20
          format: int32
          type: integer
      - description: the requested page number (optional)
        in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - description: filter list by group's parent. Expected string (max 6 characters)
        in: query
        name: parentId
        schema:
          type: string
      - description: true if a total count must be returned in response
        in: header
        name: X-Total-Count
        schema:
          default: false
          type: boolean
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: The list of groups
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
      summary: List registered groups
      tags:
      - Device management - Groups - V1
    post:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: createGroupUsingPOST_1
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreateRequest'
        description: The group to register
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The group newly created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: the server cannot or will not process the request due to something
            that is perceived to be a client error
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Group already exists
      summary: Create a group
      tags:
      - Device management - Groups - V1
      x-codegen-request-body-name: request
  /api/v1/deviceMgt/groups/{id}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: deleteGroupUsingDELETE_1
      parameters:
      - description: targeted for deletion group identifier. Expected string (max
          6 characters)
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Group deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Group not found
      summary: Delete a group
      tags:
      - Device management - Groups - V1
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DEVICE_R.'
      operationId: getGroupUsingGET_1
      parameters:
      - description: the Group Identifier. Expected string (max 6 characters)
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The group
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Group not found
      summary: Get a group
      tags:
      - Device management - Groups - V1
    put:
      description: 'Usage of this API will be reported in your access log under ''device_inventory''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DEVICE_W.'
      operationId: updateGroupUsingPUT_1
      parameters:
      - description: identifier to update group. Expected string (max 6 characters)
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdateRequest'
        description: The group to register
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: The group newly created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Request forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Group not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWeb'
          description: Group already exists
      summary: Update a group
      tags:
      - Device management - Groups - V1
      x-codegen-request-body-name: body
  /api/v1/event2action/actionPolicies:
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: listUsingGET_15
      parameters:
      - description: Filter on action policy trigger type.
        in: query
        name: triggerType
        schema:
          enum:
          - dataMessage
          - stateChange
          - deviceActivity
          - matchingFired
          - deviceStatus
          - commandStatus
          - deviceCreated
          - deviceDeleted
          - loraNetwork
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ActionPolicy'
                type: array
          description: ActionPolicies Successfully retrieved
      summary: List ActionPolicies
      tags:
      - Triggers and Actions
    post:
      description: 'The field `id` must not be provided, it will be automatically
        generated by the service as an UUID.<br/>These triggers and actions endpoints
        are related to the routing & alarming notification feature.<br/>Please see
        the dedicated sections in our developer guide for more details.<br><br>Usage
        of this API will be reported in your access log under ''routing'' category.<br><br>Restricted
        to API keys with at least one of the following roles : DATA_PROCESSING_W.'
      operationId: createUsingPOST_2
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionPolicy'
        description: ActionPolicy to add
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionPolicy'
          description: ActionPolicy created
      summary: Create an ActionPolicy
      tags:
      - Triggers and Actions
      x-codegen-request-body-name: actionPolicy
  /api/v1/event2action/actionPolicies/{policyId}:
    delete:
      description: 'Usage of this API will be reported in your access log under ''routing''
        category.<br><br>Restricted to API keys with at least one of the following
        roles : DATA_PROCESSING_W.'
      operationId: deleteUsingDELETE_13
      parameters:
      - description: id of the ActionPolicy to delete
        in: path
        name: policyId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: ActionPolicy Successfully deleted
        "404":
          content: {}
          description: Unknown ActionPolicy
      summary: Delete an ActionPolicy
      tags:
      - Triggers and Actions
    get:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_R.'
      operationId: retrieveUsingGET_2
      parameters:
      - description: id of the ActionPolicy to retrieve
        in: path
        name: policyId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionPolicy'
          description: ActionPolicy Successfully retrieved
        "404":
          content: {}
          description: Unknown ActionPolicy
      summary: Retrieve an ActionPolicy
      tags:
      - Triggers and Actions
    put:
      description: 'The `id` field is mandatory in the path but is optional in the
        payload. In a case where an `id` is specified in the payload it must match
        the `id` specified in the path. Otherwise an HTTP 400 will be issued.<br><br>Usage
        of this API will be reported in your access log under ''routing'' category.<br><br>Restricted
        to API keys with at least one of the following roles : DATA_PROCESSING_W.'
      operationId: upsertUsingPUT_1
      parameters:
      - description: id of the ActionPolicy to save
        in: path
        name: policyId
        required: true
        schema:
          type: string
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionPolicy'
        description: ActionPolicy to save
        required: false
      responses:
        "200":
          content: {}
          description: ActionPolicy created or updated
      summary: Create or update an ActionPolicy
      tags:
      - Triggers and Actions
      x-codegen-request-body-name: actionPolicy
  /api/v1/event2action/test/http-push:
    post:
      description: 'Restricted to API keys with at least one of the following roles
        : DATA_PROCESSING_W.'
      operationId: testHttpPushUsingPOST_1
      parameters:
      - description: a valid API key
        in: header
        name: X-API-KEY
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpPushWebhookTest'
        description: Http push request to be tested
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpPushTestResult'
          description: Http push test successful
      summary: Post an http request for testing a webhook
      tags:
      - Triggers and Actions - Test
      x-codegen-request-body-name: req
components:
  schemas:
    SMSConnectorMsisdnPageWeb:
      example:
        size: 1
        data:
        - msisdn: "3387654321"
        - msisdn: "3387654321"
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/Msisdns'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    ConnectorStatusResponse:
      example:
        statusPerMsisdn:
          "3312345678": UNAUTHORIZED
          "3387654321": OK
      properties:
        statusPerMsisdn:
          additionalProperties:
            type: string
          description: list all msisdn with status treated
          example:
            "3312345678": UNAUTHORIZED
            "3387654321": OK
          type: object
      type: object
    InterfaceCapabilities:
      description: Full details about an interface capabilities
      example:
        configuration:
          available: true
          version: 1
        resource:
          available: true
          version: 1
        command:
          available: true
          version: 1
      properties:
        command:
          $ref: '#/components/schemas/InterfaceCapability'
        configuration:
          $ref: '#/components/schemas/InterfaceCapability'
        resource:
          $ref: '#/components/schemas/InterfaceCapability'
      type: object
    ActionTriggersV0:
      example:
        eventRuleIds:
        - eventRuleIds
        - eventRuleIds
        messageSelector:
          filter:
            connectors:
            - connectors
            - connectors
            deviceIds:
            - deviceIds
            - deviceIds
            groupPaths:
            - includeSubPath: false
              path: /europe/france
            - includeSubPath: false
              path: /europe/france
          origin: data_new
      properties:
        eventRuleIds:
          description: A list of state processing, firing or activity processing rule
            ids that will trigger an action - incompatible with messageSelector
          items:
            type: string
          type: array
        messageSelector:
          $ref: '#/components/schemas/MessageSelector'
      type: object
    CampaignOperationStateError:
      example:
        code: ASSET_ORIGINATED_ERROR
        origin: DEVICE
        details: Invalid firmware CRC
        deviceCode: DEV123.Z_FIRMW_CRC
      properties:
        code:
          description: Optional error code associated to the current underlying operation
          example: ASSET_ORIGINATED_ERROR
          type: string
        details:
          description: Optional device originated error details associated to the
            current underlying operation
          example: Invalid firmware CRC
          type: string
        deviceCode:
          description: Optional device originated error code associated to the current
            underlying operation
          example: DEV123.Z_FIRMW_CRC
          type: string
        origin:
          description: Optional error origin associated to the current underlying
            operation
          example: DEVICE
          type: string
      type: object
    StoredDataMessage:
      properties:
        created:
          type: string
        extra:
          additionalProperties:
            type: string
          type: object
        id:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        metadata:
          properties: {}
          type: object
        model:
          type: string
        streamId:
          type: string
        tags:
          items:
            type: string
          type: array
        timestamp:
          type: string
        value:
          properties: {}
          type: object
      type: object
    HttpPushWebhookTest:
      example:
        headers:
          key:
          - headers
          - headers
        requestBody: requestBody
        requestTimeout: 0
        webhookUrl: webhookUrl
      properties:
        headers:
          additionalProperties:
            items:
              type: string
            type: array
          description: A map of header to be passed in the http POST headers
          type: object
        requestBody:
          description: The body of the http POST test request
          type: string
        requestTimeout:
          description: The maximum delay allowed to complete the http POST test request
          format: int64
          type: integer
        webhookUrl:
          description: The url of the target service webhook (only the ports 80, 443,
            8080, 8443 and 9243 are allowed).
          type: string
      type: object
    CommandResponse:
      example:
        value:
          success: true
      properties:
        value:
          description: command response value (protocol/connector-dependant)
          example:
            success: true
          properties: {}
          type: object
      required:
      - value
      type: object
    CsvColumn:
      example:
        name: column1
        jsonType: NUMERIC
      properties:
        jsonType:
          example: NUMERIC
          type: string
        name:
          example: column1
          type: string
      required:
      - jsonType
      - name
      type: object
    DataWeb:
      description: Data in a dataStream
      example:
        metadata:
          source: urn:tenantName:FFFFFFFFFFFFFFFF!mystream
          encoding: encoding
        location:
          provider: GPS
          alt: 5.00001
          accuracy: 10.0
          lon: -30.00001
          lat: 45.000009
        model: MyModelSettingName
        value:
          hexaFlag001: 2F00
          temp: 22.0
          pressure: 36575.0
        tags:
        - Motor
        - Engine
        timestamp: 2016-08-24T10:32:52.598Z
      properties:
        location:
          $ref: '#/components/schemas/Location'
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          description: Model of the injected data. Data with the same model must have
            coherent types in each value fields. This field is required to perform
            an advanced search on the data. Can not contains space or dot characters.
          example: MyModelSettingName
          type: string
        tags:
          description: Easy way to 'tag' the data in order to ease up advanced search
            through all streams and models
          example:
          - Motor
          - Engine
          items:
            type: string
          type: array
        timestamp:
          description: ISO 8601 date time
          example: 2016-08-24T10:32:52.598Z
          type: string
        value:
          description: Must be a JsonObject (primitive objects like string or int
            are not allowed). It can not contain field names starting with '$' character
            or containing dot '.' character and its size should not exceed 1 MiB.
            To use decoding capability, 'value.payload' field must be use to set encoded
            content as String (in case of binary content, HexBinary String representation
            of this content)
          example:
            hexaFlag001: 2F00
            temp: 22.0
            pressure: 36575.0
          properties: {}
          type: object
      required:
      - value
      type: object
    ResourceVersionUpdateReqWeb:
      description: body of resource version update request
      example:
        description: 1.1.1
        compatibleVersions:
        - 1.0.0
        - 1.0.1
        - "0.9"
      properties:
        compatibleVersions:
          description: 'set of the versions from which a resource update to the version
            can be done. Max number of versions is 100. A version max length is 255. '
          example:
          - 1.0.0
          - 1.0.1
          - "0.9"
          items:
            type: string
          type: array
        description:
          description: the version's description. Expected string (max 255 characters)
          example: 1.1.1
          type: string
      type: object
    LoraGatewayLocation:
      example:
        provider: GPS
        lastUpdateTs: 2016-06-14T11:09:22.125Z
        alt: 50.0
        lon: 7.44464
        lat: 10.11212
      properties:
        alt:
          description: Last geolocation altitude (meter)
          example: 50.0
          format: double
          type: number
        lastUpdateTs:
          description: Date/time of the last location
          example: 2016-06-14T11:09:22.125Z
          type: string
        lat:
          description: Last geolocation latitude (GPS coordinate system)
          example: 10.11212
          format: double
          type: number
        lon:
          description: Last geolocation longitude (GPS coordinate system)
          example: 7.44464
          format: double
          type: number
        provider:
          description: Computing geolocation method
          example: GPS
          type: string
      type: object
    AssetResourceWeb:
      description: Resource data associated to an Asset
      example:
        resourceId: MyResource001
        assetIdNamespace: device
        assetId: "001"
        currentVersionChangeTs: 1463993913147
        tenantId: 57xxxxxxxxxxxxxxxxxxxxxx
        targetVersionTs: 1463994120822
        currentVersionTs: 1463993913147
        currentVersion: v1
        connectorMetadata:
          CmaroId: FF:1F:4B:F0:F0:FF:BF:F3
        targetVersion: v2
      properties:
        assetId:
          description: the asset id
          example: "001"
          type: string
        assetIdNamespace:
          description: the asset namespace
          example: device
          type: string
        connectorMetadata:
          additionalProperties:
            type: string
          description: the connector metadata
          example:
            CmaroId: FF:1F:4B:F0:F0:FF:BF:F3
          type: object
        currentVersion:
          description: the current resource version
          example: v1
          type: string
        currentVersionChangeTs:
          description: the current resource version timestamp
          example: 1463993913147
          format: int64
          type: integer
        currentVersionTs:
          description: the current resource version timestamp
          example: 1463993913147
          format: int64
          type: integer
        resourceId:
          description: the resource's identifier
          example: MyResource001
          type: string
        targetVersion:
          description: the target resource version timestamp
          example: v2
          type: string
        targetVersionTs:
          description: the target resource version timestamp
          example: 1463994120822
          format: int64
          type: integer
        tenantId:
          description: identifier of tenant account
          example: 57xxxxxxxxxxxxxxxxxxxxxx
          type: string
      type: object
    Pageable«User»:
      example:
        size: 1
        data:
        - externalIdentity:
            provider: provider
            id: id
            login: login
          lastAuthentication: 1475224200000
          roles:
          - USER_R
          - APIKEY_R
          portalData: '{}'
          tenantId: 51FFFFFFFFFFFFFFFFFFFFFF
          id: 57FFFFFFFFFFFFFFFFFFFFFF
          mainUser: false
          state: enabled
          login: MyLoginName
          email: me.name@mycompagny.mycom
        - externalIdentity:
            provider: provider
            id: id
            login: login
          lastAuthentication: 1475224200000
          roles:
          - USER_R
          - APIKEY_R
          portalData: '{}'
          tenantId: 51FFFFFFFFFFFFFFFFFFFFFF
          id: 57FFFFFFFFFFFFFFFFFFFFFF
          mainUser: false
          state: enabled
          login: MyLoginName
          email: me.name@mycompagny.mycom
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/User'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    FifoCreateReqWeb:
      description: ' Fifo Topic data in Create Request'
      example:
        name: MyFIFOName
        messageTtl: 604800
        maxLengthBytes: 524288
      properties:
        maxLengthBytes:
          description: Maximum number of bytes that can be stored (0 means no storage,
            else min value is 524288 and max value depends of your account settings)
          example: 524288
          format: int64
          type: integer
        messageTtl:
          description: Time in seconds before messages are dropped if they are not
            consumed
          example: 604800
          format: int32
          type: integer
        name:
          description: Topic name of the FIFO. Fifo name must respect the following
            regular expression <code>[A-Za-z\d-_~]+</code> (max 255 characters)
          example: MyFIFOName
          type: string
      required:
      - maxLengthBytes
      - name
      type: object
    UserActivationReqWeb:
      description: body of the user activation request
      example:
        tenantId: 57FFFFFFFFFFFFFFFFFFFFFF
        userId: 57FFFFFFFFFFFFFFFFFFFFFF
      properties:
        tenantId:
          description: identifier of tenant account this user belongs to. Expected
            identifier (max 24 characters)
          example: 57FFFFFFFFFFFFFFFFFFFFFF
          type: string
        userId:
          description: user identifier in tenant account. Expected identifier (max
            24 characters)
          example: 57FFFFFFFFFFFFFFFFFFFFFF
          type: string
      required:
      - tenantId
      - userId
      type: object
    ActivityRule:
      description: defines the targets and the triggering behavior to watch for silent
        devices
      example:
        name: name
        id: id
        silentPolicy:
          duration: PT6H
          repeatInterval: P1DT12H
        targets:
          deviceIds:
          - deviceIds
          - deviceIds
          groupPaths:
          - includeSubPath: false
            path: /europe/france
          - includeSubPath: false
            path: /europe/france
        enabled: false
        tags:
        - tags
        - tags
      properties:
        enabled:
          description: activate or not the ActivityRule. Default is false.
          example: false
          type: boolean
        id:
          description: id of the ActivityRule. Should be null when used for POST.
          type: string
        name:
          description: user-defined name for the rule, must be unique and not empty.
          type: string
        silentPolicy:
          $ref: '#/components/schemas/SilentPolicy'
        tags:
          description: list of tags that will be set on alarms triggered by this rule.
            e.g. 'level:HIGH'
          items:
            type: string
          type: array
        targets:
          $ref: '#/components/schemas/Targets'
      required:
      - name
      - silentPolicy
      - targets
      type: object
    CaCertificateCreateResWeb:
      example:
        id: id
      properties:
        id:
          type: string
      type: object
    DeviceParameterWeb:
      example:
        requested:
          type: INT32
          value: '{}'
          timestamp: timestamp
        reported:
          type: INT32
          value: '{}'
          timestamp: timestamp
        syncStatus: OK
      properties:
        reported:
          $ref: '#/components/schemas/DeviceParameterValueWeb'
        requested:
          $ref: '#/components/schemas/DeviceParameterValueWeb'
        syncStatus:
          description: 'configuration parameter synchronization status: NONE, PENDING,
            OK or FAILED'
          enum:
          - NONE
          - PENDING
          - SENT
          - CANCELED
          - OK
          - FAILED
          example: OK
          type: string
      type: object
    GroupPath:
      description: defines targeted group path
      example:
        includeSubPath: false
        path: /europe/france
      properties:
        includeSubPath:
          description: 'if true, all sub-paths will be targeted by this ActivityRule '
          example: false
          type: boolean
        path:
          description: path of the group
          example: /europe/france
          type: string
      required:
      - includeSubPath
      - path
      type: object
    LoraConnectivityOptionsWeb:
      example:
        tdoa: true
        ackUl: true
      properties:
        ackUl:
          description: Options for Ack uplink
          example: true
          type: boolean
        tdoa:
          description: Options for TDOA geolocation
          example: true
          type: boolean
      type: object
    BusinessUnit:
      example:
        name: name
      properties:
        name:
          type: string
      type: object
    ActionPolicyV0:
      description: Object describing the relationship between triggers (message or
        events)  and actions (email, sms, fifo push or http push)
      example:
        name: name
        id: id
        triggers:
          eventRuleIds:
          - eventRuleIds
          - eventRuleIds
          messageSelector:
            filter:
              connectors:
              - connectors
              - connectors
              deviceIds:
              - deviceIds
              - deviceIds
              groupPaths:
              - includeSubPath: false
                path: /europe/france
              - includeSubPath: false
                path: /europe/france
            origin: data_new
        actions:
          emails:
          - cc:
            - cc
            - cc
            contentTemplate: contentTemplate
            cci:
            - cci
            - cci
            subjectTemplate: subjectTemplate
            to:
            - to
            - to
          - cc:
            - cc
            - cc
            contentTemplate: contentTemplate
            cci:
            - cci
            - cci
            subjectTemplate: subjectTemplate
            to:
            - to
            - to
          azureEventHubs:
          - sharedAccessKey: sharedAccessKey
            sharedAccessKeyName: sharedAccessKeyName
            retryOnFailure: false
            jsonPath: jsonPath
            eventHubsNamespace: eventHubsNamespace
            eventHubName: eventHubName
            content: content
          - sharedAccessKey: sharedAccessKey
            sharedAccessKeyName: sharedAccessKeyName
            retryOnFailure: false
            jsonPath: jsonPath
            eventHubsNamespace: eventHubsNamespace
            eventHubName: eventHubName
            content: content
          fifoPublish:
          - fifoName: fifoName
          - fifoName: fifoName
          sms:
          - destinationPhoneNumbers:
            - destinationPhoneNumbers
            - destinationPhoneNumbers
            contentTemplate: contentTemplate
          - destinationPhoneNumbers:
            - destinationPhoneNumbers
            - destinationPhoneNumbers
            contentTemplate: contentTemplate
          httpPush:
          - headers:
              key:
              - headers
              - headers
            retryOnFailure: false
            jsonPath: jsonPath
            content: content
            webhookUrl: webhookUrl
          - headers:
              key:
              - headers
              - headers
            retryOnFailure: false
            jsonPath: jsonPath
            content: content
            webhookUrl: webhookUrl
        enabled: false
      properties:
        actions:
          $ref: '#/components/schemas/Actions'
        enabled:
          description: Enable or disable this action policy
          example: false
          type: boolean
        id:
          type: string
        name:
          description: The user-defined name of the action policy
          type: string
        triggers:
          $ref: '#/components/schemas/ActionTriggersV0'
      type: object
    Pageable«LoraCommand»:
      example:
        size: 1
        data:
        - data: 51285624ab5d
          commandStatus: SENT
          port: 1
          id: 5743000f0cf25e30a712e83c
          confirmed: true
          updateTs: 2016-06-09T08:04:37.971Z
          creationTs: 2016-06-03T15:55:36.944Z
        - data: 51285624ab5d
          commandStatus: SENT
          port: 1
          id: 5743000f0cf25e30a712e83c
          confirmed: true
          updateTs: 2016-06-09T08:04:37.971Z
          creationTs: 2016-06-03T15:55:36.944Z
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/LoraCommand'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    Pageable«CommandV0»:
      example:
        size: 1
        data:
        - reqData:
            key: reqData
          resPayload:
          - resPayload
          - resPayload
          assetIdNamespace: assetIdNamespace
          assetId: assetId
          notifyTo: notifyTo
          id: id
          reqPayload:
          - reqPayload
          - reqPayload
          updateTs: 6
          reqEvent: reqEvent
          resData:
            key: resData
          creationTs: 0
          status: PENDING
        - reqData:
            key: reqData
          resPayload:
          - resPayload
          - resPayload
          assetIdNamespace: assetIdNamespace
          assetId: assetId
          notifyTo: notifyTo
          id: id
          reqPayload:
          - reqPayload
          - reqPayload
          updateTs: 6
          reqEvent: reqEvent
          resData:
            key: resData
          creationTs: 0
          status: PENDING
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/CommandV0'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    CampaignOperationState:
      example:
        currentRetry: 2
        operationStatus: processed
        ended: 2017-07-19T09:23:11Z
        action: configure
        operationId: command-1234
        started: 2017-07-19T09:23:11Z
        error:
          code: ASSET_ORIGINATED_ERROR
          origin: DEVICE
          details: Invalid firmware CRC
          deviceCode: DEV123.Z_FIRMW_CRC
        updated: 2017-07-19T09:23:11Z
      properties:
        action:
          description: Type of operation
          enum:
          - CampaignAction(action=configure)
          - CampaignAction(action=command)
          - CampaignAction(action=resource)
          example: configure
          type: string
        currentRetry:
          description: Optional current number of retries made for the operation
          example: 2
          format: int32
          type: integer
        ended:
          description: Date when the operation was finished
          example: 2017-07-19T09:23:11Z
          type: string
        error:
          $ref: '#/components/schemas/CampaignOperationStateError'
        operationId:
          description: Optional identifier associated to the current underlying operation
            (e.g. commandId,...)
          example: command-1234
          type: string
        operationStatus:
          description: Current status returned by the underlying operation
          example: processed
          type: string
        started:
          description: Date when the operation was started
          example: 2017-07-19T09:23:11Z
          type: string
        updated:
          description: Date when the operation status was updated for the last time
          example: 2017-07-19T09:23:11Z
          type: string
      required:
      - action
      type: object
    DeviceCreateRequest:
      description: new device to register in inventory
      example:
        interfaces:
        - connector: lora
          enabled: true
          definition:
            activationType: OTAA
            connectivityOptions:
              ackUl: true
              tdoa: false
            connectivityPlan: orange-cs/deactivate_device
            profile: defaultProfile
            devEUI: 0123456789ABCDEF
            appEUI: 1234567890ABCDEF
            appKey: 123456789012345678901234567890ab
        - connector: sms
          enabled: true
          definition:
            msisdn: "3387654321"
            serverPhoneNumber: "3387654321"
            encoding: string
        name: 'sensor #12'
        defaultDataStreamId: urn:lo:nsid:sensor:2327398!measures
        description: 'MyDeviceMaker sensor #12'
        id: urn:lo:nsid:sensor:2327398
        properties:
          manufacturer: MyDeviceMaker, Inc.
          hwVersion: 2.0.1.7-us_64
        tags:
        - demo
        - sensor
        group:
          path: /france/paris
          id: E89AE
      properties:
        id:
          description: device unique identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
            must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
            (max 269 characters)
          example: urn:lo:nsid:sensor:2327398
          type: string
        name:
          description: human-readable device name. Expected string (max 255 characters)
          example: 'sensor #12'
          type: string
        description:
          description: human-readable device description. Expected string (max 500
            characters)
          example: 'MyDeviceMaker sensor #12'
          type: string
        defaultDataStreamId:
          description: default data streamId. Expected not empty string. Following
            character are forbidden <code>"'\"\\;{}() "</code> (max 255 characters)
          example: urn:lo:nsid:sensor:2327398!measures
          type: string
        tags:
          description: set of tags associated with the new device. Max number of tags
            depends of your offer settings. Tag value max length is 32.
          example:
          - demo
          - sensor
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
          description: 'map of key/value string pairs detailing properties of the
            device. Max number of properties depends of your offer settings. A property
            name must not include following characters <code>$.</code> and max length
            is 128. Invalid property names are : ''class'', ''_class''. Property value
            max length is 256.'
          example:
            manufacturer: MyDeviceMaker, Inc.
            hwVersion: 2.0.1.7-us_64
          type: object
        interfaces:
          description: list of device network interfaces
          example:
          - connector: lora
            enabled: true
            definition:
              activationType: OTAA
              connectivityOptions:
                ackUl: true
                tdoa: false
              connectivityPlan: orange-cs/deactivate_device
              profile: defaultProfile
              devEUI: 0123456789ABCDEF
              appEUI: 1234567890ABCDEF
              appKey: 123456789012345678901234567890ab
          - connector: sms
            enabled: true
            definition:
              msisdn: "3387654321"
              serverPhoneNumber: "3387654321"
              encoding: string
          items:
            $ref: '#/components/schemas/NewDeviceInterface'
          type: array
        group:
          $ref: '#/components/schemas/DeviceGroup'
      required:
      - id
      type: object
    DeviceStatusTrigger:
      example:
        filter:
          connectors:
          - connectors
          - connectors
          groupPaths:
          - includeSubPath: false
            path: /europe/france
          - includeSubPath: false
            path: /europe/france
        version: 2
      properties:
        filter:
          $ref: '#/components/schemas/DeviceStatusFilter'
        version:
          description: requested object version
          enum:
          - 1
          format: int32
          type: integer
      required:
      - version
      type: object
    TenantMonthMetrics:
      example:
        months:
        - month: 2020-01
          connectors:
            lora:
              traffic:
                in:
                  msg: 54395.0
                  bytes: 572827.0
                out:
                  msg: 100.0
                  bytes: 2858.0
              inventory:
                numberOfCommunicatingNodes: 36.0
                numberOfActivatedNodes: 65.0
                numberOfActivatedTdoaNodes: 30.0
                numberOfActivatedAckUlNodes: 5.0
            mqtt:
              traffic:
                in:
                  msg: 45000.0
                  virtualMsg: 45000.0
                  bytes: 1120000.0
                out:
                  msg: 35220.0
                  virtualMsg: 35220.0
                  bytes: 1.8373042E7
              inventory:
                numberOfCommunicatingNodes: 2.0
            mqttApplication:
              traffic:
                in:
                  msg: 4500.0
                  virtualMsg: 4500.0
                  bytes: 112000.0
            external:
              traffic:
                in:
                  msg: 2.0
                  virtualMsg: 2.0
                  bytes: 20.0
                out:
                  msg: 1.0
                  virtualMsg: 1.0
                  bytes: 100.0
              inventory:
                numberOfCommunicatingNodes: 1.0
            http:
              traffic:
                in:
                  msg: 359.0
                  virtualMsg: 359.0
                  bytes: 167457.0
            sms_20259:
              traffic:
                in:
                  msg: 10.0
                  virtualMsg: 10.0
                  bytes: 1100.0
                out:
                  msg: 1.0
                  virtualMsg: 1.0
                  bytes: 10.0
              inventory:
                numberOfCommunicatingNodes: 1.0
          services:
            deviceManagement:
              numbeOfSuccessfulDownloads: 123.0
            storage:
              storedDataMessagesInMB: 456.0
        - month: 2020-02
          connectors:
            lora:
              traffic:
                in:
                  msg: 42716.0
                  bytes: 493582.0
                out:
                  msg: 77.0
                  bytes: 1474.0
              inventory:
                numberOfCommunicatingNodes: 39.0
                numberOfActivatedNodes: 71.0
                numberOfActivatedTdoaNodes: 30.0
                numberOfActivatedAckUlNodes: 5.0
            mqtt:
              traffic:
                out:
                  msg: 43229.0
                  virtualMsg: 43229.0
                  bytes: 2.319852E7
            mqttApplication:
              traffic:
                in:
                  msg: 4322.0
                  virtualMsg: 4322.0
                  bytes: 2319852.0
            http:
              traffic:
                in:
                  msg: 1085.0
                  virtualMsg: 1085.0
                  bytes: 545462.0
          services:
            deviceManagement:
              numbeOfSuccessfulDownloads: 100.0
            storage:
              storedDataMessagesInMB: 567.0
        tenant:
          offerAndOptions:
            offer:
              displayName: displayName
              name: name
            options: Discover
          name: Tenant-test
          id: 57ed0a98266e260a12345
          properties:
            diseId: "12345678"
      properties:
        tenant:
          $ref: '#/components/schemas/TenantExternalView'
        months:
          description: Statistics per month
          example:
          - month: 2020-01
            connectors:
              lora:
                traffic:
                  in:
                    msg: 54395.0
                    bytes: 572827.0
                  out:
                    msg: 100.0
                    bytes: 2858.0
                inventory:
                  numberOfCommunicatingNodes: 36.0
                  numberOfActivatedNodes: 65.0
                  numberOfActivatedTdoaNodes: 30.0
                  numberOfActivatedAckUlNodes: 5.0
              mqtt:
                traffic:
                  in:
                    msg: 45000.0
                    virtualMsg: 45000.0
                    bytes: 1120000.0
                  out:
                    msg: 35220.0
                    virtualMsg: 35220.0
                    bytes: 1.8373042E7
                inventory:
                  numberOfCommunicatingNodes: 2.0
              mqttApplication:
                traffic:
                  in:
                    msg: 4500.0
                    virtualMsg: 4500.0
                    bytes: 112000.0
              external:
                traffic:
                  in:
                    msg: 2.0
                    virtualMsg: 2.0
                    bytes: 20.0
                  out:
                    msg: 1.0
                    virtualMsg: 1.0
                    bytes: 100.0
                inventory:
                  numberOfCommunicatingNodes: 1.0
              http:
                traffic:
                  in:
                    msg: 359.0
                    virtualMsg: 359.0
                    bytes: 167457.0
              sms_20259:
                traffic:
                  in:
                    msg: 10.0
                    virtualMsg: 10.0
                    bytes: 1100.0
                  out:
                    msg: 1.0
                    virtualMsg: 1.0
                    bytes: 10.0
                inventory:
                  numberOfCommunicatingNodes: 1.0
            services:
              deviceManagement:
                numbeOfSuccessfulDownloads: 123.0
              storage:
                storedDataMessagesInMB: 456.0
          - month: 2020-02
            connectors:
              lora:
                traffic:
                  in:
                    msg: 42716.0
                    bytes: 493582.0
                  out:
                    msg: 77.0
                    bytes: 1474.0
                inventory:
                  numberOfCommunicatingNodes: 39.0
                  numberOfActivatedNodes: 71.0
                  numberOfActivatedTdoaNodes: 30.0
                  numberOfActivatedAckUlNodes: 5.0
              mqtt:
                traffic:
                  out:
                    msg: 43229.0
                    virtualMsg: 43229.0
                    bytes: 2.319852E7
              mqttApplication:
                traffic:
                  in:
                    msg: 4322.0
                    virtualMsg: 4322.0
                    bytes: 2319852.0
              http:
                traffic:
                  in:
                    msg: 1085.0
                    virtualMsg: 1085.0
                    bytes: 545462.0
            services:
              deviceManagement:
                numbeOfSuccessfulDownloads: 100.0
              storage:
                storedDataMessagesInMB: 567.0
          items:
            $ref: '#/components/schemas/MonthMetrics'
          type: array
      type: object
    Group:
      example:
        path: /group1/group2
        created: 2017-12-27T12:59:59.877Z
        pathNode: group2
        description: Moisture sensor
        id: IbN89a
        updated: 2017-12-27T14:13:09.231Z
        parentId: PjFg6J
      properties:
        created:
          description: Date/time when group was first registered
          example: 2017-12-27T12:59:59.877Z
          type: string
        description:
          description: Group description
          example: Moisture sensor
          type: string
        id:
          description: Group identifier
          example: IbN89a
          type: string
        parentId:
          description: Parent group identifier
          example: PjFg6J
          type: string
        path:
          description: Path
          example: /group1/group2
          type: string
        pathNode:
          description: Path node
          example: group2
          type: string
        updated:
          description: Date/time when group status has been lastly updated
          example: 2017-12-27T14:13:09.231Z
          type: string
      required:
      - created
      - description
      - id
      - parentId
      - path
      - pathNode
      - updated
      type: object
    ResourceAddReqWeb:
      description: body of add resource request
      example:
        metadata:
          CamaroId: FF:1F:4B:F0:F0:FF:BF:F3
        resourceId: MyResource001
        connector: connector
        description: It the last provided resource
        label: My resource Label
      properties:
        connector:
          description: the resource's connector. A connector must respect the following
            regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)
          type: string
        description:
          description: the resource's description. Expected string (max 255 characters)
          example: It the last provided resource
          type: string
        label:
          description: the resource's label. Expected string (max 255 characters)
          example: My resource Label
          type: string
        metadata:
          additionalProperties:
            type: string
          description: the resource metadata. Max number of metadata is 100. Metadata
            name max length is 255. Metadata value max length is 255.
          example:
            CamaroId: FF:1F:4B:F0:F0:FF:BF:F3
          type: object
        resourceId:
          description: the resource's id. Expected string (max 255 characters)
          example: MyResource001
          type: string
      required:
      - connector
      - label
      - resourceId
      type: object
    Traffic:
      properties:
        in:
          additionalProperties:
            format: int64
            type: integer
          type: object
        out:
          additionalProperties:
            format: int64
            type: integer
          type: object
      type: object
    DeviceFirmwareVersionValueWeb:
      description: a firmware version
      example:
        version: v2
        timestamp: 2017-07-19T10:30:58Z
      properties:
        timestamp:
          description: firmware version associated date/time
          example: 2017-07-19T10:30:58Z
          type: string
        version:
          description: firmware version. Expected string (max 255 characters)
          example: v2
          type: string
      type: object
    Metadata:
      example:
        source: urn:tenantName:FFFFFFFFFFFFFFFF!mystream
        encoding: encoding
      properties:
        encoding:
          description: encoding format name, that should match the 'encoding' field
            of the decoder that will process this datamessage.
          type: string
        source:
          description: source of the data
          example: urn:tenantName:FFFFFFFFFFFFFFFF!mystream
          type: string
      type: object
    PartnerTenant:
      example:
        tenantId: 57FFFFFFFFFFFFFFFFFFFFFF
      properties:
        tenantId:
          description: identifier of tenant partner
          example: 57FFFFFFFFFFFFFFFFFFFFFF
          type: string
      type: object
    SMSConnectorBusinessSettingsPageWeb:
      example:
        size: 1
        data:
        - serverPhoneNumber: "20259"
          decoders: lo-payload
          enabled: false
          limits:
            maxSmsOutPerDay: 100
            maxMsisdn: 10
            maxTags: 10
            maxSmsInPerDay: 5000
        - serverPhoneNumber: "20259"
          decoders: lo-payload
          enabled: false
          limits:
            maxSmsOutPerDay: 100
            maxMsisdn: 10
            maxTags: 10
            maxSmsInPerDay: 5000
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/SMSConnectorSettings'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    SilentPolicy:
      description: defines the triggering behavior for silent devices
      example:
        duration: PT6H
        repeatInterval: P1DT12H
      properties:
        duration:
          description: the duration (ISO 8601) after which the device will be considered
            as silent if it had no contact with the platform. If less than 10 minutes,
            this duration will be handled as a 10 minutes delay. A silent event/alarm
            will be sent after expiration.
          example: PT6H
          type: string
        repeatInterval:
          description: if the device previously triggered a silent alarm and still
            had no contact with the platform; duration (ISO 8601) after which a new
            silent event/alarm will be sent. If less than 10 minutes, this duration
            will be handled as a 10 minutes delay. If null, no further alarm will
            be sent until the new active/silent cycle.
          example: P1DT12H
          type: string
      required:
      - duration
      type: object
    CampaignPerTargetList:
      example:
        size: 1
        data:
        - operations:
          - currentRetry: 2
            operationStatus: processed
            ended: 2017-07-19T09:23:11Z
            action: configure
            operationId: command-1234
            started: 2017-07-19T09:23:11Z
            error:
              code: ASSET_ORIGINATED_ERROR
              origin: DEVICE
              details: Invalid firmware CRC
              deviceCode: DEV123.Z_FIRMW_CRC
            updated: 2017-07-19T09:23:11Z
          - currentRetry: 2
            operationStatus: processed
            ended: 2017-07-19T09:23:11Z
            action: configure
            operationId: command-1234
            started: 2017-07-19T09:23:11Z
            error:
              code: ASSET_ORIGINATED_ERROR
              origin: DEVICE
              details: Invalid firmware CRC
              deviceCode: DEV123.Z_FIRMW_CRC
            updated: 2017-07-19T09:23:11Z
          created: 2017-07-19T09:23:11Z
          device: lo:nsid:sensor:4525121
          updated: 2017-07-19T09:23:11Z
          status: success
        - operations:
          - currentRetry: 2
            operationStatus: processed
            ended: 2017-07-19T09:23:11Z
            action: configure
            operationId: command-1234
            started: 2017-07-19T09:23:11Z
            error:
              code: ASSET_ORIGINATED_ERROR
              origin: DEVICE
              details: Invalid firmware CRC
              deviceCode: DEV123.Z_FIRMW_CRC
            updated: 2017-07-19T09:23:11Z
          - currentRetry: 2
            operationStatus: processed
            ended: 2017-07-19T09:23:11Z
            action: configure
            operationId: command-1234
            started: 2017-07-19T09:23:11Z
            error:
              code: ASSET_ORIGINATED_ERROR
              origin: DEVICE
              details: Invalid firmware CRC
              deviceCode: DEV123.Z_FIRMW_CRC
            updated: 2017-07-19T09:23:11Z
          created: 2017-07-19T09:23:11Z
          device: lo:nsid:sensor:4525121
          updated: 2017-07-19T09:23:11Z
          status: success
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/CampaignPerTarget'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    ResourceVersionAddReqWeb:
      description: body of add resource version
      example:
        file: file
        checksum: checksum
        description: description
        resourceVersionId: resourceVersionId
        compatibleVersions:
        - compatibleVersions
        - compatibleVersions
      properties:
        checksum:
          description: The Base64-encoded MD5 checksum of the version's raw file (non
            Base64-encoded)Expected string (max 255 characters)
          type: string
        compatibleVersions:
          description: 'set of the versions from which a resource update to the version
            can be done. Max number of versions is 100. A version max length is 255. '
          items:
            type: string
          type: array
        description:
          description: the version's description. Expected string (max 255 characters)
          type: string
        file:
          description: the version's Base64-encoded binary. File max size is 10MB
          type: string
        resourceVersionId:
          description: the resource version id. Expected string (max 255 characters)
          type: string
      required:
      - checksum
      - file
      - resourceVersionId
      type: object
    CampaignPerTarget:
      example:
        operations:
        - currentRetry: 2
          operationStatus: processed
          ended: 2017-07-19T09:23:11Z
          action: configure
          operationId: command-1234
          started: 2017-07-19T09:23:11Z
          error:
            code: ASSET_ORIGINATED_ERROR
            origin: DEVICE
            details: Invalid firmware CRC
            deviceCode: DEV123.Z_FIRMW_CRC
          updated: 2017-07-19T09:23:11Z
        - currentRetry: 2
          operationStatus: processed
          ended: 2017-07-19T09:23:11Z
          action: configure
          operationId: command-1234
          started: 2017-07-19T09:23:11Z
          error:
            code: ASSET_ORIGINATED_ERROR
            origin: DEVICE
            details: Invalid firmware CRC
            deviceCode: DEV123.Z_FIRMW_CRC
          updated: 2017-07-19T09:23:11Z
        created: 2017-07-19T09:23:11Z
        device: lo:nsid:sensor:4525121
        updated: 2017-07-19T09:23:11Z
        status: success
      properties:
        created:
          example: 2017-07-19T09:23:11Z
          type: string
        device:
          description: Device identifier
          example: lo:nsid:sensor:4525121
          type: string
        operations:
          items:
            $ref: '#/components/schemas/CampaignOperationState'
          type: array
        status:
          description: Global status of the sequence of operations
          enum:
          - notStarted
          - pending
          - inProgress
          - success
          - failure
          example: success
          type: string
        updated:
          example: 2017-07-19T09:23:11Z
          type: string
      required:
      - created
      - device
      - operations
      - status
      - updated
      type: object
    CaCertificate:
      example:
        expires: 2000-01-23T04:56:07.000+00:00
        certificate: certificate
        comment: comment
        id: id
      properties:
        certificate:
          type: string
        comment:
          type: string
        expires:
          format: date-time
          type: string
        id:
          type: string
      type: object
    CommandPolicy:
      example:
        ackTimeoutInSeconds: 120
        expirationInSeconds: 120
        ackMode: APPLICATIVE
        attempts: 3
      properties:
        expirationInSeconds:
          description: Expiration in seconds since command creation date. Default
            is no expiry. Min value is 5 seconds
          example: 120
          format: int64
          type: integer
        ackTimeoutInSeconds:
          description: Ack timeout in seconds since command was sent. Default is no
            ack timeout. Min value is 10 seconds
          example: 120
          format: int64
          type: integer
        ackMode:
          description: Ack mode for this command. NONE (or AUTO) ack means that the
            command is automatically acknowledged (set to 'PROCESSED' status) as the
            command is sent to the device. NETWORK ack requires a reception acknowledge.
            APPLICATIVE (or DEVICE) ack requires a command response from the device
            to change its status. Default ack mode is connectivity dependant.
          enum:
          - NONE
          - NETWORK
          - APPLICATIVE
          example: APPLICATIVE
          type: string
        attempts:
          description: Number of attemps in case of ERROR. Default to 1
          example: 3
          format: int32
          type: integer
      type: object
    DeviceDeletedTrigger:
      example:
        filter:
          connectors:
          - connectors
          - connectors
          groupPaths:
          - includeSubPath: false
            path: /europe/france
          - includeSubPath: false
            path: /europe/france
          tags:
          - - ALERT
        version: 5
      properties:
        filter:
          $ref: '#/components/schemas/DeviceDeletedFilter'
        version:
          description: requested object version
          enum:
          - 1
          format: int32
          type: integer
      required:
      - version
      type: object
    DeviceCreatedFilter:
      example:
        connectors:
        - connectors
        - connectors
        groupPaths:
        - includeSubPath: false
          path: /europe/france
        - includeSubPath: false
          path: /europe/france
        tags:
        - - ALERT
      properties:
        connectors:
          description: list of filtered connectors.
          items:
            type: string
          type: array
        groupPaths:
          description: list of filtered group paths. Null or empty to accept all group
            paths
          items:
            $ref: '#/components/schemas/GroupPath'
          type: array
        tags:
          description: list of groups of tags that should be contained in message
            tags. There is a match if at least one group of tags is a match. A group
            of tags is a match if the tags of the message contains all elements of
            this group.<br>e.g. [["ALERT"]] will match all messages containing tag
            'ALERT'.<br>e.g. [["HIGH", "ALERT"],["PROD"]] will match messages with
            either tag 'PROD' or both tags 'ALERT' and 'HIGH'.
          example:
          - - ALERT
          items:
            items:
              type: string
            type: array
          type: array
      type: object
    ResourceUpdateWeb:
      example:
        requestedVersion: requestedVersion
        metadata:
          key: metadata
        created: created
        initialVersion: initialVersion
        errorCode: errorCode
        errorOrigin: errorOrigin
        progress: 0.8008281904610115
        id: id
        updated: updated
        deviceErrorCode: deviceErrorCode
        errorDetails: errorDetails
        status: status
      properties:
        created:
          type: string
        deviceErrorCode:
          type: string
        errorCode:
          type: string
        errorDetails:
          type: string
        errorOrigin:
          type: string
        id:
          type: string
        initialVersion:
          type: string
        metadata:
          additionalProperties:
            type: string
          type: object
        progress:
          format: double
          type: number
        requestedVersion:
          type: string
        status:
          type: string
        updated:
          type: string
      type: object
    NewData:
      description: original data that triggered the match
      example:
        metadata: '{}'
        streamId: streamId
        extra:
          key: extra
        location:
          provider: GPS
          alt: 5.00001
          accuracy: 10.0
          lon: -30.00001
          lat: 45.000009
        model: model
        value: '{}'
        tags:
        - tags
        - tags
        timestamp: timestamp
      properties:
        extra:
          additionalProperties:
            type: string
          type: object
        location:
          $ref: '#/components/schemas/Location'
        metadata:
          properties: {}
          type: object
        model:
          type: string
        streamId:
          type: string
        tags:
          items:
            type: string
          type: array
        timestamp:
          type: string
        value:
          properties: {}
          type: object
      type: object
    FiringGuardResetRequest:
      example:
        selectionCriteria:
        - keyPath: keyPath
          value: '{}'
        - keyPath: keyPath
          value: '{}'
        firingRuleId: firingRuleId
      properties:
        firingRuleId:
          description: firingRuleId linked to the FiringGuard to reset
          type: string
        selectionCriteria:
          description: criteria that should match the FiringGuard to reset
          items:
            $ref: '#/components/schemas/SelectionCriteria'
          type: array
      required:
      - firingRuleId
      type: object
    CommandStatusFilter:
      example:
        status:
        - PENDING
        - PENDING
      properties:
        status:
          description: list of command status devices. Null or empty to accept all
            status
          items:
            enum:
            - PENDING
            - PROCESSING
            - PROCESSED
            - CANCELED
            - ERROR
            - RETRYING
            - EXPIRED
            - UNKNOWN
            type: string
          type: array
      type: object
    LoraDeviceStatsWeb:
      example:
        deactivated: 6
        activated: 0
      properties:
        activated:
          format: int64
          type: integer
        deactivated:
          format: int64
          type: integer
      type: object
    TenantSettings:
      properties:
        settings:
          additionalProperties:
            $ref: '#/components/schemas/SettingsSection'
          type: object
        tenantId:
          type: string
      type: object
    Pageable«LWM2MDevice»:
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/LWM2MDevice'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    ResponseEntity:
      example:
        statusCodeValue: 0
        body: '{}'
        statusCode: 100 CONTINUE
      properties:
        body:
          properties: {}
          type: object
        statusCode:
          enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
          type: string
        statusCodeValue:
          format: int32
          type: integer
      type: object
    HttpPushAction:
      example:
        headers:
          key:
          - headers
          - headers
        retryOnFailure: false
        jsonPath: jsonPath
        content: content
        webhookUrl: webhookUrl
      properties:
        content:
          description: A raw string or a mustache (https://mustache.github.io/mustache.5.html)
            template describing the webhook body. If empty, the raw event will be
            used.
          type: string
        headers:
          additionalProperties:
            items:
              type: string
            type: array
          description: A map of header to be passed in the http POST headers
          type: object
        jsonPath:
          description: The json path to extract from the considered message (or event),
            it will be taken as the root datacontext object when combined with a mustache
            template in content
          type: string
        retryOnFailure:
          description: Indicate if a retry policy should be set up in case of a http
            push delivery failure
          example: false
          type: boolean
        webhookUrl:
          description: The url of the target service webhook (only the ports 80, 443,
            8080, 8443 and 9243 are allowed).
          type: string
      required:
      - webhookUrl
      type: object
    AssetSetTargetResourceVersionReqWeb:
      description: Set Target Resource Version data in Set Request
      example:
        targetVersion: targetVersion
      properties:
        targetVersion:
          description: the asset's resource target version. Expected string (max 255
            characters)
          type: string
      required:
      - targetVersion
      type: object
    ErrorResponseWeb:
      description: Generic Error in Response
      example:
        code: code
        details: details
        id: id
        message: message
      properties:
        code:
          description: Error code
          type: string
        details:
          description: Detailed error description
          type: string
        id:
          description: Unique identifier of this error instance
          type: string
        message:
          description: Short error description
          type: string
      required:
      - code
      - id
      - message
      type: object
    ConnectorStatistics:
      properties:
        counters:
          additionalProperties:
            format: int64
            type: integer
          type: object
        entries:
          additionalProperties:
            format: int64
            type: integer
          type: object
        inventories:
          additionalProperties:
            format: int64
            type: integer
          type: object
        lastUpdatedDateTs:
          type: string
      type: object
    StateChangeTrigger:
      example:
        filter:
          ruleIds:
          - ruleIds
          - ruleIds
        version: 3
      properties:
        filter:
          $ref: '#/components/schemas/StateChangeFilter'
        version:
          description: requested object version
          enum:
          - 1
          format: int32
          type: integer
      required:
      - version
      type: object
    SMSConnectorBusinessSettingsCreationReqWeb:
      description: SMS Connector Business Settings  Data in Creation Request
      example:
        decoderName: decoderName
        serverPhoneNumber: serverPhoneNumber
        msisdns:
        - msisdn: "3387654321"
        - msisdn: "3387654321"
      properties:
        decoderName:
          description: 'decoder name ex: "decoderName"'
          type: string
        msisdns:
          description: device msisdn
          items:
            $ref: '#/components/schemas/Msisdns'
          type: array
        serverPhoneNumber:
          description: 'server phone number ex: "20258"'
          type: string
      required:
      - msisdns
      - serverPhoneNumber
      type: object
    GeozoneContainer:
      example:
        description: description
        zoneId: zoneId
        geometry:
          coordinates:
          - - - 0.8008281904610115
              - 0.8008281904610115
            - - 0.8008281904610115
              - 0.8008281904610115
          - - - 0.8008281904610115
              - 0.8008281904610115
            - - 0.8008281904610115
              - 0.8008281904610115
          type: Polygon
        properties: '{}'
        tags:
        - tags
        - tags
      properties:
        description:
          type: string
        geometry:
          $ref: '#/components/schemas/Polygon'
        properties:
          properties: {}
          type: object
        tags:
          items:
            type: string
          type: array
        zoneId:
          type: string
      type: object
    AssetCommandWeb:
      description: Asset command data
      example:
        data:
          delay: "30000"
          bootMode: '"safe"'
        payload: FF09F8F09E09
        event: reboot
      properties:
        data:
          additionalProperties:
            type: string
          description: Data fields / arguments of the command sent to the device.
            Expected map of string,string (max 100 elements, key max 255 characters,
            value is limited)
          example:
            delay: "30000"
            bootMode: '"safe"'
          type: object
        event:
          description: '''event'' of the command message to send to the device (usually
            used to indicate called function). The length is limited'
          example: reboot
          type: string
        payload:
          description: payload of the command message to send to the device. The length
            is limited
          example: FF09F8F09E09
          type: string
      type: object
    DeviceActivityTrigger:
      example:
        filter:
          deviceIds:
          - deviceIds
          - deviceIds
          ruleIds:
          - ruleIds
          - ruleIds
        version: 1
      properties:
        filter:
          $ref: '#/components/schemas/DeviceActivityFilter'
        version:
          description: requested object version
          enum:
          - 1
          format: int32
          type: integer
      required:
      - version
      type: object
    BinaryPayloadDescription:
      description: binary decoder provisioning information
      example:
        template: template
        metadata:
          certified: false
          certifiedSince: 2019-05-15T07:55:55.555Z
        format: int pressure;
        model: model
        id: id
        encoding: encoding
        type: type
        updated: 2019-05-15T07:55:55.555Z
        enabled: false
        mathEvalEnabled: false
        tags:
        - tags
        - tags
      properties:
        enabled:
          description: decoder activation. Default is false.
          example: false
          type: boolean
        encoding:
          description: unique decoder name. Will be used to trigger the decoding function
          type: string
        format:
          description: the JBBP binary payload format with LO additional tokens (float,
            utf8)
          example: int pressure;
          type: string
        id:
          description: id of the decoder. Should be null when used for POST. Required
            for update.
          type: string
        mathEvalEnabled:
          description: applying math evaluation on templated decoded result
          example: false
          type: boolean
        metadata:
          $ref: '#/components/schemas/PayloadDescriptionMetadata'
        model:
          description: if empty, the decoded data will use the value of 'model' field
            from encoded data. If set, this value will be used to override 'model'
            field in decoded data.
          type: string
        tags:
          description: tags used for filtering
          items:
            type: string
          type: array
        template:
          description: decoding result optional template
          type: string
        type:
          description: 'decoder type : csv, binary, javascript'
          type: string
        updated:
          description: date of the last update. ISO 8601 date time.
          example: 2019-05-15T07:55:55.555Z
          readOnly: true
          type: string
      required:
      - enabled
      - encoding
      - format
      type: object
    Pageable«LoraGatewayInfo»:
      example:
        size: 1
        data:
        - system:
            powerState: UP
            timeSync: NTP
            gpsState: UNKNOWN
          lastReportTs: 2016-06-03T15:55:36.944Z
          name: FF02041D
          description: description
          location:
            provider: GPS
            lastUpdateTs: 2016-06-14T11:09:22.125Z
            alt: 50.0
            lon: 7.44464
            lat: 10.11212
          id: FF02041D
          type: NANO
          config:
            version: 2.2.47
          manufacturer: Kerlink
          status: ONLINE
        - system:
            powerState: UP
            timeSync: NTP
            gpsState: UNKNOWN
          lastReportTs: 2016-06-03T15:55:36.944Z
          name: FF02041D
          description: description
          location:
            provider: GPS
            lastUpdateTs: 2016-06-14T11:09:22.125Z
            alt: 50.0
            lon: 7.44464
            lat: 10.11212
          id: FF02041D
          type: NANO
          config:
            version: 2.2.47
          manufacturer: Kerlink
          status: ONLINE
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/LoraGatewayInfo'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    TenantWithOfferWeb:
      properties:
        accountType:
          enum:
          - ADMIN
          - VENDOR
          - CUSTOMER
          type: string
        adminInfo:
          $ref: '#/components/schemas/AdminInfo'
        country:
          type: string
        creationTs:
          format: int64
          type: integer
        deletionTs:
          format: int64
          type: integer
        id:
          type: string
        identityProvider:
          type: string
        mainUserId:
          type: string
        masterApiKeyId:
          type: string
        name:
          type: string
        offerAndOptions:
          items:
            $ref: '#/components/schemas/OffersAndOptionsReqWeb'
          type: array
        offerNames:
          items:
            type: string
          type: array
        offerSettings:
          additionalProperties:
            $ref: '#/components/schemas/SettingsSection'
          type: object
        parentId:
          type: string
        properties:
          additionalProperties:
            type: string
          type: object
        siret:
          type: string
        tags:
          items:
            type: string
          type: array
        technicalSettings:
          additionalProperties:
            $ref: '#/components/schemas/SettingsSection'
          type: object
        userSettings:
          additionalProperties:
            $ref: '#/components/schemas/SettingsSection'
          type: object
      type: object
    UpdateDeviceFirmwareReqWeb:
      description: a firmware update request
      example:
        metadata:
          secured: true
        notifyTo: fifo/fwUpdateEvents
        version: 1.2.0
      properties:
        metadata:
          additionalProperties:
            type: string
          description: the update metadata. Max number of metadata is 100. Metadata
            name max length is 255. Metadata value max length is 255.
          example:
            secured: true
          type: object
        notifyTo:
          description: (optional) topic where firmware update status change events
            must be published. A valid 'notify to' starts with one of ['fifo/', 'pubsub/','router/']and
            max length is 255
          example: fifo/fwUpdateEvents
          type: string
        version:
          description: requested firmware version. Expected string (max 255 characters)
          example: 1.2.0
          type: string
      type: object
    Pageable«AssetResourceWeb»:
      example:
        size: 1
        data:
        - resourceId: MyResource001
          assetIdNamespace: device
          assetId: "001"
          currentVersionChangeTs: 1463993913147
          tenantId: 57xxxxxxxxxxxxxxxxxxxxxx
          targetVersionTs: 1463994120822
          currentVersionTs: 1463993913147
          currentVersion: v1
          connectorMetadata:
            CmaroId: FF:1F:4B:F0:F0:FF:BF:F3
          targetVersion: v2
        - resourceId: MyResource001
          assetIdNamespace: device
          assetId: "001"
          currentVersionChangeTs: 1463993913147
          tenantId: 57xxxxxxxxxxxxxxxxxxxxxx
          targetVersionTs: 1463994120822
          currentVersionTs: 1463993913147
          currentVersion: v1
          connectorMetadata:
            CmaroId: FF:1F:4B:F0:F0:FF:BF:F3
          targetVersion: v2
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/AssetResourceWeb'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    AuthReqWeb:
      description: body of authentication request
      example:
        password: MyCurrentPWD
        login: MyLoginName
        email: me.name@mycompagny.mycom
      properties:
        email:
          description: the user email
          example: me.name@mycompagny.mycom
          type: string
        login:
          description: the user login
          example: MyLoginName
          type: string
        password:
          description: the user password
          example: MyCurrentPWD
          type: string
      required:
      - password
      type: object
    HttpPushTestResult:
      example:
        httpResponseStatusCode: 0
        urlBlacklisted: true
        success: true
        httpResponseBody: httpResponseBody
        errorMessage: errorMessage
      properties:
        errorMessage:
          type: string
        httpResponseBody:
          type: string
        httpResponseStatusCode:
          format: int32
          type: integer
        success:
          type: boolean
        urlBlacklisted:
          type: boolean
      type: object
    TenantDayMetrics:
      example:
        days:
        - day: 2020-04-01
          connectors:
            lora:
              traffic:
                in:
                  msg: 54395.0
                  bytes: 572827.0
                out:
                  msg: 100.0
                  bytes: 2858.0
              inventory:
                maxNumberOfEnabledNodes: 30.0
            mqtt:
              traffic:
                in:
                  msg: 45000.0
                  virtualMsg: 45000.0
                  bytes: 1120000.0
                out:
                  msg: 35220.0
                  virtualMsg: 35220.0
                  bytes: 1.8373042E7
            mqttApplication:
              traffic:
                in:
                  msg: 4500.0
                  virtualMsg: 4500.0
                  bytes: 112000.0
            external:
              traffic:
                in:
                  msg: 2.0
                  virtualMsg: 2.0
                  bytes: 20.0
                out:
                  msg: 1.0
                  virtualMsg: 1.0
                  bytes: 100.0
            http:
              traffic:
                in:
                  msg: 359.0
                  virtualMsg: 359.0
                  bytes: 167457.0
            sms_20259:
              traffic:
                in:
                  msg: 10.0
                  virtualMsg: 10.0
                  bytes: 1100.0
                out:
                  msg: 1.0
                  virtualMsg: 1.0
                  bytes: 10.0
          services:
            deviceManagement:
              numbeOfSuccessfulDownloads: 123.0
            storage:
              storedDataMessagesInMB: 456.0
        - day: 2020-04-02
          connectors:
            lora:
              traffic:
                in:
                  msg: 42716.0
                  bytes: 493582.0
                out:
                  msg: 77.0
                  bytes: 1474.0
              inventory:
                maxNumberOfEnabledNodes: 29.0
            mqtt:
              traffic:
                out:
                  msg: 43229.0
                  virtualMsg: 43229.0
                  bytes: 2.319852E7
            mqttApplication:
              traffic:
                in:
                  msg: 4322.0
                  virtualMsg: 4322.0
                  bytes: 2319852.0
            http:
              traffic:
                in:
                  msg: 1085.0
                  virtualMsg: 1085.0
                  bytes: 545462.0
          services:
            deviceManagement:
              numbeOfSuccessfulDownloads: 100.0
            storage:
              storedDataMessagesInMB: 567.0
        tenant:
          offerAndOptions:
            offer:
              displayName: displayName
              name: name
            options: Discover
          name: Tenant-test
          id: 57ed0a98266e260a12345
          properties:
            diseId: "12345678"
      properties:
        tenant:
          $ref: '#/components/schemas/TenantExternalView'
        days:
          description: Statistics per day
          example:
          - day: 2020-04-01
            connectors:
              lora:
                traffic:
                  in:
                    msg: 54395.0
                    bytes: 572827.0
                  out:
                    msg: 100.0
                    bytes: 2858.0
                inventory:
                  maxNumberOfEnabledNodes: 30.0
              mqtt:
                traffic:
                  in:
                    msg: 45000.0
                    virtualMsg: 45000.0
                    bytes: 1120000.0
                  out:
                    msg: 35220.0
                    virtualMsg: 35220.0
                    bytes: 1.8373042E7
              mqttApplication:
                traffic:
                  in:
                    msg: 4500.0
                    virtualMsg: 4500.0
                    bytes: 112000.0
              external:
                traffic:
                  in:
                    msg: 2.0
                    virtualMsg: 2.0
                    bytes: 20.0
                  out:
                    msg: 1.0
                    virtualMsg: 1.0
                    bytes: 100.0
              http:
                traffic:
                  in:
                    msg: 359.0
                    virtualMsg: 359.0
                    bytes: 167457.0
              sms_20259:
                traffic:
                  in:
                    msg: 10.0
                    virtualMsg: 10.0
                    bytes: 1100.0
                  out:
                    msg: 1.0
                    virtualMsg: 1.0
                    bytes: 10.0
            services:
              deviceManagement:
                numbeOfSuccessfulDownloads: 123.0
              storage:
                storedDataMessagesInMB: 456.0
          - day: 2020-04-02
            connectors:
              lora:
                traffic:
                  in:
                    msg: 42716.0
                    bytes: 493582.0
                  out:
                    msg: 77.0
                    bytes: 1474.0
                inventory:
                  maxNumberOfEnabledNodes: 29.0
              mqtt:
                traffic:
                  out:
                    msg: 43229.0
                    virtualMsg: 43229.0
                    bytes: 2.319852E7
              mqttApplication:
                traffic:
                  in:
                    msg: 4322.0
                    virtualMsg: 4322.0
                    bytes: 2319852.0
              http:
                traffic:
                  in:
                    msg: 1085.0
                    virtualMsg: 1085.0
                    bytes: 545462.0
            services:
              deviceManagement:
                numbeOfSuccessfulDownloads: 100.0
              storage:
                storedDataMessagesInMB: 567.0
          items:
            $ref: '#/components/schemas/DayMetrics'
          type: array
      type: object
    LoraNetworkFilter:
      example:
        messageTypes:
        - UNCONFIRMED_DATA_UP
        - UNCONFIRMED_DATA_UP
      properties:
        messageTypes:
          description: list of filtered all messageTypes. Null or empty to accept
            all message types
          items:
            enum:
            - UNCONFIRMED_DATA_UP
            - CONFIRMED_DATA_UP
            - UNCONFIRMED_DATA_DOWN
            - CONFIRMED_DATA_DOWN
            - JOIN_REQUEST
            - JOIN_ACCEPT
            type: string
          type: array
      type: object
    DeviceResourceVersionValueWeb:
      description: a resource version
      example:
        version: v2
        timestamp: 2020-05-19T10:30:58Z
      properties:
        timestamp:
          description: resource version associated date/time
          example: 2020-05-19T10:30:58Z
          type: string
        version:
          description: resource version. Expected string (max 255 characters)
          example: v2
          type: string
      type: object
    UserUpdateReqWeb:
      description: body of user update request
      example:
        roles:
        - USER_R
        - API_KEY_R
        tenantId: 57FFFFFFFFFFFFFFFFFFFFFF
        language: EN
        mainUser: false
        state: enabled
        login: MyLoginName
        email: me.name@mycompagny.mycom
      properties:
        email:
          description: user email. Expected a valid email (max 254 characters)
          example: me.name@mycompagny.mycom
          type: string
        language:
          description: 'user language. Expected language ISO 639-1 (example: "en",
            "fr", "sk", "ro", "es") (max 2 characters)'
          example: EN
          type: string
        login:
          description: the user login. If no external identity provider is used, then
            login must respect the following regular expression <code>[a-zA-Z0-9_-]{3,254}</code>
          example: MyLoginName
          type: string
        mainUser:
          description: Set the user as main user. Expected boolean (true/false)
          example: false
          type: boolean
        roles:
          description: list of user associated roles. Basic roles are "USER_R", "USER_W",
            "API_KEY_R", "API_KEY_W" or any role string supplied at tenant account
            creation time. Expected array of role name (max all roles, role value
            max 255 characters)
          example:
          - USER_R
          - API_KEY_R
          items:
            type: string
          type: array
        state:
          description: 'user state : disabled, enabled or suspended'
          example: enabled
          type: string
        tenantId:
          description: identifier of tenant account this user belongs to. Expected
            identifier (max 24 characters)
          example: 57FFFFFFFFFFFFFFFFFFFFFF
          type: string
      required:
      - state
      type: object
    Polygon:
      example:
        coordinates:
        - - - 0.8008281904610115
            - 0.8008281904610115
          - - 0.8008281904610115
            - 0.8008281904610115
        - - - 0.8008281904610115
            - 0.8008281904610115
          - - 0.8008281904610115
            - 0.8008281904610115
        type: Polygon
      properties:
        coordinates:
          items:
            items:
              items:
                format: double
                type: number
              type: array
            type: array
          type: array
        type:
          enum:
          - Polygon
          type: string
      type: object
    InterfaceCapability:
      example:
        available: true
        version: 1
      properties:
        available:
          description: Indicates whether the capability is available for the interface
          example: true
          readOnly: true
          type: boolean
        version:
          description: Capability version
          example: 1
          format: int32
          readOnly: true
          type: integer
      type: object
    AssetUpdateReqWeb:
      description: request to update the details of a registered asset
      example:
        groupId: groupId
        name: 'geo tracker #123'
        description: description
        groupPath: groupPath
        properties:
          manufacturer: MyDeviceMaker, Inc.
          hwVersion: 2.0.1.7-us_64
        tags:
        - sensor
        - moisture
      properties:
        description:
          description: user-readable description of the asset. Expected string (max
            500 characters)
          type: string
        groupId:
          description: identifier of the group this asset is associated with. Expected
            string (max 6 characters)
          type: string
        groupPath:
          description: 'path of the group this asset is associated with. Authorized:
            letter (lowercase and uppercase), accented characters, number, space,
            dash, underscore and simple quote. A valid path must respect the following
            regular expression <code>^[\wÀ-ÖØ-öø-ÿ'' -]{1,255}</code>.Expected string
            (max 255 characters)'
          type: string
        name:
          description: asset user-readable name (for display in web portal). Expected
            string (max 255 characters)
          example: 'geo tracker #123'
          type: string
        properties:
          additionalProperties:
            type: string
          description: 'map of key/value string pairs detailed properties of the device.
            Max number of properties depends of your offer settings. A property name
            must not include following characters <code>$.</code> and max length is
            128. Invalid property names are : ''class'', ''_class''. Property value
            max length is 256.'
          example:
            manufacturer: MyDeviceMaker, Inc.
            hwVersion: 2.0.1.7-us_64
          type: object
        tags:
          description: series of tags associated with the asset. Max number of tags
            depends of your offer settings. Tag value max length is 32.
          example:
          - sensor
          - moisture
          items:
            type: string
          type: array
      type: object
    CreateFifoBindingRequest:
      description: body of create FIFO bindings request
      example:
        fifoId: fifoName
        routingKeyFilter: liveobjects.*.examples
      properties:
        fifoId:
          description: FIFO identifier. Fifo name must respect the following regular
            expression <code>[A-Za-z\d-_~]+</code> (max 255 characters)
          example: fifoName
          type: string
        routingKeyFilter:
          description: routing Key filter. Routing key must respect the following
            regular expression <code>[A-Za-z\d-_:~#\.\*]+</code> (max 1000 characters)
          example: liveobjects.*.examples
          type: string
      required:
      - fifoId
      - routingKeyFilter
      type: object
    Thresholds:
      description: body of sms connector limits
      example:
        maxSmsOutPerDay: 100
        maxMsisdn: 10
        maxTags: 10
        maxSmsInPerDay: 5000
      properties:
        maxMsisdn:
          description: max of msisdn allow to register
          example: 10
          format: int32
          type: integer
        maxSmsInPerDay:
          description: max of sms received allow
          example: 5000
          format: int32
          type: integer
        maxSmsOutPerDay:
          description: max of sms send allow
          example: 100
          format: int32
          type: integer
        maxTags:
          description: max of tag allow to register
          example: 10
          format: int32
          type: integer
      required:
      - maxMsisdn
      - maxSmsInPerDay
      - maxSmsOutPerDay
      - maxTags
      type: object
    StateChangeFilter:
      example:
        ruleIds:
        - ruleIds
        - ruleIds
      properties:
        ruleIds:
          description: list of filtered rule Ids. Null or empty to accept all rule
            Ids
          items:
            type: string
          type: array
      type: object
    DayMetrics:
      properties:
        connectors:
          additionalProperties:
            $ref: '#/components/schemas/ConnectorAccounting'
          description: connector (lora, mqtt, http) statistics
          type: object
        day:
          description: day in "YYYY-MM-DD" format.
          example: 2020-04-01
          type: string
        services:
          additionalProperties:
            additionalProperties:
              format: int64
              type: integer
            type: object
          description: service statistics
          type: object
      type: object
    GroupCreateRequest:
      example:
        pathNode: france
        description: description
        parentId: "123456"
      properties:
        description:
          description: group description. Expected string (max 255 characters)
          type: string
        parentId:
          description: reference to group's parent (id). Expected string (max 6 characters)
          example: "123456"
          type: string
        pathNode:
          description: 'group''s local id in path (unique for groups in same parent).Authorized:
            letter (lowercase and uppercase), accented characters, number, space,
            dash, underscore and simple quote. A valid path must respect the following
            regular expression <code>^[\wÀ-ÖØ-öø-ÿ'' -]{1,255}</code>.Expected string
            (max 255 characters)'
          example: france
          type: string
      required:
      - pathNode
      type: object
    Pageable«Resource»:
      example:
        size: 1
        data:
        - versionAliases:
            prod: "1.1"
          metadata:
            secured: true
          resourceId: MyResource001
          connector: connector
          tenantId: 57xxxxxxxxxxxxxxxxxxxxxx
          description: It the last provided resource
          label: My resource Label
          updateTs: 6
          creationTs: 0
        - versionAliases:
            prod: "1.1"
          metadata:
            secured: true
          resourceId: MyResource001
          connector: connector
          tenantId: 57xxxxxxxxxxxxxxxxxxxxxx
          description: It the last provided resource
          label: My resource Label
          updateTs: 6
          creationTs: 0
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/Resource'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    Pageable«CampaignPerTarget»:
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/CampaignPerTarget'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    MessageSelectorFilter:
      example:
        connectors:
        - connectors
        - connectors
        deviceIds:
        - deviceIds
        - deviceIds
        groupPaths:
        - includeSubPath: false
          path: /europe/france
        - includeSubPath: false
          path: /europe/france
      properties:
        connectors:
          description: list of filtered connectors.
          items:
            type: string
          type: array
        deviceIds:
          description: list of filtered devices.
          items:
            type: string
          type: array
        groupPaths:
          description: list of filtered group paths
          items:
            $ref: '#/components/schemas/GroupPath'
          type: array
      type: object
    FifoBinding:
      example:
        routingKeyFilter: liveobjects.*.examples
        destFifoName: fifoName
      properties:
        destFifoName:
          description: Destination Fifo Name
          example: fifoName
          type: string
        routingKeyFilter:
          description: routing Key filter
          example: liveobjects.*.examples
          type: string
      required:
      - destFifoName
      - routingKeyFilter
      type: object
    ConnectorNode:
      description: Full details about a connector node (=device interface)
      example:
        connector: connector
        activity: '{}'
        created: 2016-06-03T15:55:36.944Z
        definition: '{}'
        nodeId: nodeId
        deviceId: deviceId
        updated: 2016-06-03T15:55:36.944Z
        enabled: false
        status: ONLINE
        lastContact: lastContact
      properties:
        connector:
          description: Connector ID
          type: string
        nodeId:
          description: Connector node ID
          type: string
        deviceId:
          description: Device identifier (URN)
          type: string
        enabled:
          description: Indicates whether the interface is enabled
          example: false
          type: boolean
        status:
          description: Interface status
          enum:
          - REGISTERED
          - INITIALIZING
          - INITIALIZED
          - REACTIVATED
          - ONLINE
          - ACTIVATED
          - OFFLINE
          - DEACTIVATED
          - CONNECTIVITY_ERROR
          - UNKNOWN
          - DELETED
          example: ONLINE
          type: string
        definition:
          description: Base definition
          properties: {}
          type: object
        lastContact:
          description: Last contact date
          type: string
        activity:
          description: Interface activity
          properties: {}
          type: object
        created:
          description: Date/time of the device creation
          example: 2016-06-03T15:55:36.944Z
          readOnly: true
          type: string
        updated:
          description: Date/time of the device update
          example: 2016-06-03T15:55:36.944Z
          readOnly: true
          type: string
      type: object
    DeferredResult«boolean»:
      properties:
        result:
          properties: {}
          type: object
        setOrExpired:
          type: boolean
      type: object
    Campaign:
      example:
        planning:
          endDate: endDate
          startDate: startDate
        operations:
        - action: command
          definition:
            event: reset
            data:
              delay: "5000"
        totalTargetsPerStatus:
          canceled: 0
          inProgress: 1
          failure: 6
          success: 2
          pending: 5
          notStarted: 5
        created: 2119-07-19T09:23:11Z
        campaignStatus: RUNNING
        name: My campaign
        options:
          dynamicallyAddEligibleDevice: true
        description: A campaign that configures parameters, sends command and updates
          a resource
        id: auto-generated id
        updated: 2119-07-19T09:23:11Z
        numberOfTargets: 1
        target:
          idList:
          - urn:lo:nsid:myNamespace:myDeviceId
          filterQuery: tag=in=(FUT,TEST1)
      properties:
        campaignStatus:
          enum:
          - SCHEDULED
          - RUNNING
          - SERVER_ERROR
          - INCOMPLETE
          - COMPLETE
          - CANCELED
          - CANCELING
          example: RUNNING
          readOnly: true
          type: string
        created:
          example: 2119-07-19T09:23:11Z
          readOnly: true
          type: string
        description:
          description: Campaign description
          example: A campaign that configures parameters, sends command and updates
            a resource
          type: string
        id:
          description: campaign id
          example: auto-generated id
          type: string
        name:
          description: campaign name
          example: My campaign
          type: string
        numberOfTargets:
          description: number of targets after deduplication
          example: 1
          format: int32
          readOnly: true
          type: integer
        operations:
          description: requested operations
          example:
          - action: command
            definition:
              event: reset
              data:
                delay: "5000"
          items:
            $ref: '#/components/schemas/CampaignOperation'
          type: array
        options:
          $ref: '#/components/schemas/CampaignOptions'
        planning:
          $ref: '#/components/schemas/CampaignPlanning'
        target:
          $ref: '#/components/schemas/DeviceSelector'
        totalTargetsPerStatus:
          $ref: '#/components/schemas/CampaignStatsPerStatus'
        updated:
          example: 2119-07-19T09:23:11Z
          readOnly: true
          type: string
      required:
      - id
      - name
      - operations
      - planning
      - target
      type: object
    DeviceInterface:
      description: Full details about a device interface
      example:
        capabilities:
          configuration:
            available: true
            version: 1
          resource:
            available: true
            version: 1
          command:
            available: true
            version: 1
        connector: connector
        activity: '{}'
        created: 2016-06-03T15:55:36.944Z
        definition: '{}'
        nodeId: nodeId
        deviceId: deviceId
        updated: 2016-06-03T15:55:36.944Z
        enabled: false
        status: ONLINE
        lastContact: lastContact
      properties:
        connector:
          description: Interface connector ID
          type: string
        nodeId:
          description: Interface node ID
          type: string
        deviceId:
          description: Device identifier (URN)
          type: string
        enabled:
          description: Indicates whether the interface is enabled
          example: false
          type: boolean
        status:
          description: Interface status
          enum:
          - REGISTERED
          - INITIALIZING
          - INITIALIZED
          - REACTIVATED
          - ONLINE
          - ACTIVATED
          - OFFLINE
          - DEACTIVATED
          - CONNECTIVITY_ERROR
          - UNKNOWN
          - DELETED
          example: ONLINE
          type: string
        definition:
          description: Base definition
          properties: {}
          type: object
        lastContact:
          description: Last contact date
          type: string
        capabilities:
          $ref: '#/components/schemas/InterfaceCapabilities'
        activity:
          description: Interface activity
          properties: {}
          type: object
        created:
          description: Date/time of the device creation
          example: 2016-06-03T15:55:36.944Z
          readOnly: true
          type: string
        updated:
          description: Date/time of the device update
          example: 2016-06-03T15:55:36.944Z
          readOnly: true
          type: string
      type: object
    LoraNetworkTrigger:
      example:
        filter:
          messageTypes:
          - UNCONFIRMED_DATA_UP
          - UNCONFIRMED_DATA_UP
        version: 7
      properties:
        filter:
          $ref: '#/components/schemas/LoraNetworkFilter'
        version:
          description: requested object version
          enum:
          - 1
          format: int32
          type: integer
      required:
      - version
      type: object
    Pageable«ResourceUpdateWeb»:
      example:
        size: 1
        data:
        - requestedVersion: requestedVersion
          metadata:
            key: metadata
          created: created
          initialVersion: initialVersion
          errorCode: errorCode
          errorOrigin: errorOrigin
          progress: 0.8008281904610115
          id: id
          updated: updated
          deviceErrorCode: deviceErrorCode
          errorDetails: errorDetails
          status: status
        - requestedVersion: requestedVersion
          metadata:
            key: metadata
          created: created
          initialVersion: initialVersion
          errorCode: errorCode
          errorOrigin: errorOrigin
          progress: 0.8008281904610115
          id: id
          updated: updated
          deviceErrorCode: deviceErrorCode
          errorDetails: errorDetails
          status: status
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/ResourceUpdateWeb'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    Msisdns:
      example:
        msisdn: "3387654321"
      properties:
        msisdn:
          description: 'device''s SIM Card identifier ex: "33666666667"'
          example: "3387654321"
          type: string
      required:
      - msisdn
      type: object
    LoraDevice:
      example:
        lastDlFcnt: 42
        lastCommunicationTs: 2016-06-16T15:55:36.944Z
        profile: Generic_classA_RX2SF9
        lastDeactivationTs: 2016-06-09T07:26:42.321Z
        encoding: Encoding_devB_142_X
        lastActivationTs: 2016-06-09T08:04:37.971Z
        lastBatteryLevel: 127
        lastSignalLevel: 3
        devEUI: 0123456789ABCDEF
        deviceStatus: ACTIVATED
        tags:
        - Lyon
        - temperature
        activationType: OTAA
        lastUlFcnt: 42
        name: My LoRa Device
        location:
          provider: TDOA
          lastUpdateTs: 2016-06-14T11:09:22.125Z
          alt: 50.0
          accuracy: 100.0
          lon: 7.44464
          lat: 10.11212
        appEUI: FEDCBA9876543210
        connectivityOptions:
          tdoa: false
          ackUl: false
        updateTs: 2016-06-09T08:04:37.971Z
        connectivityPlan: orange-cs/loraconnect_basique
        creationTs: 2016-06-03T15:55:36.944Z
      properties:
        activationType:
          description: LoRa device activation type
          enum:
          - OTAA
          type: string
        appEUI:
          description: Application identifier (AppEUI)
          example: FEDCBA9876543210
          type: string
        connectivityOptions:
          $ref: '#/components/schemas/LoraConnectivityOptions'
        connectivityPlan:
          description: Device connectivity plan.
          example: orange-cs/loraconnect_basique
          type: string
        creationTs:
          description: Date/time of the device creation
          example: 2016-06-03T15:55:36.944Z
          readOnly: true
          type: string
        devEUI:
          description: LoRa End-device identifier (DevEUI)
          example: 0123456789ABCDEF
          type: string
        deviceStatus:
          description: Device status
          enum:
          - ACTIVATED
          - DEACTIVATED
          example: ACTIVATED
          type: string
        encoding:
          description: LoRa encoder
          example: Encoding_devB_142_X
          type: string
        lastActivationTs:
          description: Date/time of the last activation
          example: 2016-06-09T08:04:37.971Z
          readOnly: true
          type: string
        lastBatteryLevel:
          description: 'Last battery level returned by the device (0: external power
            source, 1..254: 1=min / 254 = max, 255 : NA)'
          example: 127
          format: int32
          readOnly: true
          type: integer
        lastCommunicationTs:
          description: Date/time of the last communication
          example: 2016-06-16T15:55:36.944Z
          readOnly: true
          type: string
        lastDeactivationTs:
          description: Date/time of the last deactivation
          example: 2016-06-09T07:26:42.321Z
          readOnly: true
          type: string
        lastDlFcnt:
          description: Frame counter of the last downlink
          example: 42
          format: int32
          readOnly: true
          type: integer
        lastSignalLevel:
          description: Signal level of the last uplink (between 0 to 5)
          example: 3
          format: int32
          readOnly: true
          type: integer
        lastUlFcnt:
          description: Frame counter of the last uplink
          example: 42
          format: int32
          readOnly: true
          type: integer
        location:
          $ref: '#/components/schemas/LoraDeviceLocation'
        name:
          description: LoRa device name
          example: My LoRa Device
          type: string
        profile:
          description: LoRa device profile
          example: Generic_classA_RX2SF9
          type: string
        tags:
          description: List of tags, used to tag uplink from this device
          example:
          - Lyon
          - temperature
          items:
            type: string
          type: array
        updateTs:
          description: Date/time of the last device modification
          example: 2016-06-09T08:04:37.971Z
          readOnly: true
          type: string
      required:
      - activationType
      - appEUI
      - connectivityOptions
      - devEUI
      - deviceStatus
      - encoding
      - name
      - profile
      type: object
    MatchingFiredTrigger:
      example:
        filter:
          ruleIds:
          - ruleIds
          - ruleIds
        version: 9
      properties:
        filter:
          $ref: '#/components/schemas/MatchingFiredFilter'
        version:
          description: requested object version
          enum:
          - 1
          format: int32
          type: integer
      required:
      - version
      type: object
    CampaignPlanning:
      example:
        endDate: endDate
        startDate: startDate
      properties:
        endDate:
          description: Date when the campaign is finished
          type: string
        startDate:
          description: Date from when the campaign starts
          type: string
      required:
      - endDate
      - startDate
      type: object
    AdminInfo:
      example:
        country: country
        businessUnit:
          name: name
        vendor:
          name: name
          id: id
        supportVendorIds:
        - supportVendorIds
        - supportVendorIds
      properties:
        businessUnit:
          $ref: '#/components/schemas/BusinessUnit'
        country:
          type: string
        supportVendorIds:
          items:
            type: string
          type: array
        vendor:
          $ref: '#/components/schemas/Vendor'
      type: object
    DeviceFirmwareWeb:
      description: a device firmware state
      example:
        metadata:
          secured: true
        requested:
          version: v2
          timestamp: 2017-07-19T10:30:58Z
        reported:
          version: v2
          timestamp: 2017-07-19T10:30:58Z
      properties:
        metadata:
          additionalProperties:
            type: string
          description: metadata associated with this device firmware
          example:
            secured: true
          type: object
        reported:
          $ref: '#/components/schemas/DeviceFirmwareVersionValueWeb'
        requested:
          $ref: '#/components/schemas/DeviceFirmwareVersionValueWeb'
      type: object
    ActionTriggers:
      example:
        deviceCreated:
          filter:
            connectors:
            - connectors
            - connectors
            groupPaths:
            - includeSubPath: false
              path: /europe/france
            - includeSubPath: false
              path: /europe/france
            tags:
            - - ALERT
          version: 5
        loraNetwork:
          filter:
            messageTypes:
            - UNCONFIRMED_DATA_UP
            - UNCONFIRMED_DATA_UP
          version: 7
        commandStatus:
          filter:
            status:
            - PENDING
            - PENDING
          version: 0
        deviceActivity:
          filter:
            deviceIds:
            - deviceIds
            - deviceIds
            ruleIds:
            - ruleIds
            - ruleIds
          version: 1
        matchingFired:
          filter:
            ruleIds:
            - ruleIds
            - ruleIds
          version: 9
        stateChange:
          filter:
            ruleIds:
            - ruleIds
            - ruleIds
          version: 3
        dataMessage:
          filter:
            connectors:
            - connectors
            - connectors
            deviceIds:
            - deviceIds
            - deviceIds
            groupPaths:
            - includeSubPath: false
              path: /europe/france
            - includeSubPath: false
              path: /europe/france
            tags:
            - - ALERT
          version: 6
        deviceDeleted:
          filter:
            connectors:
            - connectors
            - connectors
            groupPaths:
            - includeSubPath: false
              path: /europe/france
            - includeSubPath: false
              path: /europe/france
            tags:
            - - ALERT
          version: 5
        deviceStatus:
          filter:
            connectors:
            - connectors
            - connectors
            groupPaths:
            - includeSubPath: false
              path: /europe/france
            - includeSubPath: false
              path: /europe/france
          version: 2
      properties:
        commandStatus:
          $ref: '#/components/schemas/CommandStatusTrigger'
        dataMessage:
          $ref: '#/components/schemas/DataMessageTrigger'
        deviceActivity:
          $ref: '#/components/schemas/DeviceActivityTrigger'
        deviceCreated:
          $ref: '#/components/schemas/DeviceCreatedTrigger'
        deviceDeleted:
          $ref: '#/components/schemas/DeviceDeletedTrigger'
        deviceStatus:
          $ref: '#/components/schemas/DeviceStatusTrigger'
        loraNetwork:
          $ref: '#/components/schemas/LoraNetworkTrigger'
        matchingFired:
          $ref: '#/components/schemas/MatchingFiredTrigger'
        stateChange:
          $ref: '#/components/schemas/StateChangeTrigger'
      type: object
    LoraGatewayInfo:
      example:
        system:
          powerState: UP
          timeSync: NTP
          gpsState: UNKNOWN
        lastReportTs: 2016-06-03T15:55:36.944Z
        name: FF02041D
        description: description
        location:
          provider: GPS
          lastUpdateTs: 2016-06-14T11:09:22.125Z
          alt: 50.0
          lon: 7.44464
          lat: 10.11212
        id: FF02041D
        type: NANO
        config:
          version: 2.2.47
        manufacturer: Kerlink
        status: ONLINE
      properties:
        config:
          $ref: '#/components/schemas/GwConfig'
        description:
          description: Description
          type: string
        id:
          description: Unique id of the gateway
          example: FF02041D
          type: string
        lastReportTs:
          description: Date/time of the last report
          example: 2016-06-03T15:55:36.944Z
          type: string
        location:
          $ref: '#/components/schemas/LoraGatewayLocation'
        manufacturer:
          description: Manufacturer of the gateway
          example: Kerlink
          type: string
        name:
          description: Name of the gateway
          example: FF02041D
          type: string
        status:
          description: Status of the gateway
          example: ONLINE
          type: string
        system:
          $ref: '#/components/schemas/GwSystem'
        type:
          description: Type of the gateway
          example: NANO
          type: string
      type: object
    LWM2MDevice:
      example:
        pubKeyOrIdentity: pubKeyOrIdentity
        secretKey: something base 64
        securityMode: 'one of the following: PSK, RPK, CERT, NO_SEC'
        ep: the device's endpoint
        device: urn:lo:nsid:sensor:328379273
        updateTs: 1487769699999
        creationTs: 1487769685938
        tags:
        - tag1
        - tags2
      properties:
        creationTs:
          example: 1487769685938
          format: int64
          type: integer
        device:
          example: urn:lo:nsid:sensor:328379273
          type: string
        ep:
          example: the device's endpoint
          type: string
        pubKeyOrIdentity:
          example: pubKeyOrIdentity
          type: string
        secretKey:
          example: something base 64
          type: string
        securityMode:
          enum:
          - PSK
          - RPK
          - CERT
          - NO_SEC
          example: 'one of the following: PSK, RPK, CERT, NO_SEC'
          type: string
        tags:
          example:
          - tag1
          - tags2
          items:
            type: string
          type: array
        updateTs:
          example: 1487769699999
          format: int64
          type: integer
      type: object
    BusinessSettings:
      example:
        decoderName: decoderName
        serverPhoneNumber: "20259"
        msisdns:
        - msisdn: "3387654321"
        - msisdn: "3387654321"
        tenantId: "1234567489"
      properties:
        decoderName:
          type: string
        msisdns:
          items:
            $ref: '#/components/schemas/Msisdns'
          type: array
        serverPhoneNumber:
          description: platform phone number use as source of message
          example: "20259"
          type: string
        tenantId:
          description: Tenant id
          example: "1234567489"
          type: string
      required:
      - serverPhoneNumber
      - tenantId
      type: object
    AuditLogMessage:
      description: a log message that described a functionnal event
      example:
        detailedDescription: detailedDescription
        level: info
        created: 2016-08-24T10:32:52.598Z
        description: description
        source:
          connector: lora
          campaignId: campaignId
          actionPolicyId: actionPolicyId
          eventProcessingRuleId: eventProcessingRuleId
          deviceId: deviceId
          nodeId: nodeId
          gatewayId: gatewayId
          pipelineId: pipelineId
        category: connectivity
        subcategory: lora
        type: http_push_result
        content: '{}'
        timestamp: 2016-08-24T10:32:52.598Z
      properties:
        category:
          description: category of the log message.
          enum:
          - connectivity
          - data
          - device_management
          - notification
          example: connectivity
          type: string
        content:
          description: log message's specific content
          properties: {}
          type: object
        created:
          description: date of storage of the log message. ISO 8601 date time.
          example: 2016-08-24T10:32:52.598Z
          type: string
        description:
          description: high level description of the log message
          type: string
        detailedDescription:
          description: detailed description of log the message
          type: string
        level:
          description: level of the log message.
          enum:
          - info
          - error
          type: string
        source:
          $ref: '#/components/schemas/Source'
        subcategory:
          description: subcategory of the log message.
          enum:
          - lora
          - mqtt
          - sms
          - http
          - email
          - fifo
          - logs
          - pipeline
          - storage
          - event_processing
          - commands
          - firmware_upgrade
          - configuration
          - campaigns
          example: lora
          type: string
        timestamp:
          description: timestamp of the log message. ISO 8601 date time.
          example: 2016-08-24T10:32:52.598Z
          type: string
        type:
          description: specific type of the log message.
          enum:
          - http_push_result
          - logs_info
          - mqtt_debug_logs
          - lora_network
          - lora_gateway
          - indexing_result
          - contact_message_result
          - data_pipeline_status
          example: http_push_result
          type: string
      required:
      - category
      - created
      - description
      - level
      - subcategory
      - timestamp
      - type
      type: object
    Pageable«ActionPolicyV0»:
      example:
        size: 1
        data:
        - name: name
          id: id
          triggers:
            eventRuleIds:
            - eventRuleIds
            - eventRuleIds
            messageSelector:
              filter:
                connectors:
                - connectors
                - connectors
                deviceIds:
                - deviceIds
                - deviceIds
                groupPaths:
                - includeSubPath: false
                  path: /europe/france
                - includeSubPath: false
                  path: /europe/france
              origin: data_new
          actions:
            emails:
            - cc:
              - cc
              - cc
              contentTemplate: contentTemplate
              cci:
              - cci
              - cci
              subjectTemplate: subjectTemplate
              to:
              - to
              - to
            - cc:
              - cc
              - cc
              contentTemplate: contentTemplate
              cci:
              - cci
              - cci
              subjectTemplate: subjectTemplate
              to:
              - to
              - to
            azureEventHubs:
            - sharedAccessKey: sharedAccessKey
              sharedAccessKeyName: sharedAccessKeyName
              retryOnFailure: false
              jsonPath: jsonPath
              eventHubsNamespace: eventHubsNamespace
              eventHubName: eventHubName
              content: content
            - sharedAccessKey: sharedAccessKey
              sharedAccessKeyName: sharedAccessKeyName
              retryOnFailure: false
              jsonPath: jsonPath
              eventHubsNamespace: eventHubsNamespace
              eventHubName: eventHubName
              content: content
            fifoPublish:
            - fifoName: fifoName
            - fifoName: fifoName
            sms:
            - destinationPhoneNumbers:
              - destinationPhoneNumbers
              - destinationPhoneNumbers
              contentTemplate: contentTemplate
            - destinationPhoneNumbers:
              - destinationPhoneNumbers
              - destinationPhoneNumbers
              contentTemplate: contentTemplate
            httpPush:
            - headers:
                key:
                - headers
                - headers
              retryOnFailure: false
              jsonPath: jsonPath
              content: content
              webhookUrl: webhookUrl
            - headers:
                key:
                - headers
                - headers
              retryOnFailure: false
              jsonPath: jsonPath
              content: content
              webhookUrl: webhookUrl
          enabled: false
        - name: name
          id: id
          triggers:
            eventRuleIds:
            - eventRuleIds
            - eventRuleIds
            messageSelector:
              filter:
                connectors:
                - connectors
                - connectors
                deviceIds:
                - deviceIds
                - deviceIds
                groupPaths:
                - includeSubPath: false
                  path: /europe/france
                - includeSubPath: false
                  path: /europe/france
              origin: data_new
          actions:
            emails:
            - cc:
              - cc
              - cc
              contentTemplate: contentTemplate
              cci:
              - cci
              - cci
              subjectTemplate: subjectTemplate
              to:
              - to
              - to
            - cc:
              - cc
              - cc
              contentTemplate: contentTemplate
              cci:
              - cci
              - cci
              subjectTemplate: subjectTemplate
              to:
              - to
              - to
            azureEventHubs:
            - sharedAccessKey: sharedAccessKey
              sharedAccessKeyName: sharedAccessKeyName
              retryOnFailure: false
              jsonPath: jsonPath
              eventHubsNamespace: eventHubsNamespace
              eventHubName: eventHubName
              content: content
            - sharedAccessKey: sharedAccessKey
              sharedAccessKeyName: sharedAccessKeyName
              retryOnFailure: false
              jsonPath: jsonPath
              eventHubsNamespace: eventHubsNamespace
              eventHubName: eventHubName
              content: content
            fifoPublish:
            - fifoName: fifoName
            - fifoName: fifoName
            sms:
            - destinationPhoneNumbers:
              - destinationPhoneNumbers
              - destinationPhoneNumbers
              contentTemplate: contentTemplate
            - destinationPhoneNumbers:
              - destinationPhoneNumbers
              - destinationPhoneNumbers
              contentTemplate: contentTemplate
            httpPush:
            - headers:
                key:
                - headers
                - headers
              retryOnFailure: false
              jsonPath: jsonPath
              content: content
              webhookUrl: webhookUrl
            - headers:
                key:
                - headers
                - headers
              retryOnFailure: false
              jsonPath: jsonPath
              content: content
              webhookUrl: webhookUrl
          enabled: false
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/ActionPolicyV0'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    Pageable«FifoTopic»:
      example:
        size: 1
        data:
        - messageUnacknowledged: 5
          messageBytes: 1
          name: MyFIFOName
          messages: 7
          consumers: 0
          messageTtl: 5
          messageUnacknowledgedBytes: 2
          maxLengthBytes: 6
        - messageUnacknowledged: 5
          messageBytes: 1
          name: MyFIFOName
          messages: 7
          consumers: 0
          messageTtl: 5
          messageUnacknowledgedBytes: 2
          maxLengthBytes: 6
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/FifoTopic'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    AssetParameter:
      example:
        updateStatus: NONE
        targetValue:
          valueBinary:
          - valueBinary
          - valueBinary
          valueString: valueString
          valueUInt32: 1
          type: INT32
          valueFloat: 0.8008281904610115
          valueInt32: 6
        updateReqCorrelationId: 6
        updateStatusTs: 1
        value:
          valueBinary:
          - valueBinary
          - valueBinary
          valueString: valueString
          valueUInt32: 1
          type: INT32
          valueFloat: 0.8008281904610115
          valueInt32: 6
        lastKnownValueTs: 0
      properties:
        lastKnownValueTs:
          format: int64
          type: integer
        targetValue:
          $ref: '#/components/schemas/AssetParameterValue'
        updateReqCorrelationId:
          format: int32
          type: integer
        updateStatus:
          enum:
          - NONE
          - PENDING
          - SENT
          - CANCELED
          - OK
          - FAILED
          type: string
        updateStatusTs:
          format: int64
          type: integer
        value:
          $ref: '#/components/schemas/AssetParameterValue'
      type: object
    OfferAndOptions:
      example:
        offer:
          displayName: displayName
          name: name
        options: Discover
      properties:
        offer:
          $ref: '#/components/schemas/Rule'
        options:
          description: displayName
          example: Discover
          items:
            $ref: '#/components/schemas/Rule'
          type: array
      type: object
    UserCreationReqWeb:
      description: body for create a new user
      example:
        roles:
        - USER_R
        - API_KEY_R
        tenantId: 51FFFFFFFFFFFFFFFFFFFFFF
        language: language
        login: MyLoginName
        email: me.name@mycompagny.mycom
      properties:
        email:
          description: the user email. Expected a valid email (max 254 characters)
          example: me.name@mycompagny.mycom
          type: string
        language:
          description: 'user language. Expected language ISO 639-1 (example: "en",
            "fr", "sk", "ro", "es") (max 2 characters)'
          type: string
        login:
          description: the user login. If no external identity provider is used, then
            login must respect the following regular expression <code>[a-zA-Z0-9_-]{3,254}</code>
          example: MyLoginName
          type: string
        roles:
          description: list of user associated roles. Basic roles are "USER_R", "USER_W",
            "API_KEY_R", "API_KEY_W" or any role string supplied at tenant account
            creation time. Expected array of role name (max all roles, role value
            max 255 characters)
          example:
          - USER_R
          - API_KEY_R
          items:
            type: string
          type: array
        tenantId:
          description: identifier of tenant account this user will belong to. Expected
            identifier (max 24 characters)
          example: 51FFFFFFFFFFFFFFFFFFFFFF
          type: string
      required:
      - email
      - login
      - roles
      - tenantId
      type: object
    DataStoredWeb:
      description: data stored from the dataStream
      example:
        metadata:
          source: urn:tenantName:FFFFFFFFFFFFFFFF!mystream
        streamId: urn:tenantName:FFFFFFFFFFFFFFFF!mystream
        created: 2016-08-25T00:00:00.008Z
        extra:
          country: france
          city: lyon
          owner: john.doe@company.com
        location:
          provider: GPS
          alt: 5.00001
          accuracy: 10.0
          lon: -30.00001
          lat: 45.000009
        model: MyModelSettingName
        id: id
        value:
          hexaFlag001: 2F00
          temp: 22.0
          pressure: 36575.0
        tags:
        - Motor
        - Engine
        timestamp: 2016-08-24T10:32:52.598Z
      properties:
        created:
          description: ISO 8601 date time, when the data has been stored in the system
          example: 2016-08-25T00:00:00.008Z
          type: string
        extra:
          additionalProperties:
            type: string
          description: 'Extra info of the data: extra information enriched on the
            collected data (for example from the device inventory) that can be used
            for cross model or stream queries'
          example:
            country: france
            city: lyon
            owner: john.doe@company.com
          type: object
        id:
          description: System id of the data. Can be use as bookmark to paginate results.
          type: string
        location:
          $ref: '#/components/schemas/Location'
        metadata:
          description: 'Metadata of the stored value : may include user metadata (source)
            as well as additional information (protocol, server, user...)'
          example:
            source: urn:tenantName:FFFFFFFFFFFFFFFF!mystream
          properties: {}
          type: object
        model:
          description: Model of the injected data. Data with the same model have coherent
            types in each value fields.
          example: MyModelSettingName
          type: string
        streamId:
          description: streamId of the data
          example: urn:tenantName:FFFFFFFFFFFFFFFF!mystream
          type: string
        tags:
          description: Tags of the data. Can be used to ease up advanced search through
            all streams and models
          example:
          - Motor
          - Engine
          items:
            type: string
          type: array
        timestamp:
          description: ISO 8601 date time, timestamp of the value
          example: 2016-08-24T10:32:52.598Z
          type: string
        value:
          description: JsonObject
          example:
            hexaFlag001: 2F00
            temp: 22.0
            pressure: 36575.0
          properties: {}
          type: object
      required:
      - created
      - id
      - timestamp
      - value
      type: object
    DeviceSelector:
      example:
        idList:
        - urn:lo:nsid:myNamespace:myDeviceId
        filterQuery: tag=in=(FUT,TEST1)
      properties:
        filterQuery:
          description: Filtering expression using RSQL notation. Supported device
            properties are 'groupPath', 'groupId', 'tags', 'properties'. Supported
            RSQL operators are '==','!=','=in=','=out=','=re=','=lt=','=le=','=gt=','=ge=','and','or'
          example: tag=in=(FUT,TEST1)
          type: string
        idList:
          description: List of device IDs in the form urn:lo:nsid:${assetNamespace}:${assetId}
          example:
          - urn:lo:nsid:myNamespace:myDeviceId
          items:
            type: string
          type: array
      type: object
    PayloadDescription:
      description: 'decoder provisioning information '
      example:
        template: template
        metadata:
          certified: false
          certifiedSince: 2019-05-15T07:55:55.555Z
        model: model
        id: id
        encoding: encoding
        type: type
        updated: 2019-05-15T07:55:55.555Z
        enabled: false
        mathEvalEnabled: false
        tags:
        - tags
        - tags
      properties:
        enabled:
          description: decoder activation. Default is false.
          example: false
          type: boolean
        encoding:
          description: unique decoder name. Will be used to trigger the decoding function
          type: string
        id:
          description: id of the decoder. Should be null when used for POST. Required
            for update.
          type: string
        mathEvalEnabled:
          description: applying math evaluation on templated decoded result
          example: false
          type: boolean
        metadata:
          $ref: '#/components/schemas/PayloadDescriptionMetadata'
        model:
          description: if empty, the decoded data will use the value of 'model' field
            from encoded data. If set, this value will be used to override 'model'
            field in decoded data.
          type: string
        tags:
          description: tags used for filtering
          items:
            type: string
          type: array
        template:
          description: decoding result optional template
          type: string
        type:
          description: 'decoder type : csv, binary, javascript'
          type: string
        updated:
          description: date of the last update. ISO 8601 date time.
          example: 2019-05-15T07:55:55.555Z
          readOnly: true
          type: string
      required:
      - enabled
      - encoding
      type: object
    PartnerToken:
      example:
        access_token: fFAGRNJru1FTz70BzhT3Zg
        token_type: Bearer
        expires_in: 7776000
      properties:
        access_token:
          description: The token that your application sends to authorize a Live Objects
            API request.
          example: fFAGRNJru1FTz70BzhT3Zg
          type: string
        expires_in:
          description: The remaining lifetime of the access token in seconds.
          example: 7776000
          format: int64
          type: integer
        token_type:
          description: The type of token returned
          example: Bearer
          type: string
      type: object
    DeviceActivityFilter:
      example:
        deviceIds:
        - deviceIds
        - deviceIds
        ruleIds:
        - ruleIds
        - ruleIds
      properties:
        deviceIds:
          description: list of filtered devices. Null or empty to accept all devices
          items:
            type: string
          type: array
        ruleIds:
          description: list of filtered rule Ids. Null or empty to accept all rule
            Ids
          items:
            type: string
          type: array
      type: object
    SMSAction:
      example:
        destinationPhoneNumbers:
        - destinationPhoneNumbers
        - destinationPhoneNumbers
        contentTemplate: contentTemplate
      properties:
        contentTemplate:
          description: A raw string or a mustache (https://mustache.github.io/mustache.5.html)
            template describing the sms content
          type: string
        destinationPhoneNumbers:
          description: A list of valid msisdn
          items:
            type: string
          type: array
      required:
      - contentTemplate
      - destinationPhoneNumbers
      type: object
    SimpleStringWeb:
      example:
        content: content
      properties:
        content:
          type: string
      type: object
    Pageable«LoraDevice»:
      example:
        size: 1
        data:
        - lastDlFcnt: 42
          lastCommunicationTs: 2016-06-16T15:55:36.944Z
          profile: Generic_classA_RX2SF9
          lastDeactivationTs: 2016-06-09T07:26:42.321Z
          encoding: Encoding_devB_142_X
          lastActivationTs: 2016-06-09T08:04:37.971Z
          lastBatteryLevel: 127
          lastSignalLevel: 3
          devEUI: 0123456789ABCDEF
          deviceStatus: ACTIVATED
          tags:
          - Lyon
          - temperature
          activationType: OTAA
          lastUlFcnt: 42
          name: My LoRa Device
          location:
            provider: TDOA
            lastUpdateTs: 2016-06-14T11:09:22.125Z
            alt: 50.0
            accuracy: 100.0
            lon: 7.44464
            lat: 10.11212
          appEUI: FEDCBA9876543210
          connectivityOptions:
            tdoa: false
            ackUl: false
          updateTs: 2016-06-09T08:04:37.971Z
          connectivityPlan: orange-cs/loraconnect_basique
          creationTs: 2016-06-03T15:55:36.944Z
        - lastDlFcnt: 42
          lastCommunicationTs: 2016-06-16T15:55:36.944Z
          profile: Generic_classA_RX2SF9
          lastDeactivationTs: 2016-06-09T07:26:42.321Z
          encoding: Encoding_devB_142_X
          lastActivationTs: 2016-06-09T08:04:37.971Z
          lastBatteryLevel: 127
          lastSignalLevel: 3
          devEUI: 0123456789ABCDEF
          deviceStatus: ACTIVATED
          tags:
          - Lyon
          - temperature
          activationType: OTAA
          lastUlFcnt: 42
          name: My LoRa Device
          location:
            provider: TDOA
            lastUpdateTs: 2016-06-14T11:09:22.125Z
            alt: 50.0
            accuracy: 100.0
            lon: 7.44464
            lat: 10.11212
          appEUI: FEDCBA9876543210
          connectivityOptions:
            tdoa: false
            ackUl: false
          updateTs: 2016-06-09T08:04:37.971Z
          connectivityPlan: orange-cs/loraconnect_basique
          creationTs: 2016-06-03T15:55:36.944Z
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/LoraDevice'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    LoraDeviceCreateReqWeb:
      example:
        activationType: OTAA
        profile: Generic_classA_RX2SF9
        name: My LoRa Device
        appKey: 9876543210ABCDEF
        appEUI: FEDCBA9876543210
        encoding: LoRaMote_V1
        connectivityOptions:
          tdoa: true
          ackUl: true
        devEUI: 0123456789ABCDEF
        connectivityPlan: orange-cs/loraconnect_basique
        deviceStatus: ACTIVATED
        tags:
        - Lyon
        - temperature
      properties:
        activationType:
          description: LoRa device activation type
          enum:
          - ABP
          - OTAA
          example: OTAA
          type: string
        appEUI:
          description: Application identifier (AppEUI)
          example: FEDCBA9876543210
          type: string
        appKey:
          description: Application Key (AppKey)
          example: 9876543210ABCDEF
          type: string
        connectivityOptions:
          $ref: '#/components/schemas/LoraConnectivityOptionsWeb'
        connectivityPlan:
          description: Device connectivity plan.
          example: orange-cs/loraconnect_basique
          type: string
        devEUI:
          description: LoRa End-device identifier (DevEUI)
          example: 0123456789ABCDEF
          type: string
        deviceStatus:
          description: LoraDeviceUpdateReqWeb status
          enum:
          - ACTIVATED
          - DEACTIVATED
          example: ACTIVATED
          type: string
        encoding:
          description: LoRa device encoding
          example: LoRaMote_V1
          type: string
        name:
          description: LoRa device name
          example: My LoRa Device
          type: string
        profile:
          description: LoRa device profile
          example: Generic_classA_RX2SF9
          type: string
        tags:
          description: List of tags, used to tag uplink from this device
          example:
          - Lyon
          - temperature
          items:
            type: string
          type: array
      required:
      - activationType
      - appEUI
      - appKey
      - devEUI
      - deviceStatus
      - name
      - profile
      type: object
    Command:
      example:
        request:
          connector: mqtt
          value:
            req: reboot
            arg:
              delay: 1000.0
        targetDeviceId: urn:lo:nsid:sensor:2327398
        response:
          value:
            success: true
        created: 2017-12-06T11:32:25.055Z
        errorCode: INVALID_COMMAND_REQUEST
        notifyTo: fifo/commandNotif
        id: ae49129f-9ce4-4782-82c4c6a2
        history:
        - timestamp: 2017-12-06T11:38:22.481Z
          status: PROCESSING
          deliveryStatus: SENT
          nodeId: "2327398"
        updated: 2017-12-06T11:32:25.055Z
        deliveryStatus: SENT
        status: PROCESSING
        policy:
          ackTimeoutInSeconds: 120
          expirationInSeconds: 120
          ackMode: APPLICATIVE
          attempts: 3
      properties:
        id:
          description: command unique identifier
          example: ae49129f-9ce4-4782-82c4c6a2
          type: string
        targetDeviceId:
          description: targeted device identifier (URN)
          example: urn:lo:nsid:sensor:2327398
          type: string
        request:
          $ref: '#/components/schemas/CommandRequest'
        response:
          $ref: '#/components/schemas/CommandResponse'
        status:
          description: command current status
          enum:
          - PENDING
          - PROCESSING
          - RETRYING
          - EXPIRED
          - PROCESSED
          - CANCELED
          - ERROR
          - UNKNOWN
          example: PROCESSING
          type: string
        deliveryStatus:
          description: command current delivery status
          enum:
          - SENDING
          - SENT
          - DELIVERED
          - REPLIED
          example: SENT
          type: string
        errorCode:
          description: error code in case of ERROR status
          example: INVALID_COMMAND_REQUEST
          type: string
        policy:
          $ref: '#/components/schemas/CommandPolicy'
        history:
          description: command history
          example:
          - timestamp: 2017-12-06T11:38:22.481Z
            status: PROCESSING
            deliveryStatus: SENT
            nodeId: "2327398"
          items:
            $ref: '#/components/schemas/CommandHistory'
          type: array
        notifyTo:
          description: topic where command status change notification are published
          example: fifo/commandNotif
          type: string
        created:
          description: command creation date/time
          example: 2017-12-06T11:32:25.055Z
          type: string
        updated:
          description: command last status update date/time
          example: 2017-12-06T11:32:25.055Z
          type: string
      type: object
    ExternalIdentity:
      description: user's external identity
      example:
        provider: provider
        id: id
        login: login
      properties:
        id:
          description: external identity identifier
          type: string
        login:
          description: external identity login
          type: string
        provider:
          description: external identity provider
          type: string
      type: object
    MatchingRule:
      description: defines the dataPredicate that will be applied to all new data.
        When it matches, then it may trigger a FiredEvent based on linked FiringRules
        defined.
      example:
        dataPredicate: '{}'
        name: name
        id: id
        enabled: false
      properties:
        dataPredicate:
          description: the JsonLogic (http://jsonlogic.com/) pattern matching that
            will trigger an event for each new data that match this predicate. This
            JsonLogic predicate needs to return a boolean.
          properties: {}
          type: object
        enabled:
          description: activate or not the MatchingRule. Default is false.
          example: false
          type: boolean
        id:
          description: id of the MatchingRule. Should be null when used for POST.
          type: string
        name:
          description: name of the MatchingRule. Must be unique.
          type: string
      required:
      - name
      type: object
    Location:
      description: geographic location
      example:
        provider: GPS
        alt: 5.00001
        accuracy: 10.0
        lon: -30.00001
        lat: 45.000009
      properties:
        accuracy:
          description: Accuracy value
          example: 10.0
          format: double
          type: number
        alt:
          description: Altitude value
          example: 5.00001
          format: double
          type: number
        lat:
          description: Latitude value
          example: 45.000009
          format: double
          type: number
        lon:
          description: Longitude value
          example: -30.00001
          format: double
          type: number
        provider:
          description: Provider of the location
          example: GPS
          type: string
      required:
      - lat
      - lon
      type: object
    ResourceUpdateReqWeb:
      description: body of resource update request
      example:
        versionAliases:
          prod: "1.1"
        metadata:
          secured: true
        connector: connector
        description: It the last provided resource
        label: My resource Label
      properties:
        connector:
          description: the resource's connector. A connector must respect the following
            regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)
          type: string
        description:
          description: the resource's description. Expected string (max 255 characters)
          example: It the last provided resource
          type: string
        label:
          description: the resource's label. Expected string (max 255 characters)
          example: My resource Label
          type: string
        metadata:
          additionalProperties:
            type: string
          description: the operation metadata. Max number of metadata is 100. Metadata
            name max length is 255. Metadata value max length is 255.
          example:
            secured: true
          type: object
        versionAliases:
          additionalProperties:
            type: string
          description: the resource version aliases. Max number of alias is 5. Alias
            name max length is 128. Alias value max length is 255.
          example:
            prod: "1.1"
          type: object
      required:
      - connector
      - label
      type: object
    Pageable«Campaign»:
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/Campaign'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    AssetCreateReqWeb:
      example:
        groupId: "123456"
        name: 'geo tracker #123'
        namespace: imei
        description: description
        id: "490154203237518"
        groupPath: /france/lyon
        properties:
          manufacturer: MyDeviceMaker, Inc.
          hwVersion: 2.0.1.7-us_64
        tags:
        - sensor
        - moisture
      properties:
        description:
          description: user-readable description of the asset. Expected string (max
            500 characters)
          type: string
        groupId:
          description: associate the asset to a group using the group id. Expected
            string (max 6 characters)
          example: "123456"
          type: string
        groupPath:
          description: 'associate the asset to a group using the group path. Authorized:
            letter (lowercase and uppercase), accented characters, number, space,
            dash, underscore and simple quote. A valid path must respect the following
            regular expression <code>^[\wÀ-ÖØ-öø-ÿ'' -]{1,255}</code>.Expected string
            (max 255 characters)'
          example: /france/lyon
          type: string
        id:
          description: asset identifier value. Asset identifier must respect the following
            regular expression <code>([\w\-_:]{1,128})</code> (max 128 characters)
          example: "490154203237518"
          type: string
        name:
          description: asset user-readable name (for display in web portal).Expected
            string (max 255 characters)
          example: 'geo tracker #123'
          type: string
        namespace:
          description: asset identifier namespace. Asset namespace must respect the
            following regular expression <code>([\w\-_]{1,128})</code> (max 128 characters)
          example: imei
          type: string
        properties:
          additionalProperties:
            type: string
          description: 'map of key/value string pairs detailed properties of the device.
            Max number of properties depends of your offer settings. A property name
            must not include following characters <code>$.</code> and max length is
            128. Invalid property names are : ''class'', ''_class''. Property value
            max length is 256.'
          example:
            manufacturer: MyDeviceMaker, Inc.
            hwVersion: 2.0.1.7-us_64
          type: object
        tags:
          description: series of tags associated with the asset. Max number of tags
            depends of your offer settings. Tag value max length is 32.
          example:
          - sensor
          - moisture
          items:
            type: string
          type: array
      required:
      - id
      - namespace
      type: object
    StateProcessingFunctionTestResult:
      example:
        stateFunctionValid: true
        stateFunctionResult: '{}'
        dataValid: true
      properties:
        dataValid:
          type: boolean
        stateFunctionResult:
          properties: {}
          type: object
        stateFunctionValid:
          type: boolean
      type: object
    GroupUpdateRequest:
      example:
        pathNode: france
        description: description
        id: "123456"
        parentId: "123456"
      properties:
        description:
          description: group description. Expected string (max 255 characters)
          type: string
        id:
          description: group id. Expected string (max 6 characters)
          example: "123456"
          type: string
        parentId:
          description: reference to group's parent (id). Expected string (max 6 characters)
          example: "123456"
          type: string
        pathNode:
          description: 'group''s local id in path (unique for groups in same parent).Authorized:
            letter (lowercase and uppercase), accented characters, number, space,
            dash, underscore and simple quote. A valid path must respect the following
            regular expression <code>^[\wÀ-ÖØ-öø-ÿ'' -]{1,255}</code>.Expected string
            (max 255 characters)'
          example: france
          type: string
      required:
      - pathNode
      type: object
    DeviceParameterValueWeb:
      example:
        type: INT32
        value: '{}'
        timestamp: timestamp
      properties:
        type:
          description: configuration parameter value type (INT32, UINT32, FLOAT, STRING
            or BINARY)
          enum:
          - INT32
          - UINT32
          - BINARY
          - STRING
          - FLOAT
          - UNKNOWN
          type: string
        value:
          description: 'configuration parameter value (number for INT32/UINT32 type,
            string for STRING type,float for FLOAT type, base64-encoded string for
            BINARY type) '
          properties: {}
          type: object
        timestamp:
          description: configuration parameter value associated date/time (ISO 8601)
          type: string
      type: object
    OAuth2ErrorWeb:
      description: OAuth error response
      properties:
        error:
          description: Error value
          type: string
        error_description:
          description: Error description
          type: string
      type: object
    SendMessageRequest:
      description: Message to send
      example:
        contact:
          cc:
          - cc
          - cc
          cci:
          - cci
          - cci
          to:
          - to
          - to
          phoneNumbers:
          - phoneNumbers
          - phoneNumbers
        message:
          key: message
      properties:
        contact:
          $ref: '#/components/schemas/ContactMessage'
        message:
          additionalProperties:
            type: string
          description: message
          type: object
      required:
      - contact
      - message
      type: object
    PayloadDescriptionTestResult:
      example:
        decodingResult: '{}'
        descriptionValid: true
        templatingOK: true
        decodingFailureReason: decodingFailureReason
        parsingOk: true
      properties:
        decodingFailureReason:
          type: string
        decodingResult:
          properties: {}
          type: object
        descriptionValid:
          type: boolean
        parsingOk:
          type: boolean
        templatingOK:
          type: boolean
      type: object
    UpdateDeviceResourceReqWeb:
      description: a resource update request
      example:
        metadata:
          secured: true
        version: 1.2.0
      properties:
        metadata:
          additionalProperties:
            type: string
          description: the update metadata. Max number of metadata is 100. Metadata
            name max length is 255. Metadata value max length is 255.
          example:
            secured: true
          type: object
        version:
          description: requested resource version. Expected string (max 255 characters)
          example: 1.2.0
          type: string
      type: object
    SettingsSection:
      example:
        version: version
        content: '{}'
        revision: 1
      properties:
        content:
          properties: {}
          type: object
        revision:
          format: int32
          type: integer
        version:
          type: string
      type: object
    CommandV0:
      example:
        reqData:
          key: reqData
        resPayload:
        - resPayload
        - resPayload
        assetIdNamespace: assetIdNamespace
        assetId: assetId
        notifyTo: notifyTo
        id: id
        reqPayload:
        - reqPayload
        - reqPayload
        updateTs: 6
        reqEvent: reqEvent
        resData:
          key: resData
        creationTs: 0
        status: PENDING
      properties:
        assetId:
          type: string
        assetIdNamespace:
          type: string
        creationTs:
          format: int64
          type: integer
        id:
          type: string
        notifyTo:
          type: string
        reqData:
          additionalProperties:
            type: string
          type: object
        reqEvent:
          type: string
        reqPayload:
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        resData:
          additionalProperties:
            type: string
          type: object
        resPayload:
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        status:
          enum:
          - PENDING
          - SENT
          - PROCESSED
          - CANCELED
          - ERROR
          - UNKNOWN
          type: string
        updateTs:
          format: int64
          type: integer
      type: object
    FiringGuardGetRequest:
      example:
        selectionCriteria:
        - keyPath: keyPath
          value: '{}'
        - keyPath: keyPath
          value: '{}'
        firingRuleId: firingRuleId
      properties:
        firingRuleId:
          description: firingRuleId linked to the FiringGuard to reset
          type: string
        selectionCriteria:
          description: criteria that should match the FiringGuard to reset
          items:
            $ref: '#/components/schemas/SelectionCriteria'
          type: array
      required:
      - firingRuleId
      type: object
    Asset:
      example:
        metadata: '{}'
        topicResourceUpdate: topicResourceUpdate
        groupId: groupId
        description: Moisture sensor
        tags:
        - sensor
        - moisture
        connected: false
        topicParamUpdate: topicParamUpdate
        path:
        - namespace: namespace
          id: id
        - namespace: namespace
          id: id
        topicCommand: topicCommand
        lastUpdateTs: 6
        name: Pretty moisture sensor
        namespace: namespace
        id: id
        groupPath: groupPath
        properties:
          key: properties
        creationTs: 0
      properties:
        connected:
          description: True if asset is considered connected
          example: false
          type: boolean
        creationTs:
          description: Date/time when asset was first registered
          format: int64
          type: integer
        description:
          description: device description
          example: Moisture sensor
          type: string
        groupId:
          description: Group Id where this asset is localize
          type: string
        groupPath:
          description: Group path where this asset is localize
          type: string
        id:
          description: Asset identifier
          type: string
        lastUpdateTs:
          description: Date/time when asset status has been lastly updated
          format: int64
          type: integer
        metadata:
          description: Additional asset info (from last device "connected" event)
          properties: {}
          type: object
        name:
          description: human readable name
          example: Pretty moisture sensor
          type: string
        namespace:
          description: Asset identifier namespace
          type: string
        path:
          description: 'Last path taken by a received message describing the asset
            status(i.e. connected/disconnected): the series of assets that forwarded
            the message.'
          items:
            $ref: '#/components/schemas/AssetAlias'
          type: array
        properties:
          additionalProperties:
            type: string
          description: Static asset properties (from device provisioning
          type: object
        tags:
          description: Device tags
          example:
          - sensor
          - moisture
          items:
            type: string
          type: array
        topicCommand:
          description: Topic where generic commands can be sent to asset (if asset
            is still connected)
          type: string
        topicParamUpdate:
          description: Topic where param update requests can be sent to asset (if
            asset is still connected)
          type: string
        topicResourceUpdate:
          description: Topic where resource update requests can be sent to asset (if
            asset is still connected)
          type: string
      required:
      - connected
      - creationTs
      - id
      - namespace
      type: object
    Pageable«FifoBinding»:
      example:
        size: 1
        data:
        - routingKeyFilter: liveobjects.*.examples
          destFifoName: fifoName
        - routingKeyFilter: liveobjects.*.examples
          destFifoName: fifoName
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/FifoBinding'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    OptionPartnerTenant:
      example:
        id: Device_Quota_OFR_6M
        parameters: '{"device: 10", "downlink: 200"}'
      properties:
        id:
          description: option identifier
          example: Device_Quota_OFR_6M
          type: string
        parameters:
          additionalProperties:
            format: int32
            type: integer
          description: Parameters
          example: '{"device: 10", "downlink: 200"}'
          type: object
      required:
      - id
      type: object
    Map«string,ConnectorStatistics»:
      additionalProperties:
        $ref: '#/components/schemas/ConnectorStatistics'
      type: object
    Actions:
      example:
        emails:
        - cc:
          - cc
          - cc
          contentTemplate: contentTemplate
          cci:
          - cci
          - cci
          subjectTemplate: subjectTemplate
          to:
          - to
          - to
        - cc:
          - cc
          - cc
          contentTemplate: contentTemplate
          cci:
          - cci
          - cci
          subjectTemplate: subjectTemplate
          to:
          - to
          - to
        azureEventHubs:
        - sharedAccessKey: sharedAccessKey
          sharedAccessKeyName: sharedAccessKeyName
          retryOnFailure: false
          jsonPath: jsonPath
          eventHubsNamespace: eventHubsNamespace
          eventHubName: eventHubName
          content: content
        - sharedAccessKey: sharedAccessKey
          sharedAccessKeyName: sharedAccessKeyName
          retryOnFailure: false
          jsonPath: jsonPath
          eventHubsNamespace: eventHubsNamespace
          eventHubName: eventHubName
          content: content
        fifoPublish:
        - fifoName: fifoName
        - fifoName: fifoName
        sms:
        - destinationPhoneNumbers:
          - destinationPhoneNumbers
          - destinationPhoneNumbers
          contentTemplate: contentTemplate
        - destinationPhoneNumbers:
          - destinationPhoneNumbers
          - destinationPhoneNumbers
          contentTemplate: contentTemplate
        httpPush:
        - headers:
            key:
            - headers
            - headers
          retryOnFailure: false
          jsonPath: jsonPath
          content: content
          webhookUrl: webhookUrl
        - headers:
            key:
            - headers
            - headers
          retryOnFailure: false
          jsonPath: jsonPath
          content: content
          webhookUrl: webhookUrl
      properties:
        azureEventHubs:
          description: A collection of Azure Event Hubs actions
          items:
            $ref: '#/components/schemas/AzureEventHubsAction'
          type: array
        emails:
          description: A collection of email actions
          items:
            $ref: '#/components/schemas/EmailAction'
          type: array
        fifoPublish:
          description: A collection of fifo publish actions
          items:
            $ref: '#/components/schemas/FifoPublishAction'
          type: array
        httpPush:
          description: A collection of webhook actions
          items:
            $ref: '#/components/schemas/HttpPushAction'
          type: array
        sms:
          description: A collection of sms actions
          items:
            $ref: '#/components/schemas/SMSAction'
          type: array
      type: object
    CampaignDefinition:
      example:
        planning:
          endDate: endDate
          startDate: startDate
        operations:
        - action: resource
          definition:
            resourceId: resourceId
            targetVersion: v2
            maxRetry: 1.0
            metadata:
              secured: true
        - action: configure
          definition:
            assetParameters:
              param1:
                type: INT32
                valueInt32: 123.0
            maxRetry: 1.0
        - action: command
          definition:
            event: reset
            data:
              delay: "5000"
            maxRetry: 1.0
        - action: command
          version: 1.0
          definition:
            request:
              connector: mqtt
              value:
                foo: bar
            validation: true
            policy:
              expirationInSeconds: 200.0
              ackMode: APPLICATIVE
            maxRetry: 1.0
        name: My Campaign
        options:
          dynamicallyAddEligibleDevice: true
        description: A campaign that configures parameters, sends command or updates
          a resource
        targets:
          idList:
          - urn:lo:nsid:myNamespace:myDeviceId
          filterQuery: tag=in=(FUT,TEST1)
      properties:
        description:
          description: Campaign description
          example: A campaign that configures parameters, sends command or updates
            a resource
          type: string
        name:
          description: Campaign name
          example: My Campaign
          type: string
        operations:
          description: List of operations to be executed
          example:
          - action: resource
            definition:
              resourceId: resourceId
              targetVersion: v2
              maxRetry: 1.0
              metadata:
                secured: true
          - action: configure
            definition:
              assetParameters:
                param1:
                  type: INT32
                  valueInt32: 123.0
              maxRetry: 1.0
          - action: command
            definition:
              event: reset
              data:
                delay: "5000"
              maxRetry: 1.0
          - action: command
            version: 1.0
            definition:
              request:
                connector: mqtt
                value:
                  foo: bar
              validation: true
              policy:
                expirationInSeconds: 200.0
                ackMode: APPLICATIVE
              maxRetry: 1.0
          items:
            $ref: '#/components/schemas/CampaignOperation'
          type: array
        options:
          $ref: '#/components/schemas/CampaignOptions'
        planning:
          $ref: '#/components/schemas/CampaignPlanning'
        targets:
          $ref: '#/components/schemas/DeviceSelector'
      required:
      - name
      - operations
      - planning
      - targets
      type: object
    DeviceConfigWeb:
      example:
        notifyTo: notifyTo
        parameters:
          key:
            requested:
              type: INT32
              value: '{}'
              timestamp: timestamp
            reported:
              type: INT32
              value: '{}'
              timestamp: timestamp
            syncStatus: OK
      properties:
        parameters:
          additionalProperties:
            $ref: '#/components/schemas/DeviceParameterWeb'
          description: device configuration
          type: object
        notifyTo:
          description: topic where configuration change/sync events must be published
            to
          type: string
      type: object
    ContextContainer:
      description: 'Hold tenant context data that can be used inside matching rules
        and state processing functions '
      example:
        contextKey: contextKey
        contextData: '{}'
        tags:
        - tags
        - tags
      properties:
        contextData:
          description: context data.
          properties: {}
          type: object
        contextKey:
          description: key for accessing context data. Should be null when used for
            PUT.
          type: string
        tags:
          description: optional tags list for free use
          items:
            type: string
          type: array
      required:
      - contextData
      type: object
    LoraDeviceLocation:
      example:
        provider: TDOA
        lastUpdateTs: 2016-06-14T11:09:22.125Z
        alt: 50.0
        accuracy: 100.0
        lon: 7.44464
        lat: 10.11212
      properties:
        accuracy:
          description: Last global geolocation tolerance (meter)
          example: 100.0
          format: double
          readOnly: true
          type: number
        alt:
          description: Last geolocation altitude (meter)
          example: 50.0
          format: double
          readOnly: true
          type: number
        lastUpdateTs:
          description: Date/time of the last location
          example: 2016-06-14T11:09:22.125Z
          readOnly: true
          type: string
        lat:
          description: Last geolocation latitude (GPS coordinate system)
          example: 10.11212
          format: double
          readOnly: true
          type: number
        lon:
          description: Last geolocation longitude (GPS coordinate system)
          example: 7.44464
          format: double
          readOnly: true
          type: number
        provider:
          description: Computing geolocation method
          enum:
          - lora-tdoa
          - lora-macro
          example: TDOA
          readOnly: true
          type: string
      type: object
    DeviceParameterValue:
      properties:
        type:
          description: configuration parameter value type (INT32, UINT32, FLOAT, STRING
            or BINARY)
          enum:
          - INT32
          - UINT32
          - BINARY
          - STRING
          - FLOAT
          - UNKNOWN
          type: string
        value:
          description: 'configuration parameter value (number for INT32/UINT32 type,
            string for STRING type,float for FLOAT type, base64-encoded string for
            BINARY type) '
          properties: {}
          type: object
        timestamp:
          description: configuration parameter value associated date/time (ISO 8601)
          type: string
      type: object
    EmailAction:
      example:
        cc:
        - cc
        - cc
        contentTemplate: contentTemplate
        cci:
        - cci
        - cci
        subjectTemplate: subjectTemplate
        to:
        - to
        - to
      properties:
        cc:
          items:
            type: string
          type: array
        cci:
          items:
            type: string
          type: array
        contentTemplate:
          description: A raw string or a mustache (https://mustache.github.io/mustache.5.html)
            template describing the email content
          type: string
        subjectTemplate:
          description: A raw string or a mustache (https://mustache.github.io/mustache.5.html)
            template describing the email subject
          type: string
        to:
          items:
            type: string
          type: array
      required:
      - contentTemplate
      - subjectTemplate
      - to
      type: object
    Rule:
      example:
        displayName: displayName
        name: name
      properties:
        displayName:
          type: string
        name:
          type: string
      type: object
    DeferredListenableFutureResult«string,string»:
      example:
        result: '{}'
        setOrExpired: true
      properties:
        result:
          properties: {}
          type: object
        setOrExpired:
          type: boolean
      type: object
    LoraCommandWeb:
      example:
        data: 51285624ab5d
        port: 1
        confirmed: true
      properties:
        confirmed:
          description: Network ack confirmation
          example: true
          type: boolean
        data:
          description: Hexadecimal raw data of the command
          example: 51285624ab5d
          type: string
        port:
          description: Port of the device on which the command was sent (cf. LoRaWan)
          example: 1
          format: int32
          type: integer
      required:
      - confirmed
      - data
      - port
      type: object
    DeviceCreatedTrigger:
      example:
        filter:
          connectors:
          - connectors
          - connectors
          groupPaths:
          - includeSubPath: false
            path: /europe/france
          - includeSubPath: false
            path: /europe/france
          tags:
          - - ALERT
        version: 5
      properties:
        filter:
          $ref: '#/components/schemas/DeviceCreatedFilter'
        version:
          description: requested object version
          enum:
          - 1
          format: int32
          type: integer
      required:
      - version
      type: object
    ApiKey:
      example:
        actingTenantId: 57FFFFFFFFFFFFFFFFFFFFFF
        masterKey: true
        roles:
        - USER_R
        - APIKEY_R
        description: My description of Api Key target
        usurpedKey: true
        expired: true
        scope:
          fifos:
          - default
          - supplierA
        from: 1473078900000
        id: 52FFCAFEDECAFFFFFFFFFFF
        value: e45ffc0d97c64cd6b959436f9200d5d1
        creationTs: 1473078982518
        clientCert:
          caCertIds:
          - 5b057d0fb8605a5e80758e42
          required: true
        rateLimit:
          mqttDeviceWindowSize: 1
          mqttDeviceMaxMessages: 1
          httpWindowSize: 1
          httpMaxCalls: 1
          mqttBridgeMaxMessages: 1
          mqttBridgeWindowSize: 1
        sessionKey: true
        active: true
        label: My Api Key Name
        debugModeEndTs: 1475224200000
        nonce: 875fd664f97540f0ad9ec2f889a40ce9
        userId: 57FFFFFFFFFFFFFFFFFFFFFF
        parentId: 57FFFFFFFFFFFFFFFFFFFFFF
        tenantId: 57FFFFFFFFFFFFFFFFFFFFFF
        actingUserId: 57FFFFFFFFFFFFFFFFFFFFFF
        lastActivity: 1473078982518
        sessionTTL: 144410
        to: 1475224200000
      properties:
        actingTenantId:
          description: identifier of real tenant in case of identity usurpation
          example: 57FFFFFFFFFFFFFFFFFFFFFF
          type: string
        actingUserId:
          description: identifier of real user in case of identity usurpation
          example: 57FFFFFFFFFFFFFFFFFFFFFF
          type: string
        active:
          description: Switch to activate/deactivate the API Key
          example: true
          type: boolean
        clientCert:
          $ref: '#/components/schemas/ClientCertificatesConfiguration'
        creationTs:
          description: Date/time of creation (in ms)
          example: 1473078982518
          format: int64
          type: integer
        debugModeEndTs:
          description: Timestamp indicating the end date for the debug mode
          example: 1475224200000
          format: int64
          type: integer
        description:
          description: Short description of the key
          example: My description of Api Key target
          type: string
        expired:
          type: boolean
        from:
          description: Date/time of start of validity (in ms)
          example: 1473078900000
          format: int64
          type: integer
        id:
          description: API key unique identifier, randomly generated at creation
          example: 52FFCAFEDECAFFFFFFFFFFF
          type: string
        label:
          description: Title of the key
          example: My Api Key Name
          type: string
        lastActivity:
          description: Date/time of last activity (in ms)
          example: 1473078982518
          format: int64
          type: integer
        masterKey:
          type: boolean
        nonce:
          description: Nonce
          example: 875fd664f97540f0ad9ec2f889a40ce9
          type: string
        parentId:
          description: identifier of the parent API key, can be null if API key is
            a master API key
          example: 57FFFFFFFFFFFFFFFFFFFFFF
          type: string
        rateLimit:
          $ref: '#/components/schemas/RateLimit'
        roles:
          description: list of API key associated roles.
          example:
          - USER_R
          - APIKEY_R
          items:
            type: string
          type: array
        scope:
          $ref: '#/components/schemas/ScopeApplication'
        sessionKey:
          type: boolean
        sessionTTL:
          description: Duration of validity since the last activity (in ms)
          example: 144410
          format: int64
          type: integer
        tenantId:
          description: identifier of tenant account this API key belongs to
          example: 57FFFFFFFFFFFFFFFFFFFFFF
          type: string
        to:
          description: ' Date/time of end of validity (in ms)'
          example: 1475224200000
          format: int64
          type: integer
        userId:
          description: identifier of the user account this API key belongs to (or
            null if not a user session API key)
          example: 57FFFFFFFFFFFFFFFFFFFFFF
          type: string
        usurpedKey:
          type: boolean
        value:
          description: API key value (= the secret!)
          example: e45ffc0d97c64cd6b959436f9200d5d1
          type: string
      required:
      - roles
      type: object
    CampaignUpdating:
      example:
        planning:
          endDate: endDate
          startDate: startDate
        operations:
        - action: command
          definition:
            event: reboot
        name: My Campaign
        options:
          dynamicallyAddEligibleDevice: true
        description: An updated campaign
        targets:
          idList:
          - urn:lo:nsid:myNamespace:myDeviceId
          filterQuery: tag=in=(FUT,TEST1)
      properties:
        description:
          description: Campaign description
          example: An updated campaign
          type: string
        name:
          description: Campaign name
          example: My Campaign
          type: string
        operations:
          description: List of operations to be executed
          example:
          - action: command
            definition:
              event: reboot
          items:
            $ref: '#/components/schemas/CampaignOperation'
          type: array
        options:
          $ref: '#/components/schemas/CampaignOptions'
        planning:
          $ref: '#/components/schemas/CampaignPlanning'
        targets:
          $ref: '#/components/schemas/DeviceSelector'
      type: object
    FifoPublishAction:
      example:
        fifoName: fifoName
      properties:
        fifoName:
          description: Target fifo to publish into. Refer to Topics API for managing
            these fifos
          type: string
      type: object
    CsvPayloadDescriptionTestRequest:
      example:
        template: template
        columns:
        - name: column1
          jsonType: NUMERIC
        - name: column1
          jsonType: NUMERIC
        options:
          escapeChar: \
          quoteChar: '"'
          lineFeedSeparator: |2+

          columnSeparator: ;
          skipWhiteSpace: true
          useEscapeChar: true
        csvPayload: csvPayload
        mathEvalEnabled: true
      properties:
        columns:
          description: the colums description of the csv format
          items:
            $ref: '#/components/schemas/CsvColumn'
          type: array
        csvPayload:
          type: string
        mathEvalEnabled:
          type: boolean
        options:
          $ref: '#/components/schemas/CsvOptions'
        template:
          type: string
      required:
      - columns
      type: object
    DslSearchRequestResponseWithHitsOnly:
      properties:
        hits:
          items:
            $ref: '#/components/schemas/SearchDataMessage'
          type: array
        tookMillis:
          format: int64
          type: integer
        totalHits:
          format: int64
          type: integer
      type: object
    Lwm2mDevicePageWeb:
      example:
        size: 1
        data:
        - pubKeyOrIdentity: pubKeyOrIdentity
          secretKey: something base 64
          securityMode: 'one of the following: PSK, RPK, CERT, NO_SEC'
          ep: the device's endpoint
          device: urn:lo:nsid:sensor:328379273
          updateTs: 1487769699999
          creationTs: 1487769685938
          tags:
          - tag1
          - tags2
        - pubKeyOrIdentity: pubKeyOrIdentity
          secretKey: something base 64
          securityMode: 'one of the following: PSK, RPK, CERT, NO_SEC'
          ep: the device's endpoint
          device: urn:lo:nsid:sensor:328379273
          updateTs: 1487769699999
          creationTs: 1487769685938
          tags:
          - tag1
          - tags2
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/LWM2MDevice'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    FiringRule:
      description: defines if and how the matched data from MatchingRules will fire
        an event. You can restrict it for instance to trigger maximum 1 event per
        hour, or only once until you use the FiringGuard API to re-allow it. Associated
        to aggregationKeys, it will apply the firing type (eg 1 per hour) based on
        the value of these keys (eg 'streamId').
      example:
        matchingRuleIds:
        - matchingRuleIds
        - matchingRuleIds
        name: name
        sleepDuration: sleepDuration
        id: id
        aggregationKeys:
        - aggregationKeys
        - aggregationKeys
        firingType: ALWAYS
        enabled: false
      properties:
        aggregationKeys:
          description: the list of jsonPath in the Data that will define on which
            group of data this FiringRule should be set. For instance 'streamId',
            'metadata.source', 'value.type'.
          items:
            type: string
          type: array
        enabled:
          description: activate or not the FiringRule. Default is false.
          example: false
          type: boolean
        firingType:
          description: 'define the type of firing mechanism : ONCE, SLEEP, or ALWAYS'
          enum:
          - ALWAYS
          - ONCE
          - SLEEP
          type: string
        id:
          description: id of the FiringRule. Should be null when used for POST.
          type: string
        matchingRuleIds:
          description: the list of MatchingRule ids that will be handeld by this FiringRule.
          items:
            type: string
          type: array
        name:
          description: name of the FiringRule. Must be unique.
          type: string
        sleepDuration:
          description: 'sleep duration of the FiringRule. Is defined as a ISO-8601
            Period string, restricted to days, hours, minutes and seconds. 1 day will
            always be equivalent to 24H, regardless of daylight saving time. eg. :
            ''P1D'', ''PT30M''. Must be set only for ''SLEEP'' FiringType.'
          type: string
      required:
      - firingType
      - name
      type: object
    AuthResWeb:
      example:
        apiKey:
          actingTenantId: 57FFFFFFFFFFFFFFFFFFFFFF
          masterKey: true
          roles:
          - USER_R
          - APIKEY_R
          description: My description of Api Key target
          usurpedKey: true
          expired: true
          scope:
            fifos:
            - default
            - supplierA
          from: 1473078900000
          id: 52FFCAFEDECAFFFFFFFFFFF
          value: e45ffc0d97c64cd6b959436f9200d5d1
          creationTs: 1473078982518
          clientCert:
            caCertIds:
            - 5b057d0fb8605a5e80758e42
            required: true
          rateLimit:
            mqttDeviceWindowSize: 1
            mqttDeviceMaxMessages: 1
            httpWindowSize: 1
            httpMaxCalls: 1
            mqttBridgeMaxMessages: 1
            mqttBridgeWindowSize: 1
          sessionKey: true
          active: true
          label: My Api Key Name
          debugModeEndTs: 1475224200000
          nonce: 875fd664f97540f0ad9ec2f889a40ce9
          userId: 57FFFFFFFFFFFFFFFFFFFFFF
          parentId: 57FFFFFFFFFFFFFFFFFFFFFF
          tenantId: 57FFFFFFFFFFFFFFFFFFFFFF
          actingUserId: 57FFFFFFFFFFFFFFFFFFFFFF
          lastActivity: 1473078982518
          sessionTTL: 144410
          to: 1475224200000
        admin: true
      properties:
        admin:
          type: boolean
        apiKey:
          $ref: '#/components/schemas/ApiKey'
      type: object
    SMSConnectorSettings:
      description: body of sms connector business settings
      example:
        serverPhoneNumber: "20259"
        decoders: lo-payload
        enabled: false
        limits:
          maxSmsOutPerDay: 100
          maxMsisdn: 10
          maxTags: 10
          maxSmsInPerDay: 5000
      properties:
        decoders:
          description: decoders use to translate messages received
          example: lo-payload
          items:
            type: string
          type: array
        enabled:
          description: indicate if setting is enabled or not
          example: false
          type: boolean
        limits:
          $ref: '#/components/schemas/Thresholds'
        serverPhoneNumber:
          description: platform phone number use as source of message
          example: "20259"
          type: string
      required:
      - decoders
      - enabled
      - serverPhoneNumber
      type: object
    CsvOptions:
      example:
        escapeChar: \
        quoteChar: '"'
        lineFeedSeparator: |2+

        columnSeparator: ;
        skipWhiteSpace: true
        useEscapeChar: true
      properties:
        columnSeparator:
          example: ;
          type: string
        escapeChar:
          example: \
          type: string
        lineFeedSeparator:
          example: |2+

          type: string
        quoteChar:
          example: '"'
          type: string
        skipWhiteSpace:
          type: boolean
        useEscapeChar:
          type: boolean
      type: object
    CommandHistory:
      properties:
        deliveryStatus:
          enum:
          - SENDING
          - SENT
          - DELIVERED
          - REPLIED
          type: string
        errorCode:
          type: string
        nodeId:
          type: string
        status:
          enum:
          - PENDING
          - PROCESSING
          - PROCESSED
          - CANCELED
          - ERROR
          - RETRYING
          - EXPIRED
          - UNKNOWN
          type: string
        timestamp:
          type: string
      type: object
    TenantSettingsUpdateReqWeb:
      description: body of tenant settings Update Request
      properties:
        settings:
          description: Content of the section to set
          properties: {}
          type: object
        settingsRevision:
          description: Current revision of the section, for history of value changes.
          format: int32
          type: integer
        settingsVersion:
          description: Version of the settings model
          type: string
      required:
      - settings
      - settingsRevision
      type: object
    AssetParameterValue:
      example:
        valueBinary:
        - valueBinary
        - valueBinary
        valueString: valueString
        valueUInt32: 1
        type: INT32
        valueFloat: 0.8008281904610115
        valueInt32: 6
      properties:
        type:
          enum:
          - INT32
          - UINT32
          - BINARY
          - STRING
          - FLOAT
          - UNKNOWN
          type: string
        valueBinary:
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        valueFloat:
          format: double
          type: number
        valueInt32:
          format: int32
          type: integer
        valueString:
          type: string
        valueUInt32:
          format: int64
          type: integer
      type: object
    SMSConnectorBusinessSettingsDeleteMsisdnReqWeb:
      description: SMS Connector Business Settings data in Delete Msisdn Request
      example:
        serverPhoneNumber: serverPhoneNumber
        msisdns:
        - msisdns
        - msisdns
      properties:
        msisdns:
          description: 'device''s SIM Card identifier ex: "33666666667"'
          items:
            type: string
          type: array
        serverPhoneNumber:
          description: 'server phone number ex: "20258"'
          type: string
      required:
      - msisdns
      - serverPhoneNumber
      type: object
    TenantStatsWeb:
      example:
        total: "{\n\t  \t\t\"datazone\": {\n\t  \t\t\t\"counters\": {\n\t  \t\t\t\t\
          \"storedBytes\": 20359,\n\t  \t\t\t\t\"_comment(storedBytes)\": \"total\
          \ number of bytes stored from data message (data storage)\",\n\t  \t\t\t\
          \t\"numberOfDays\": 367,\n\t  \t\t\t\t\"_comment(numberOfDays)\": \"period\
          \ in days specified in the statistic request\",\n\t  \t\t\t\t\"queriesTookMilis\"\
          : 3744,\n\t  \t\t\t\t\"_comment(queriesTookMilis)\": \"counter for each\
          \ new searched request message (advanced search)\"\n\t  \t\t\t}\n\t  \t\t\
          },\n\t  \t\t\"mqttNoSecure\": {\n\t  \t\t\t\"counters\": {\n\t  \t\t\t\t\
          \"virtualMsgIn\": 348,\n\t  \t\t\t\t\"_comment(virtualMsgIn)\": \"total\
          \ count number of virtual messages in service Input\",\n\t  \t\t\t\t\"msgIn\"\
          : 348,\n\t  \t\t\t\t\"_comment(msgIn)\": \"total count number of messages\
          \ in service Input\",\n\t  \t\t\t\t\"msgOut\": 12,\n\t  \t\t\t\t\"_comment(msgOut)\"\
          : \"total count number of messages in service Output\",\n\t  \t\t\t\t\"\
          numberOfDays\": 367,\n\t  \t\t\t\t\"virtualMsgOut\": 12,\n\t  \t\t\t\t\"\
          _comment(virtualMsgOut)\": \"total count number of virtual messages in service\
          \ Output\",\n\t  \t\t\t\t\"bytesOut\": 4776,\n\t  \t\t\t\t\"_comment(bytesOut)\"\
          : \"total of msgOut byte size\",\n\t  \t\t\t\t\"bytesIn\": 45818,\n\t  \t\
          \t\t\t\"_comment(bytesIn)\": \"total of msgIn byte size\"\n\t  \t\t\t},\n\
          \t  \t\t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\",\n\t  \t\t\
          \t\"_comment(lastUpdatedDateTs)\": \"date of the last counter recording\"\
          \n\t  \t\t},\n\t  \t\t\"restDataZoneQuery\": {\n\t  \t\t\t\"counters\":\
          \ {\n\t  \t\t\t\t\"virtualMsgIn\": 251,\n\t  \t\t\t\t\"msgIn\": 307,\n\t\
          \  \t\t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t\"bytesIn\": 49291\n\t  \t\
          \t\t},\n\t  \t\t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\n\t\
          \  \t\t},\n\t  \t\t\"firmwareUpdates\": {\n\t  \t\t\t\"counters\": {\n\t\
          \  \t\t\t\t\"attemptedDownloads\": 121,\n\t  \t\t\t\t\"successfulDownloads\"\
          : 120 \n\t  \t\t\t},\n\t  \t\t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\
          \n\t  \t\t},\n\t  \t\t\"restOthers\": {\n\t  \t\t\t\"counters\": {\n\t \
          \ \t\t\t\t\"virtualMsgIn\": 266,\n\t  \t\t\t\t\"msgIn\": 1107,\n\t  \t\t\
          \t\t\"msgOut\": 953,\n\t  \t\t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t\"\
          virtualMsgOut\": 6524,\n\t  \t\t\t\t\"bytesIn\": 47489,\n\t  \t\t\t\t\"\
          bytesOut\": 5926966\n\t  \t\t\t},\n\t  \t\t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\
          \n\t  \t\t},\n\t  \t\t\"deviceInventory\":       {\n\t  \t\t\t\"counters\"\
          :          {\n\t  \t\t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t \"deviceCreations\"\
          : 8\n\t  \t\t},\n\t  \t\t \"inventories\": {\"numberOfRegisteredDevices\"\
          : 8},\n\t  \t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\n\t \
          \ \t\t},            \n\t  \t\t\"interfaceMqtt\":       {\n\t  \t\t\t\"counters\"\
          :          {\n\t  \t\t\t\t\"interfaceCreations\": 16,\n\t  \t\t\t\t\"numberOfDays\"\
          : 367,\n\t  \t\t\t\t\"interfaceDeletions\": 13\n\t  \t\t},\n\t  \t\t \"\
          inventories\": {\"numberOfInterfaces\": 18},\n\t  \t\t\"lastUpdatedDateTs\"\
          : \"2016-10-26T01:00:00.000Z\"\n\t  \t\t},            \n\t  \t\t\"msisdnInventory\"\
          :       {\n\t  \t\t\"counters\":          {\n\t  \t\t\t\t\"msisdnDeletions\"\
          : 7,\n\t  \t\t\t\t\"msisdnCreations\": 7,\n\t  \t\t\t\t\"numberOfDays\"\
          : 367\n\t  \t\t},\n\t  \t\t\"inventories\": {\"numberOfRegisteredDevices\"\
          : 0},\n\t  \t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\n\t \
          \ \t\t},\n\t  \t\t\"overall\": {\n\t  \t\t\t\"counters\": {\n\t  \t\t\t\t\
          \"virtualMsgIn\": 902,\n\t  \t\t\t\t\"storedBytes\": 20359,\n\t  \t\t\t\t\
          \"msgIn\": 1799,\n\t  \t\t\t\t\"queriesTookMilis\": 3744,\n\t  \t\t\t\t\"\
          msgOut\": 977,\n\t  \t\t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t\"virtualMsgOut\"\
          : 6548,\n\t  \t\t\t\t\"bytesIn\": 147981,\n\t  \t\t\t\t\"bytesOut\": 5932174,\n\
          \t  \t\t\t\t\"interfaceCreations\": 16,\n\t  \t\t\t\t\"interfaceDeletions\"\
          : 13\n\t  \t\t\t\t\"msisdnCreations\": 7,\n\t  \t\t\t\t\"msisdnDeletions\"\
          : 7,\n\t  \t\t\t\t\"connections\": 34,\n\t  \t\t\t\t\"disconnections\":\
          \ 23,\n\t  \t\t\t\t\"deviceCreations\": 8,\n\t  \t\t\t\t\"attemptedDownloads\"\
          : 121,\n\t  \t\t\t\t\"successfulDownloads\": 120\n\t  \t\t\t},\n\t  \t\t\
          \t\"inventories\":          {\n\t  \t\t\t\t\"numberOfRegisteredDevices\"\
          : 8,\n\t  \t\t\t\t\"numberOfInterfaces\": 18\n\t  \t\t\t}, \n\t  \t\t\t\"\
          lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\n\t  \t\t},\n\t  \t\t\"\
          sms_208645\": {\n\t  \t\t\t\"counters\": {\n\t  \t\t\t\t\"msgOut\": 12,\n\
          \t  \t\t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t\"virtualMsgOut\": 12,\n\
          \t  \t\t\t\t\"bytesOut\": 432\n\t  \t\t\t},\n\t  \t\t\t\"lastUpdatedDateTs\"\
          : \"2016-10-26T13:06:46.000Z\"\n\t  \t\t},\n\t  \t\t\"mqttWebSocketNoSecure\"\
          : {\n\t  \t\t\t\"counters\": {\n\t  \t\t\t\t\"numberOfDays\": 367\n\t  \t\
          \t\t},\n\t  \t\t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\n\t\
          \  \t\t},\n\t  \t\t\"mqttSSL\": {\n\t  \t\t\t\"counters\": {\n\t  \t\t\t\
          \t\"numberOfDays\": 367\n\t  \t\t\t},\n\t  \t\t\t\"lastUpdatedDateTs\":\
          \ \"2016-10-26T01:00:00.000Z\"\n\t  \t\t},\n\t  \t\t\"restTraffic\": {\n\
          \t  \t\t\t\"counters\": {\n\t  \t\t\t\t\"virtualMsgIn\": 37,\n\t  \t\t\t\
          \t\"msgIn\": 37,\n\t  \t\t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t\"bytesIn\"\
          : 5383\n\t  \t\t\t},\n\t  \t\t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\
          \n\t  \t\t}\n\t  \t}"
        tenantName: Tenant-test
        statisticsPerMonth: "{\n\t  \t\t\"2018-11\": {\n\t  \t\t\t\"statisticsPerMonth\"\
          : {\t  \t\t\t\t\"2018-11\": {\t  \t\t\t\t\t\"lora\": {\t  \t\t\t\t\t\t \
          \   \"counters\": {\t  \t\t\t\t\t\t\t        \"numberOfSources\": 100,\t\
          \  \t\t\t\t\t\t\t        \"numberOfActiveDevice\": 100\t  \t\t\t\t\t\t \
          \   }\t  \t\t\t\t\t},\t  \t\t\t\t\t\"datazone\": {\t  \t\t\t\t\t\t\"counters\"\
          : {\t  \t\t\t\t\t\t\t        \"numberOfSources\": 100\t  \t\t\t\t\t\t}\t\
          \  \t\t\t\t\t}\t  \t\t\t\t}\t  \t\t}"
        statisticsPerDay:
          "2016-10-17":
            datazone:
              counters:
                queriesTookMilis: 143.0
                storedBytes: 1638.0
                numberOfSources: 1.0
          "2016-10-18":
            datazone:
              counters:
                queriesTookMilis: 94.0
                storedBytes: 1627.0
                numberOfSources: 1.0
          "2016-10-15":
            datazone:
              counters:
                queriesTookMilis: 80.0
                storedBytes: 1639.0
                numberOfSources: 1.0
          "2016-10-26":
            mqttNoSecure:
              counters:
                virtualMsgIn: 4.0
                numberOfSources: 1.0
                msgIn: 4.0
                msgOut: 1.0
                virtualMsgOut: 1.0
                bytesOut: 570.0
                bytesIn: 697.0
              lastUpdatedDateTs: 2016-10-26T13:00:00.000Z
              _comment(lastUpdatedDateTs): date of the consolidation
            restDataZoneQuery:
              counters:
                virtualMsgIn: 42.0
                msgIn: 42.0
                bytesIn: 7350.0
              lastUpdatedDateTs: 2016-10-26T13:00:00.000Z
            firmwareUpdates:
              counters:
                attemptedDownloads: 121.0
                successfulDownloads: 120.0
              lastUpdatedDateTs: 2016-10-26T13:00:00.000Z
            restOthers:
              counters:
                virtualMsgIn: 90.0
                msgIn: 255.0
                msgOut: 232.0
                virtualMsgOut: 482.0
                bytesIn: 17327.0
                bytesOut: 330338.0
              lastUpdatedDateTs: 2016-10-26T13:00:00.000Z
            mqttWebSocketNoSecure:
              counters:
                numberOfSources: 1.0
              lastUpdatedDateTs: 2016-10-26T13:00:00.000Z
            sms_208645:
              counters:
                msgOut: 12.0
                numberOfSources: 2.0
                numberOfDays: 367.0
                virtualMsgOut: 12.0
                bytesOut: 432.0
              lastUpdatedDateTs: 2016-10-26T13:06:46.000Z
            msisdnInventory:
              counters:
                msisdnDeletions: 7.0
                msisdnCreations: 7.0
              inventories:
                numberOfRegisteredDevices: 0.0
              lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
            interfaceMqtt:
              counters:
                interfaceCreations: 16.0
                interfaceDeletions: 13.0
              inventories:
                numberOfInterfaces: 18.0
              lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
            deviceInventory:
              inventories:
                numberOfRegisteredDevices: 8.0
              lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
          "2016-10-16":
            datazone:
              counters:
                queriesTookMilis: 86.0
                storedBytes: 1640.0
                numberOfSources: 1.0
          "2016-10-19":
            datazone:
              counters:
                queriesTookMilis: 85.0
                storedBytes: 1639.0
                numberOfSources: 1.0
          "2016-10-20":
            datazone:
              counters:
                queriesTookMilis: 91.0
                storedBytes: 1640.0
                numberOfSources: 1.0
          "2016-10-21":
            datazone:
              counters:
                queriesTookMilis: 112.0
                storedBytes: 1637.0
                numberOfSources: 1.0
          "2016-10-13":
            datazone:
              counters:
                queriesTookMilis: 504.0
                storedBytes: 4438.0
            restDataZoneQuery:
              counters:
                virtualMsgIn: 19.0
                msgIn: 55.0
                bytesIn: 3383.0
            restOthers:
              counters:
                virtualMsgIn: 6.0
                msgIn: 50.0
                msgOut: 20.0
                virtualMsgOut: 60.0
                bytesOut: 50014.0
                bytesIn: 885.0
            restTraffic:
              counters:
                virtualMsgIn: 7.0
                msgIn: 7.0
                bytesIn: 1485.0
          "2016-10-24":
            datazone:
              counters:
                queriesTookMilis: 835.0
            restDataZoneQuery:
              counters:
                virtualMsgIn: 100.0
                msgIn: 100.0
                bytesIn: 19737.0
            restOthers:
              counters:
                virtualMsgIn: 14.0
                msgIn: 178.0
                msgOut: 174.0
                virtualMsgOut: 339.0
                bytesIn: 2732.0
                bytesOut: 231684.0
          "2016-10-14":
            datazone:
              counters:
                queriesTookMilis: 1146.0
                storedBytes: 2822.0
            restDataZoneQuery:
              counters:
                virtualMsgIn: 6.0
                msgIn: 16.0
                bytesIn: 1168.0
            firmwareUpdates:
              counters:
                attemptedDownloads: 121.0
                successfulDownloads: 120.0
            restOthers:
              counters:
                virtualMsgIn: 5.0
                msgIn: 23.0
                msgOut: 13.0
                virtualMsgOut: 4408.0
                bytesIn: 1219.0
                bytesOut: 4399666.0
            restTraffic:
              counters:
                virtualMsgIn: 3.0
                msgIn: 3.0
                bytesIn: 637.0
          "2016-10-25":
            datazone:
              counters:
                queriesTookMilis: 568.0
                storedBytes: 1639.0
                numberOfSources: 1.0
            mqttNoSecure:
              counters:
                virtualMsgIn: 344.0
                numberOfSources: 8.0
                msgIn: 344.0
                msgOut: 11.0
                virtualMsgOut: 11.0
                bytesOut: 4206.0
                bytesIn: 45121.0
              lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
            restDataZoneQuery:
              counters:
                virtualMsgIn: 84.0
                msgIn: 94.0
                bytesIn: 17653.0
              lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
            restOthers:
              counters:
                virtualMsgIn: 151.0
                msgIn: 601.0
                msgOut: 514.0
                virtualMsgOut: 1235.0
                bytesOut: 915264.0
                bytesIn: 25326.0
              lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
            mqttWebSocketNoSecure:
              counters:
                numberOfSources: 1.0
              lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
            mqttSSL:
              counters:
                numberOfSources: 1.0
                numberOfDays: 367.0
              lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
            restTraffic:
              counters:
                virtualMsgIn: 27.0
                numberOfSources: 7.0
                msgIn: 27.0
                bytesIn: 3261.0
              lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
        tenantId: 57ed0a98266e260a11111
        properties:
          key: properties
      properties:
        properties:
          additionalProperties:
            type: string
          type: object
        statisticsPerDay:
          additionalProperties:
            additionalProperties:
              $ref: '#/components/schemas/ConnectorStatistics'
            type: object
          description: all statistics per day
          example:
            "2016-10-17":
              datazone:
                counters:
                  queriesTookMilis: 143.0
                  storedBytes: 1638.0
                  numberOfSources: 1.0
            "2016-10-18":
              datazone:
                counters:
                  queriesTookMilis: 94.0
                  storedBytes: 1627.0
                  numberOfSources: 1.0
            "2016-10-15":
              datazone:
                counters:
                  queriesTookMilis: 80.0
                  storedBytes: 1639.0
                  numberOfSources: 1.0
            "2016-10-26":
              mqttNoSecure:
                counters:
                  virtualMsgIn: 4.0
                  numberOfSources: 1.0
                  msgIn: 4.0
                  msgOut: 1.0
                  virtualMsgOut: 1.0
                  bytesOut: 570.0
                  bytesIn: 697.0
                lastUpdatedDateTs: 2016-10-26T13:00:00.000Z
                _comment(lastUpdatedDateTs): date of the consolidation
              restDataZoneQuery:
                counters:
                  virtualMsgIn: 42.0
                  msgIn: 42.0
                  bytesIn: 7350.0
                lastUpdatedDateTs: 2016-10-26T13:00:00.000Z
              firmwareUpdates:
                counters:
                  attemptedDownloads: 121.0
                  successfulDownloads: 120.0
                lastUpdatedDateTs: 2016-10-26T13:00:00.000Z
              restOthers:
                counters:
                  virtualMsgIn: 90.0
                  msgIn: 255.0
                  msgOut: 232.0
                  virtualMsgOut: 482.0
                  bytesIn: 17327.0
                  bytesOut: 330338.0
                lastUpdatedDateTs: 2016-10-26T13:00:00.000Z
              mqttWebSocketNoSecure:
                counters:
                  numberOfSources: 1.0
                lastUpdatedDateTs: 2016-10-26T13:00:00.000Z
              sms_208645:
                counters:
                  msgOut: 12.0
                  numberOfSources: 2.0
                  numberOfDays: 367.0
                  virtualMsgOut: 12.0
                  bytesOut: 432.0
                lastUpdatedDateTs: 2016-10-26T13:06:46.000Z
              msisdnInventory:
                counters:
                  msisdnDeletions: 7.0
                  msisdnCreations: 7.0
                inventories:
                  numberOfRegisteredDevices: 0.0
                lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
              interfaceMqtt:
                counters:
                  interfaceCreations: 16.0
                  interfaceDeletions: 13.0
                inventories:
                  numberOfInterfaces: 18.0
                lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
              deviceInventory:
                inventories:
                  numberOfRegisteredDevices: 8.0
                lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
            "2016-10-16":
              datazone:
                counters:
                  queriesTookMilis: 86.0
                  storedBytes: 1640.0
                  numberOfSources: 1.0
            "2016-10-19":
              datazone:
                counters:
                  queriesTookMilis: 85.0
                  storedBytes: 1639.0
                  numberOfSources: 1.0
            "2016-10-20":
              datazone:
                counters:
                  queriesTookMilis: 91.0
                  storedBytes: 1640.0
                  numberOfSources: 1.0
            "2016-10-21":
              datazone:
                counters:
                  queriesTookMilis: 112.0
                  storedBytes: 1637.0
                  numberOfSources: 1.0
            "2016-10-13":
              datazone:
                counters:
                  queriesTookMilis: 504.0
                  storedBytes: 4438.0
              restDataZoneQuery:
                counters:
                  virtualMsgIn: 19.0
                  msgIn: 55.0
                  bytesIn: 3383.0
              restOthers:
                counters:
                  virtualMsgIn: 6.0
                  msgIn: 50.0
                  msgOut: 20.0
                  virtualMsgOut: 60.0
                  bytesOut: 50014.0
                  bytesIn: 885.0
              restTraffic:
                counters:
                  virtualMsgIn: 7.0
                  msgIn: 7.0
                  bytesIn: 1485.0
            "2016-10-24":
              datazone:
                counters:
                  queriesTookMilis: 835.0
              restDataZoneQuery:
                counters:
                  virtualMsgIn: 100.0
                  msgIn: 100.0
                  bytesIn: 19737.0
              restOthers:
                counters:
                  virtualMsgIn: 14.0
                  msgIn: 178.0
                  msgOut: 174.0
                  virtualMsgOut: 339.0
                  bytesIn: 2732.0
                  bytesOut: 231684.0
            "2016-10-14":
              datazone:
                counters:
                  queriesTookMilis: 1146.0
                  storedBytes: 2822.0
              restDataZoneQuery:
                counters:
                  virtualMsgIn: 6.0
                  msgIn: 16.0
                  bytesIn: 1168.0
              firmwareUpdates:
                counters:
                  attemptedDownloads: 121.0
                  successfulDownloads: 120.0
              restOthers:
                counters:
                  virtualMsgIn: 5.0
                  msgIn: 23.0
                  msgOut: 13.0
                  virtualMsgOut: 4408.0
                  bytesIn: 1219.0
                  bytesOut: 4399666.0
              restTraffic:
                counters:
                  virtualMsgIn: 3.0
                  msgIn: 3.0
                  bytesIn: 637.0
            "2016-10-25":
              datazone:
                counters:
                  queriesTookMilis: 568.0
                  storedBytes: 1639.0
                  numberOfSources: 1.0
              mqttNoSecure:
                counters:
                  virtualMsgIn: 344.0
                  numberOfSources: 8.0
                  msgIn: 344.0
                  msgOut: 11.0
                  virtualMsgOut: 11.0
                  bytesOut: 4206.0
                  bytesIn: 45121.0
                lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
              restDataZoneQuery:
                counters:
                  virtualMsgIn: 84.0
                  msgIn: 94.0
                  bytesIn: 17653.0
                lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
              restOthers:
                counters:
                  virtualMsgIn: 151.0
                  msgIn: 601.0
                  msgOut: 514.0
                  virtualMsgOut: 1235.0
                  bytesOut: 915264.0
                  bytesIn: 25326.0
                lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
              mqttWebSocketNoSecure:
                counters:
                  numberOfSources: 1.0
                lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
              mqttSSL:
                counters:
                  numberOfSources: 1.0
                  numberOfDays: 367.0
                lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
              restTraffic:
                counters:
                  virtualMsgIn: 27.0
                  numberOfSources: 7.0
                  msgIn: 27.0
                  bytesIn: 3261.0
                lastUpdatedDateTs: 2016-10-26T01:00:00.000Z
          type: object
        statisticsPerMonth:
          additionalProperties:
            additionalProperties:
              $ref: '#/components/schemas/ConnectorStatistics'
            type: object
          description: 'Statistics per month : number of distinct sources (lora, mqtt,
            datazone)'
          example: "{\n\t  \t\t\"2018-11\": {\n\t  \t\t\t\"statisticsPerMonth\": {\t\
            \  \t\t\t\t\"2018-11\": {\t  \t\t\t\t\t\"lora\": {\t  \t\t\t\t\t\t   \
            \ \"counters\": {\t  \t\t\t\t\t\t\t        \"numberOfSources\": 100,\t\
            \  \t\t\t\t\t\t\t        \"numberOfActiveDevice\": 100\t  \t\t\t\t\t\t\
            \    }\t  \t\t\t\t\t},\t  \t\t\t\t\t\"datazone\": {\t  \t\t\t\t\t\t\"\
            counters\": {\t  \t\t\t\t\t\t\t        \"numberOfSources\": 100\t  \t\t\
            \t\t\t\t}\t  \t\t\t\t\t}\t  \t\t\t\t}\t  \t\t}"
          type: object
        tenantId:
          description: The tenant Id
          example: 57ed0a98266e260a11111
          type: string
        tenantName:
          description: The tenant name
          example: Tenant-test
          type: string
        total:
          additionalProperties:
            $ref: '#/components/schemas/ConnectorStatistics'
          description: Aggregation of all statistics
          example: "{\n\t  \t\t\"datazone\": {\n\t  \t\t\t\"counters\": {\n\t  \t\t\
            \t\t\"storedBytes\": 20359,\n\t  \t\t\t\t\"_comment(storedBytes)\": \"\
            total number of bytes stored from data message (data storage)\",\n\t \
            \ \t\t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t\"_comment(numberOfDays)\"\
            : \"period in days specified in the statistic request\",\n\t  \t\t\t\t\
            \"queriesTookMilis\": 3744,\n\t  \t\t\t\t\"_comment(queriesTookMilis)\"\
            : \"counter for each new searched request message (advanced search)\"\n\
            \t  \t\t\t}\n\t  \t\t},\n\t  \t\t\"mqttNoSecure\": {\n\t  \t\t\t\"counters\"\
            : {\n\t  \t\t\t\t\"virtualMsgIn\": 348,\n\t  \t\t\t\t\"_comment(virtualMsgIn)\"\
            : \"total count number of virtual messages in service Input\",\n\t  \t\
            \t\t\t\"msgIn\": 348,\n\t  \t\t\t\t\"_comment(msgIn)\": \"total count\
            \ number of messages in service Input\",\n\t  \t\t\t\t\"msgOut\": 12,\n\
            \t  \t\t\t\t\"_comment(msgOut)\": \"total count number of messages in\
            \ service Output\",\n\t  \t\t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t\"\
            virtualMsgOut\": 12,\n\t  \t\t\t\t\"_comment(virtualMsgOut)\": \"total\
            \ count number of virtual messages in service Output\",\n\t  \t\t\t\t\"\
            bytesOut\": 4776,\n\t  \t\t\t\t\"_comment(bytesOut)\": \"total of msgOut\
            \ byte size\",\n\t  \t\t\t\t\"bytesIn\": 45818,\n\t  \t\t\t\t\"_comment(bytesIn)\"\
            : \"total of msgIn byte size\"\n\t  \t\t\t},\n\t  \t\t\t\"lastUpdatedDateTs\"\
            : \"2016-10-26T01:00:00.000Z\",\n\t  \t\t\t\"_comment(lastUpdatedDateTs)\"\
            : \"date of the last counter recording\"\n\t  \t\t},\n\t  \t\t\"restDataZoneQuery\"\
            : {\n\t  \t\t\t\"counters\": {\n\t  \t\t\t\t\"virtualMsgIn\": 251,\n\t\
            \  \t\t\t\t\"msgIn\": 307,\n\t  \t\t\t\t\"numberOfDays\": 367,\n\t  \t\
            \t\t\t\"bytesIn\": 49291\n\t  \t\t\t},\n\t  \t\t\t\"lastUpdatedDateTs\"\
            : \"2016-10-26T01:00:00.000Z\"\n\t  \t\t},\n\t  \t\t\"firmwareUpdates\"\
            : {\n\t  \t\t\t\"counters\": {\n\t  \t\t\t\t\"attemptedDownloads\": 121,\n\
            \t  \t\t\t\t\"successfulDownloads\": 120 \n\t  \t\t\t},\n\t  \t\t\t\"\
            lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\n\t  \t\t},\n\t  \t\t\
            \"restOthers\": {\n\t  \t\t\t\"counters\": {\n\t  \t\t\t\t\"virtualMsgIn\"\
            : 266,\n\t  \t\t\t\t\"msgIn\": 1107,\n\t  \t\t\t\t\"msgOut\": 953,\n\t\
            \  \t\t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t\"virtualMsgOut\": 6524,\n\
            \t  \t\t\t\t\"bytesIn\": 47489,\n\t  \t\t\t\t\"bytesOut\": 5926966\n\t\
            \  \t\t\t},\n\t  \t\t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\
            \n\t  \t\t},\n\t  \t\t\"deviceInventory\":       {\n\t  \t\t\t\"counters\"\
            :          {\n\t  \t\t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t \"deviceCreations\"\
            : 8\n\t  \t\t},\n\t  \t\t \"inventories\": {\"numberOfRegisteredDevices\"\
            : 8},\n\t  \t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\n\t\
            \  \t\t},            \n\t  \t\t\"interfaceMqtt\":       {\n\t  \t\t\t\"\
            counters\":          {\n\t  \t\t\t\t\"interfaceCreations\": 16,\n\t  \t\
            \t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t\"interfaceDeletions\": 13\n\
            \t  \t\t},\n\t  \t\t \"inventories\": {\"numberOfInterfaces\": 18},\n\t\
            \  \t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\n\t  \t\t},\
            \            \n\t  \t\t\"msisdnInventory\":       {\n\t  \t\t\"counters\"\
            :          {\n\t  \t\t\t\t\"msisdnDeletions\": 7,\n\t  \t\t\t\t\"msisdnCreations\"\
            : 7,\n\t  \t\t\t\t\"numberOfDays\": 367\n\t  \t\t},\n\t  \t\t\"inventories\"\
            : {\"numberOfRegisteredDevices\": 0},\n\t  \t\t\"lastUpdatedDateTs\":\
            \ \"2016-10-26T01:00:00.000Z\"\n\t  \t\t},\n\t  \t\t\"overall\": {\n\t\
            \  \t\t\t\"counters\": {\n\t  \t\t\t\t\"virtualMsgIn\": 902,\n\t  \t\t\
            \t\t\"storedBytes\": 20359,\n\t  \t\t\t\t\"msgIn\": 1799,\n\t  \t\t\t\t\
            \"queriesTookMilis\": 3744,\n\t  \t\t\t\t\"msgOut\": 977,\n\t  \t\t\t\t\
            \"numberOfDays\": 367,\n\t  \t\t\t\t\"virtualMsgOut\": 6548,\n\t  \t\t\
            \t\t\"bytesIn\": 147981,\n\t  \t\t\t\t\"bytesOut\": 5932174,\n\t  \t\t\
            \t\t\"interfaceCreations\": 16,\n\t  \t\t\t\t\"interfaceDeletions\": 13\n\
            \t  \t\t\t\t\"msisdnCreations\": 7,\n\t  \t\t\t\t\"msisdnDeletions\":\
            \ 7,\n\t  \t\t\t\t\"connections\": 34,\n\t  \t\t\t\t\"disconnections\"\
            : 23,\n\t  \t\t\t\t\"deviceCreations\": 8,\n\t  \t\t\t\t\"attemptedDownloads\"\
            : 121,\n\t  \t\t\t\t\"successfulDownloads\": 120\n\t  \t\t\t},\n\t  \t\
            \t\t\"inventories\":          {\n\t  \t\t\t\t\"numberOfRegisteredDevices\"\
            : 8,\n\t  \t\t\t\t\"numberOfInterfaces\": 18\n\t  \t\t\t}, \n\t  \t\t\t\
            \"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\n\t  \t\t},\n\t  \t\
            \t\"sms_208645\": {\n\t  \t\t\t\"counters\": {\n\t  \t\t\t\t\"msgOut\"\
            : 12,\n\t  \t\t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t\"virtualMsgOut\"\
            : 12,\n\t  \t\t\t\t\"bytesOut\": 432\n\t  \t\t\t},\n\t  \t\t\t\"lastUpdatedDateTs\"\
            : \"2016-10-26T13:06:46.000Z\"\n\t  \t\t},\n\t  \t\t\"mqttWebSocketNoSecure\"\
            : {\n\t  \t\t\t\"counters\": {\n\t  \t\t\t\t\"numberOfDays\": 367\n\t\
            \  \t\t\t},\n\t  \t\t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\
            \n\t  \t\t},\n\t  \t\t\"mqttSSL\": {\n\t  \t\t\t\"counters\": {\n\t  \t\
            \t\t\t\"numberOfDays\": 367\n\t  \t\t\t},\n\t  \t\t\t\"lastUpdatedDateTs\"\
            : \"2016-10-26T01:00:00.000Z\"\n\t  \t\t},\n\t  \t\t\"restTraffic\": {\n\
            \t  \t\t\t\"counters\": {\n\t  \t\t\t\t\"virtualMsgIn\": 37,\n\t  \t\t\
            \t\t\"msgIn\": 37,\n\t  \t\t\t\t\"numberOfDays\": 367,\n\t  \t\t\t\t\"\
            bytesIn\": 5383\n\t  \t\t\t},\n\t  \t\t\t\"lastUpdatedDateTs\": \"2016-10-26T01:00:00.000Z\"\
            \n\t  \t\t}\n\t  \t}"
          type: object
      type: object
    CaCertificateCreateReqWeb:
      example:
        certificate: |
          -----BEGIN CERTIFICATE-----
          MIIDhzCCAm+gAwIBAgIJAKG3BbVszHbbMA0GCSqGSIb3DQEBCwUAMFoxCzAJBgNV
          BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
          aWRnaXRzIFB0eSBMdGQxEzARBgNVBAMMCk15IFJvb3QgQ0EwHhcNMTgwNTI0MDcx
          NDE2WhcNMjEwMzEzMDcxNDE2WjBaMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29t
          ZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMRMwEQYD
          VQQDDApNeSBSb290IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
          ukVDFNxEV7J6+vqmMLqbsm98kJIqKvogvl+yC0HWxpueSrewI5KrNnNGFveNeGCA
          Fgk886rK17/nA3wiauZc2st92MbESUYSr0PF+72wsYCHBeMhOiLygaSEYiLEGExc
          aIlidYH5b501m/PecbtwfZCs/H0jWqJ34XRzF7yq64iZQ1gt9TzWkYDsH9bjxSmk
          3iSQWkYmpz7SM+b19q0D0punlYNZo5TxmpNF2P8Iiy2Qj2eEKak1BvqOY6xUkNKE
          pb9toQ5r+qGH3ZVRWEgdV4PRqhGTY8nsJUq4lAlPGI2GqVSYuY6Z/CUn/ZtB6lq/
          iuG9e+6VgQA3zDLq4TdS9QIDAQABo1AwTjAdBgNVHQ4EFgQUClL5PFn9wW3dNoOc
          X7OfrxCc8+YwHwYDVR0jBBgwFoAUClL5PFn9wW3dNoOcX7OfrxCc8+YwDAYDVR0T
          BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAMnVSahn7iaQdZgMqJtuokuijTkFU
          y4IwXGMf9psq18UMvjeWG0LauWQyBGdMQ6yNLC8YeboLbc19xbdvTBrMSAj7c1VY
          MZ3hpOkOo9jpQxAzCF8o+IDEisuZbRN+ZSRnoW5ruIeU9FT/3JlKm6xYFBbP3ijH
          kxFfLlJeLhhgbkB1wPLhQsO5rP/6DRD+CA9ympxn+gO2YX/5gqgzEQSN3RQANaBG
          U4yLz+t2SO2AgIKBDxwFGws+ciTEnu+9NLx9BYUI1BtbKuS/nwFIcJ0FkpAUOn0+
          6yN6vwM0t9bfXG8mLizAecWpbodz0YsizQwA8wJeKnmbR/u0ZOxp4qXpfg==
          -----END CERTIFICATE-----
        comment: my awesome intermediate CA certificate
      properties:
        certificate:
          description: PEM X.509 public certificate
          example: |
            -----BEGIN CERTIFICATE-----
            MIIDhzCCAm+gAwIBAgIJAKG3BbVszHbbMA0GCSqGSIb3DQEBCwUAMFoxCzAJBgNV
            BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX
            aWRnaXRzIFB0eSBMdGQxEzARBgNVBAMMCk15IFJvb3QgQ0EwHhcNMTgwNTI0MDcx
            NDE2WhcNMjEwMzEzMDcxNDE2WjBaMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29t
            ZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMRMwEQYD
            VQQDDApNeSBSb290IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
            ukVDFNxEV7J6+vqmMLqbsm98kJIqKvogvl+yC0HWxpueSrewI5KrNnNGFveNeGCA
            Fgk886rK17/nA3wiauZc2st92MbESUYSr0PF+72wsYCHBeMhOiLygaSEYiLEGExc
            aIlidYH5b501m/PecbtwfZCs/H0jWqJ34XRzF7yq64iZQ1gt9TzWkYDsH9bjxSmk
            3iSQWkYmpz7SM+b19q0D0punlYNZo5TxmpNF2P8Iiy2Qj2eEKak1BvqOY6xUkNKE
            pb9toQ5r+qGH3ZVRWEgdV4PRqhGTY8nsJUq4lAlPGI2GqVSYuY6Z/CUn/ZtB6lq/
            iuG9e+6VgQA3zDLq4TdS9QIDAQABo1AwTjAdBgNVHQ4EFgQUClL5PFn9wW3dNoOc
            X7OfrxCc8+YwHwYDVR0jBBgwFoAUClL5PFn9wW3dNoOcX7OfrxCc8+YwDAYDVR0T
            BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAMnVSahn7iaQdZgMqJtuokuijTkFU
            y4IwXGMf9psq18UMvjeWG0LauWQyBGdMQ6yNLC8YeboLbc19xbdvTBrMSAj7c1VY
            MZ3hpOkOo9jpQxAzCF8o+IDEisuZbRN+ZSRnoW5ruIeU9FT/3JlKm6xYFBbP3ijH
            kxFfLlJeLhhgbkB1wPLhQsO5rP/6DRD+CA9ympxn+gO2YX/5gqgzEQSN3RQANaBG
            U4yLz+t2SO2AgIKBDxwFGws+ciTEnu+9NLx9BYUI1BtbKuS/nwFIcJ0FkpAUOn0+
            6yN6vwM0t9bfXG8mLizAecWpbodz0YsizQwA8wJeKnmbR/u0ZOxp4qXpfg==
            -----END CERTIFICATE-----
          type: string
        comment:
          description: Certificate description.
          example: my awesome intermediate CA certificate
          type: string
      required:
      - certificate
      - comment
      type: object
    DeviceStreamsResponseWeb:
      example:
        streamId: urn:lo:nsid:sensor:1234!measures
        lastUpdate: 2018-10-30T17:26:53.012Z
        count: 42
      properties:
        streamId:
          description: id of the stream
          example: urn:lo:nsid:sensor:1234!measures
          type: string
        count:
          description: number of messages sent by the device into this stream
          example: 42
          format: int32
          type: integer
        lastUpdate:
          description: date of the last message sent by the device into this stream
          example: 2018-10-30T17:26:53.012Z
          type: string
      type: object
    DataMessageFilter:
      example:
        connectors:
        - connectors
        - connectors
        deviceIds:
        - deviceIds
        - deviceIds
        groupPaths:
        - includeSubPath: false
          path: /europe/france
        - includeSubPath: false
          path: /europe/france
        tags:
        - - ALERT
      properties:
        connectors:
          description: list of filtered connectors. Null or empty to accept all connectors
          items:
            type: string
          type: array
        deviceIds:
          description: list of filtered devices. Null or empty to accept all devices
          items:
            type: string
          type: array
        groupPaths:
          description: list of filtered group paths. Null or empty to accept all group
            paths
          items:
            $ref: '#/components/schemas/GroupPath'
          type: array
        tags:
          description: list of groups of tags that should be contained in message
            tags. There is a match if at least one group of tags is a match. A group
            of tags is a match if the tags of the message contains all elements of
            this group.<br>e.g. [["ALERT"]] will match all messages containing tag
            'ALERT'.<br>e.g. [["HIGH", "ALERT"],["PROD"]] will match messages with
            either tag 'PROD' or both tags 'ALERT' and 'HIGH'.
          example:
          - - ALERT
          items:
            items:
              type: string
            type: array
          type: array
      type: object
    UpdatePasswordWithTokenReqWeb:
      description: body of user update password With token request
      example:
        firstName: firstName
        lastName: lastName
        password: MynewPWD
        phoneNumber: phoneNumber
        tokenId: tokenId
        captcha: captcha
        company: company
        captchaToken: captchaToken
        login: login
      properties:
        captcha:
          description: security captcha got from user
          type: string
        captchaToken:
          description: token security captcha waited
          type: string
        company:
          description: tenant company
          type: string
        firstName:
          description: tenant main user first name
          type: string
        lastName:
          description: tenant main user last name
          type: string
        login:
          description: user email
          type: string
        password:
          description: new user password
          example: MynewPWD
          type: string
        phoneNumber:
          description: tenant main user phone number
          type: string
        tokenId:
          description: token identifier to for mail change
          type: string
      required:
      - captcha
      - captchaToken
      - company
      - firstName
      - lastName
      - login
      - password
      - tokenId
      type: object
    Targets:
      description: defines the targeted device of an ActivityRule
      example:
        deviceIds:
        - deviceIds
        - deviceIds
        groupPaths:
        - includeSubPath: false
          path: /europe/france
        - includeSubPath: false
          path: /europe/france
      properties:
        deviceIds:
          description: List of targeted device ids. This field should not be empty
            if groupPaths is empty.
          items:
            type: string
          type: array
        groupPaths:
          description: list of targeted group paths. This field should not be empty
            if deviceIds is empty.
          items:
            $ref: '#/components/schemas/GroupPath'
          type: array
      type: object
    PartnerDataItemSwagger:
      example:
        metadata:
          source: urn:tenantName:FFFFFFFFFFFFFFFF!mystream
          encoding: encoding
        streamId: urn:lo:nsid:kiwatch-IpCamera:1454!notification
        model: kiwatch_v1
        value:
          type: INTRUSION
          recordUuid: c7bfa694-bb0c-4383-b81d-84a7a4bcaeb5
          duration: 3024.0
        tags:
        - camera
        - grenoble
        timestamp: 2016-08-24T10:32:52.598Z
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          description: Model of the injected data. Data with the same model must have
            coherent types in each value fields. This field is required to perform
            an advanced search on the data. Can not contains space or dot characters.
            Should not be empty or blank.
          example: kiwatch_v1
          type: string
        streamId:
          description: 'StreamId in which the data will be added. Should not contains
            following character or space : '' \ " ; { } ( )'
          example: urn:lo:nsid:kiwatch-IpCamera:1454!notification
          type: string
        tags:
          description: Easy way to 'tag' the data in order to ease up advanced search
            through all streams and models
          example:
          - camera
          - grenoble
          items:
            type: string
          type: array
        timestamp:
          description: ISO 8601 date time
          example: 2016-08-24T10:32:52.598Z
          type: string
        value:
          description: Must be a JsonObject (primitive objects like string or int
            are not allowed)
          example:
            type: INTRUSION
            recordUuid: c7bfa694-bb0c-4383-b81d-84a7a4bcaeb5
            duration: 3024.0
          properties: {}
          type: object
      required:
      - metadata
      - value
      type: object
    Pipeline:
      description: DataMessage Pipeline definition
      example:
        filter:
          connectors:
          - lora
          encodings:
          - encodings
          - encodings
          groupPaths:
          - includeSubPath: false
            path: /europe/france
          - includeSubPath: false
            path: /europe/france
          tags:
          - - ALERT
        priorityLevel: 0
        created: created
        name: name
        description: description
        id: id
        steps:
        - type: externalTransformation
          name: appspot data enricher
          url: http://lo-data-transformation.appspot.com/enrich
          headers:
            x-my-header:
            - account-1234
        - type: cellularGeolocEnrichment
          triggeringCondition: ON_EMPTY_ROOT_LOCATION
          overrideRootLocationPolicy: ALWAYS
        enabled: false
      properties:
        created:
          description: pipeline's creation date (ISO-8601). Should be null for post
            and update action.
          type: string
        description:
          description: 'pipeline description (length limit : 2000).'
          type: string
        enabled:
          description: pipeline activation. Default is false.
          example: false
          type: boolean
        filter:
          $ref: '#/components/schemas/PipelineFilter'
        id:
          description: id of the pipeline. Should be null when used for POST. Required
            for update.
          type: string
        name:
          description: 'pipeline name (length limit : 1000).'
          type: string
        priorityLevel:
          description: pipeline's priority level. When several pipelines match the
            input filter, then the priority is given to the pipeline with lowest priorityLevel.
            If several pipelines match filter and the share the same priorityLevel,
            then the oldest pipeline is chosen (based on 'created' field).
          format: int64
          type: integer
        steps:
          description: list of steps of the pipelines. Should contain at least 1 step.
            Available steps are defined in developer's guide.
          example:
          - type: externalTransformation
            name: appspot data enricher
            url: http://lo-data-transformation.appspot.com/enrich
            headers:
              x-my-header:
              - account-1234
          - type: cellularGeolocEnrichment
            triggeringCondition: ON_EMPTY_ROOT_LOCATION
            overrideRootLocationPolicy: ALWAYS
          items:
            $ref: '#/components/schemas/PipelineStep'
          type: array
      required:
      - enabled
      - name
      - priorityLevel
      - steps
      type: object
    DeferredListenableFutureResult«DslSearchRequestResponseWithHitsOnly,ResponseEntity«object»»:
      properties:
        result:
          properties: {}
          type: object
        setOrExpired:
          type: boolean
      type: object
    ActionPolicy:
      description: Object describing the relationship between triggers (message or
        events) and actions (email, sms, fifo publish or http push)
      example:
        name: name
        id: id
        triggers:
          deviceCreated:
            filter:
              connectors:
              - connectors
              - connectors
              groupPaths:
              - includeSubPath: false
                path: /europe/france
              - includeSubPath: false
                path: /europe/france
              tags:
              - - ALERT
            version: 5
          loraNetwork:
            filter:
              messageTypes:
              - UNCONFIRMED_DATA_UP
              - UNCONFIRMED_DATA_UP
            version: 7
          commandStatus:
            filter:
              status:
              - PENDING
              - PENDING
            version: 0
          deviceActivity:
            filter:
              deviceIds:
              - deviceIds
              - deviceIds
              ruleIds:
              - ruleIds
              - ruleIds
            version: 1
          matchingFired:
            filter:
              ruleIds:
              - ruleIds
              - ruleIds
            version: 9
          stateChange:
            filter:
              ruleIds:
              - ruleIds
              - ruleIds
            version: 3
          dataMessage:
            filter:
              connectors:
              - connectors
              - connectors
              deviceIds:
              - deviceIds
              - deviceIds
              groupPaths:
              - includeSubPath: false
                path: /europe/france
              - includeSubPath: false
                path: /europe/france
              tags:
              - - ALERT
            version: 6
          deviceDeleted:
            filter:
              connectors:
              - connectors
              - connectors
              groupPaths:
              - includeSubPath: false
                path: /europe/france
              - includeSubPath: false
                path: /europe/france
              tags:
              - - ALERT
            version: 5
          deviceStatus:
            filter:
              connectors:
              - connectors
              - connectors
              groupPaths:
              - includeSubPath: false
                path: /europe/france
              - includeSubPath: false
                path: /europe/france
            version: 2
        actions:
          emails:
          - cc:
            - cc
            - cc
            contentTemplate: contentTemplate
            cci:
            - cci
            - cci
            subjectTemplate: subjectTemplate
            to:
            - to
            - to
          - cc:
            - cc
            - cc
            contentTemplate: contentTemplate
            cci:
            - cci
            - cci
            subjectTemplate: subjectTemplate
            to:
            - to
            - to
          azureEventHubs:
          - sharedAccessKey: sharedAccessKey
            sharedAccessKeyName: sharedAccessKeyName
            retryOnFailure: false
            jsonPath: jsonPath
            eventHubsNamespace: eventHubsNamespace
            eventHubName: eventHubName
            content: content
          - sharedAccessKey: sharedAccessKey
            sharedAccessKeyName: sharedAccessKeyName
            retryOnFailure: false
            jsonPath: jsonPath
            eventHubsNamespace: eventHubsNamespace
            eventHubName: eventHubName
            content: content
          fifoPublish:
          - fifoName: fifoName
          - fifoName: fifoName
          sms:
          - destinationPhoneNumbers:
            - destinationPhoneNumbers
            - destinationPhoneNumbers
            contentTemplate: contentTemplate
          - destinationPhoneNumbers:
            - destinationPhoneNumbers
            - destinationPhoneNumbers
            contentTemplate: contentTemplate
          httpPush:
          - headers:
              key:
              - headers
              - headers
            retryOnFailure: false
            jsonPath: jsonPath
            content: content
            webhookUrl: webhookUrl
          - headers:
              key:
              - headers
              - headers
            retryOnFailure: false
            jsonPath: jsonPath
            content: content
            webhookUrl: webhookUrl
        enabled: false
      properties:
        actions:
          $ref: '#/components/schemas/Actions'
        enabled:
          description: Enable or disable this action policy
          example: false
          type: boolean
        id:
          description: Id of the action policy. Set by LiveObjects, should be null
            on POST.
          type: string
        name:
          description: The user-defined name of the action policy
          type: string
        triggers:
          $ref: '#/components/schemas/ActionTriggers'
      required:
      - actions
      - name
      - triggers
      type: object
    GwConfig:
      example:
        version: 2.2.47
      properties:
        version:
          description: Version
          example: 2.2.47
          type: string
      type: object
    AddPartnerTenantRequest:
      example:
        name: garmin
        options:
        - id: Device_Quota_OFR_6M
          parameters: '{"device: 10", "downlink: 200"}'
        - id: Device_Quota_OFR_6M
          parameters: '{"device: 10", "downlink: 200"}'
        language: fr
        login: support
        offerMappingId: Marketplace_Prepaid_OFR
        email: support@garmin.com
        properties:
          key: properties
      properties:
        email:
          description: email of the main user account
          example: support@garmin.com
          type: string
        language:
          description: Initial language of the user account
          example: fr
          type: string
        login:
          description: login of the main user account (unique)
          example: support
          type: string
        name:
          description: name (unique) of the main user account
          example: garmin
          type: string
        offerMappingId:
          description: identifier of the offer mapping
          example: Marketplace_Prepaid_OFR
          type: string
        options:
          description: options definition
          items:
            $ref: '#/components/schemas/OptionPartnerTenant'
          type: array
        properties:
          additionalProperties:
            type: string
          description: tenant properties
          type: object
      required:
      - email
      - language
      - login
      - name
      - offerMappingId
      type: object
    CommandRequest:
      example:
        connector: mqtt
        value:
          req: reboot
          arg:
            delay: 1000.0
      properties:
        connector:
          description: connector/protocol to use to forward the command
          enum:
          - mqtt
          example: mqtt
          type: string
        value:
          description: command value (protocol/connector-dependant). The length is
            limited
          example:
            req: reboot
            arg:
              delay: 1000.0
          properties: {}
          type: object
      required:
      - connector
      - value
      type: object
    LoraDeviceUpdateReqWeb:
      example:
        profile: Generic_classA_RX2SF9
        name: My LoRa Device
        appKey: 9876543210ABCDEF
        appEUI: FEDCBA9876543210
        encoding: LoRaMote_V1
        connectivityOptions:
          tdoa: true
          ackUl: true
        connectivityPlan: orange-cs/loraconnect_basique
        deviceStatus: ACTIVATED
        tags:
        - Lyon
        - temperature
      properties:
        appEUI:
          description: Application identifier (AppEUI)
          example: FEDCBA9876543210
          type: string
        appKey:
          description: Application Key (AppKey)
          example: 9876543210ABCDEF
          type: string
        connectivityOptions:
          $ref: '#/components/schemas/LoraConnectivityOptionsWeb'
        connectivityPlan:
          description: Device connectivity plan.
          example: orange-cs/loraconnect_basique
          type: string
        deviceStatus:
          description: LoraDeviceUpdateReqWeb status
          enum:
          - ACTIVATED
          - DEACTIVATED
          example: ACTIVATED
          type: string
        encoding:
          description: LoRa device encoding
          example: LoRaMote_V1
          type: string
        name:
          description: LoRa device name
          example: My LoRa Device
          type: string
        profile:
          description: LoRa device profile
          example: Generic_classA_RX2SF9
          type: string
        tags:
          description: List of tags, used to tag uplink from this device
          example:
          - Lyon
          - temperature
          items:
            type: string
          type: array
      type: object
    TenantExternalView:
      example:
        offerAndOptions:
          offer:
            displayName: displayName
            name: name
          options: Discover
        name: Tenant-test
        id: 57ed0a98266e260a12345
        properties:
          diseId: "12345678"
      properties:
        id:
          description: tenant Id
          example: 57ed0a98266e260a12345
          type: string
        name:
          description: tenant name
          example: Tenant-test
          type: string
        offerAndOptions:
          $ref: '#/components/schemas/OfferAndOptions'
        properties:
          additionalProperties:
            type: string
          description: tenant properties
          example:
            diseId: "12345678"
          type: object
      type: object
    AssetAlias:
      example:
        namespace: namespace
        id: id
      properties:
        id:
          type: string
        namespace:
          type: string
      type: object
    DataBulkItemWeb:
      description: Unitary data item in a bulk.
      example:
        metadata:
          source: urn:tenantName:FFFFFFFFFFFFFFFF!mystream
          encoding: encoding
        streamId: urn:tenantName:FFFFFFFFFFFFFFFF!mystream
        location:
          provider: GPS
          alt: 5.00001
          accuracy: 10.0
          lon: -30.00001
          lat: 45.000009
        model: MyModelSettingName
        value:
          hexaFlag001: 2F00
          temp: 22.0
          pressure: 36575.0
        tags:
        - Motor
        - Engine
        timestamp: 2016-08-24T10:32:52.598Z
      properties:
        location:
          $ref: '#/components/schemas/Location'
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          description: Model of the injected data. Data with the same model must have
            coherent types in each value fields. This field is required to perform
            an advanced search on the data. Can not contains space or dot characters.
          example: MyModelSettingName
          type: string
        streamId:
          description: 'StreamId in which the data will be added. Should not contains
            following character or space : '' \ " ; { } ( )'
          example: urn:tenantName:FFFFFFFFFFFFFFFF!mystream
          type: string
        tags:
          description: Easy way to 'tag' the data in order to ease up advanced search
            through all streams and models
          example:
          - Motor
          - Engine
          items:
            type: string
          type: array
        timestamp:
          description: ISO 8601 date time
          example: 2016-08-24T10:32:52.598Z
          type: string
        value:
          description: Must be a JsonObject (primitive objects like string or int
            are not allowed). It can not contain field names starting with '$' character
            or containing dot '.' character and its size should not exceed 1 MiB.
            To use decoding capability, 'value.payload' field must be use to set encoded
            content as String (in case of binary content, HexBinary String representation
            of this content)
          example:
            hexaFlag001: 2F00
            temp: 22.0
            pressure: 36575.0
          properties: {}
          type: object
      required:
      - value
      type: object
    DeviceUpdate:
      description: an update to a device definition
      example:
        defaultDataStreamId: urn:lo:nsid:mysensor:001
        name: 'sensor #12'
        description: description
        id: urn:lo:nsid:sensor:2327398
        properties:
          manufacturer: MyDeviceMaker, Inc.
          hwVersion: 2.0.1.7-us_64
        group:
          path: /france/paris
          id: E89AE
        tags:
        - demo
        - sensor
      properties:
        defaultDataStreamId:
          description: default data streamId. Expected not empty string. Following
            character are forbidden <code>"'\"\\;{}() "</code> (max 255 characters)
          example: urn:lo:nsid:mysensor:001
          type: string
        description:
          description: new device description. Expected string (max 500 characters)
          type: string
        group:
          $ref: '#/components/schemas/DeviceGroup'
        id:
          description: new device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}'
            must respect the following regular expression <code>^urn:lo:nsid:([\w\-_]{1,128}):([\w\-_:]{1,128})$</code>
            (max 269 characters)
          example: urn:lo:nsid:sensor:2327398
          type: string
        name:
          description: new device human-readable name. Expected string (max 255 characters)
          example: 'sensor #12'
          type: string
        properties:
          additionalProperties:
            type: string
          description: 'map of key/value string pairs detailing device properties
            to update. Max number of properties depends of your offer settings. A
            property name must not include following characters <code>$.</code> and
            max length is 128. Invalid property names are : ''class'', ''_class''.
            Property value max length is 256.'
          example:
            manufacturer: MyDeviceMaker, Inc.
            hwVersion: 2.0.1.7-us_64
          type: object
        tags:
          description: new device set of tags. Max number of tags depends of your
            offer settings. Tag value max length is 32.
          example:
          - demo
          - sensor
          items:
            type: string
          type: array
      required:
      - id
      type: object
    SearchDataMessage:
      properties:
        created:
          type: string
        extra:
          additionalProperties:
            type: string
          type: object
        id:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        metadata:
          properties: {}
          type: object
        model:
          type: string
        streamId:
          type: string
        tags:
          items:
            type: string
          type: array
        timestamp:
          type: string
        value:
          properties: {}
          type: object
      type: object
    SMSConnectorSendSMSReqWeb:
      example:
        base64Payload: base64Payload
        serverPhoneNumber: serverPhoneNumber
        hexPayload: hexPayload
        msisdns:
        - msisdns
        - msisdns
        textPayload: textPayload
      properties:
        base64Payload:
          description: (deprecated) please use hexPayload
          type: string
        hexPayload:
          description: 'payload as Hexadecimal PDU Message Entry (GSM 03.40) ex: "000100009100000E74747A0E4ACF416110BD3CA703".
            If used, don''t set textPayload and base64Payload.'
          type: string
        msisdns:
          description: 'device''s SIM Card identifier(s) ex: ["33666666667"]. Must
            be registered in the business settings prior to send SMS only Orange France
            MSISDNs are supported for now'
          items:
            type: string
          type: array
        serverPhoneNumber:
          description: 'server phone number ex: "20258". Must be defined in OfferSettings.'
          type: string
        textPayload:
          description: 'payload as text ex: "this is a test". If used, don''t set
            hexPayload and base64Payload.'
          type: string
      required:
      - msisdns
      - serverPhoneNumber
      type: object
    NewDeviceParameterValue:
      example:
        type: INT32
        value: '{}'
      properties:
        type:
          description: parameter value type (INT32, UINT32, FLOAT, STRING or BINARY)
          enum:
          - INT32
          - UINT32
          - BINARY
          - STRING
          - FLOAT
          - UNKNOWN
          type: string
        value:
          description: 'configuration parameter value (number for INT32/UINT32 type,
            string for STRING type,float for FLOAT type, base64-encoded string for
            BINARY type) '
          properties: {}
          type: object
      type: object
    CommandAddRequest:
      example:
        request:
          connector: mqtt
          value:
            req: reboot
            arg:
              delay: 1000.0
        policy:
          ackTimeoutInSeconds: 120
          expirationInSeconds: 120
          ackMode: APPLICATIVE
          attempts: 3
      properties:
        request:
          $ref: '#/components/schemas/CommandRequest'
        policy:
          $ref: '#/components/schemas/CommandPolicy'
      required:
      - request
      type: object
    CampaignOptions:
      example:
        dynamicallyAddEligibleDevice: true
      properties:
        dynamicallyAddEligibleDevice:
          description: Devices matching the target filter can be dynamically added
            to the campaign
          example: true
          type: boolean
      type: object
    LoraConnectivityOptions:
      example:
        tdoa: false
        ackUl: false
      properties:
        ackUl:
          description: Enable or disable ack UL option
          example: false
          type: boolean
        tdoa:
          description: Enable or disable TDOA option
          example: false
          type: boolean
      required:
      - ackUl
      type: object
    MetadataResourceConnectors:
      example:
        optional:
        - optional
        - optional
        mandatory:
        - mandatory
        - mandatory
      properties:
        mandatory:
          description: the mandatory connector metadata
          items:
            type: string
          type: array
        optional:
          description: the optional connector metadata
          items:
            type: string
          type: array
      type: object
    FirmwareUpdateWeb:
      example:
        requestedVersion: requestedVersion
        metadata:
          key: metadata
        created: created
        initialVersion: initialVersion
        errorCode: errorCode
        deviceErrorCode: deviceErrorCode
        errorOrigin: errorOrigin
        progress: 0.8008281904610115
        notifyTo: notifyTo
        id: id
        updated: updated
        errorDetails: errorDetails
        status: status
      properties:
        created:
          type: string
        deviceErrorCode:
          type: string
        errorCode:
          type: string
        errorDetails:
          type: string
        errorOrigin:
          type: string
        id:
          type: string
        initialVersion:
          type: string
        metadata:
          additionalProperties:
            type: string
          type: object
        notifyTo:
          type: string
        progress:
          format: double
          type: number
        requestedVersion:
          type: string
        status:
          type: string
        updated:
          type: string
      type: object
    JsonObject:
      type: object
    DeviceGroup:
      description: References to a device associated group
      example:
        path: /france/paris
        id: E89AE
      properties:
        id:
          description: group identifier. Expected string (max 6 characters)
          example: E89AE
          type: string
        path:
          description: 'group path. Authorized: letter (lowercase and uppercase),
            accented characters, number, space, dash, underscore and simple quote.
            A valid path must respect the following regular expression <code>^[\wÀ-ÖØ-öø-ÿ''
            -]{1,255}</code>.Expected string (max 255 characters)'
          example: /france/paris
          type: string
      type: object
    Pageable«Asset»:
      example:
        size: 1
        data:
        - metadata: '{}'
          topicResourceUpdate: topicResourceUpdate
          groupId: groupId
          description: Moisture sensor
          tags:
          - sensor
          - moisture
          connected: false
          topicParamUpdate: topicParamUpdate
          path:
          - namespace: namespace
            id: id
          - namespace: namespace
            id: id
          topicCommand: topicCommand
          lastUpdateTs: 6
          name: Pretty moisture sensor
          namespace: namespace
          id: id
          groupPath: groupPath
          properties:
            key: properties
          creationTs: 0
        - metadata: '{}'
          topicResourceUpdate: topicResourceUpdate
          groupId: groupId
          description: Moisture sensor
          tags:
          - sensor
          - moisture
          connected: false
          topicParamUpdate: topicParamUpdate
          path:
          - namespace: namespace
            id: id
          - namespace: namespace
            id: id
          topicCommand: topicCommand
          lastUpdateTs: 6
          name: Pretty moisture sensor
          namespace: namespace
          id: id
          groupPath: groupPath
          properties:
            key: properties
          creationTs: 0
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/Asset'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    ActivityStateMuteRequest:
      description: request to mute or reset the nextAlarm of AvtivityStates targeting
        specific deviceId and/or ruleId
      example:
        nextAlarmOrder: MUTE
        activityRuleId: activityRuleId
        deviceId: deviceId
      properties:
        activityRuleId:
          description: id of the targeted activityRule. At least one of deviceId/activityRuleId
            must be set.
          type: string
        deviceId:
          description: id of the targeted device. At least one of deviceId/activityRuleId
            must be set.
          type: string
        nextAlarmOrder:
          description: 'set the order type : mute or reset (from now) the next alarm'
          enum:
          - MUTE
          - RESET
          type: string
      required:
      - nextAlarmOrder
      type: object
    BinaryPayloadDescriptionTestRequest:
      example:
        template: template
        binaryPayloadHexString: binaryPayloadHexString
        mathEvalEnabled: true
        binaryPayloadStructure: binaryPayloadStructure
      properties:
        binaryPayloadHexString:
          type: string
        binaryPayloadStructure:
          type: string
        mathEvalEnabled:
          type: boolean
        template:
          type: string
      type: object
    ActivityState:
      description: defines the current activity state of a specific device and a specific
        activity rule
      example:
        numberOfAlarmReminders: 0
        lastActivity: lastActivity
        state: UNKNOWN
        nextAlarm: nextAlarm
        deviceId: deviceId
        activityRule:
          name: name
          id: id
          silentPolicy:
            duration: PT6H
            repeatInterval: P1DT12H
          targets:
            deviceIds:
            - deviceIds
            - deviceIds
            groupPaths:
            - includeSubPath: false
              path: /europe/france
            - includeSubPath: false
              path: /europe/france
          enabled: false
          tags:
          - tags
          - tags
      properties:
        activityRule:
          $ref: '#/components/schemas/ActivityRule'
        deviceId:
          description: id of the targeted device
          type: string
        lastActivity:
          description: timestamp (ISO 8601) of the last registered contact of the
            device
          type: string
        nextAlarm:
          description: timestamp (ISO 8601) of the next alarm for this rule if the
            device remains silent
          type: string
        numberOfAlarmReminders:
          description: number of times a reminder has been sent for the current state
          format: int32
          type: integer
        state:
          description: current state of the device
          enum:
          - UNKNOWN
          - SILENT
          - ACTIVE
          type: string
      required:
      - activityRule
      - deviceId
      - nextAlarm
      - numberOfAlarmReminders
      - state
      type: object
    DataMessageTrigger:
      example:
        filter:
          connectors:
          - connectors
          - connectors
          deviceIds:
          - deviceIds
          - deviceIds
          groupPaths:
          - includeSubPath: false
            path: /europe/france
          - includeSubPath: false
            path: /europe/france
          tags:
          - - ALERT
        version: 6
      properties:
        filter:
          $ref: '#/components/schemas/DataMessageFilter'
        version:
          description: requested object version
          enum:
          - 1
          format: int32
          type: integer
      required:
      - version
      type: object
    MonthMetrics:
      properties:
        connectors:
          additionalProperties:
            $ref: '#/components/schemas/ConnectorAccounting'
          description: connector (lora, mqtt, http) statistics
          type: object
        month:
          description: month in "YYYY-MM" format.
          example: 2019-01
          type: string
        services:
          additionalProperties:
            additionalProperties:
              format: int64
              type: integer
            type: object
          description: service statistics
          type: object
      type: object
    DeviceResourceWeb:
      description: a device resource state
      example:
        metadata:
          secured: true
        requested:
          version: v2
          timestamp: 2020-05-19T10:30:58Z
        reported:
          version: v2
          timestamp: 2020-05-19T10:30:58Z
      properties:
        metadata:
          additionalProperties:
            type: string
          description: metadata associated with this device resource
          example:
            secured: true
          type: object
        reported:
          $ref: '#/components/schemas/DeviceResourceVersionValueWeb'
        requested:
          $ref: '#/components/schemas/DeviceResourceVersionValueWeb'
      type: object
    UpdateEmailReqWeb:
      description: body of update User Email request
      example:
        tokenId: tokenId
        captcha: captcha
        captchaToken: captchaToken
      properties:
        captcha:
          description: Security captcha got from user
          type: string
        captchaToken:
          description: security captcha waited
          type: string
        tokenId:
          description: token to for mail change
          type: string
      required:
      - captcha
      - captchaToken
      - tokenId
      type: object
    CampaignStatsPerStatus:
      description: Statistics about devices with a given status
      example:
        canceled: 0
        inProgress: 1
        failure: 6
        success: 2
        pending: 5
        notStarted: 5
      properties:
        canceled:
          description: Number of devices with status 'canceled'
          format: int32
          type: integer
        failure:
          description: Number of devices with status 'failure'
          format: int32
          type: integer
        inProgress:
          description: Number of devices with status 'in progress'
          format: int32
          type: integer
        notStarted:
          description: Number of devices with status 'not started'
          format: int32
          type: integer
        pending:
          description: Number of devices with status 'pending'
          format: int32
          type: integer
        success:
          description: Number of devices with status 'success'
          format: int32
          type: integer
      required:
      - canceled
      - failure
      - inProgress
      - notStarted
      - pending
      - success
      type: object
    CsvPayloadDescription:
      description: binary decoder provisioning information
      example:
        template: template
        metadata:
          certified: false
          certifiedSince: 2019-05-15T07:55:55.555Z
        columns:
        - name: column1
          jsonType: NUMERIC
        - name: column1
          jsonType: NUMERIC
        options:
          escapeChar: \
          quoteChar: '"'
          lineFeedSeparator: |2+

          columnSeparator: ;
          skipWhiteSpace: true
          useEscapeChar: true
        model: model
        id: id
        encoding: encoding
        type: type
        updated: 2019-05-15T07:55:55.555Z
        enabled: false
        mathEvalEnabled: false
        tags:
        - tags
        - tags
      properties:
        columns:
          description: colums description for the csv format
          items:
            $ref: '#/components/schemas/CsvColumn'
          type: array
        enabled:
          description: decoder activation. Default is false.
          example: false
          type: boolean
        encoding:
          description: unique decoder name. Will be used to trigger the decoding function
          type: string
        id:
          description: id of the decoder. Should be null when used for POST. Required
            for update.
          type: string
        mathEvalEnabled:
          description: applying math evaluation on templated decoded result
          example: false
          type: boolean
        metadata:
          $ref: '#/components/schemas/PayloadDescriptionMetadata'
        model:
          description: if empty, the decoded data will use the value of 'model' field
            from encoded data. If set, this value will be used to override 'model'
            field in decoded data.
          type: string
        options:
          $ref: '#/components/schemas/CsvOptions'
        tags:
          description: tags used for filtering
          items:
            type: string
          type: array
        template:
          description: decoding result optional template
          type: string
        type:
          description: 'decoder type : csv, binary, javascript'
          type: string
        updated:
          description: date of the last update. ISO 8601 date time.
          example: 2019-05-15T07:55:55.555Z
          readOnly: true
          type: string
      required:
      - columns
      - enabled
      - encoding
      type: object
    Pageable«ResourceVersion»:
      example:
        size: 1
        data:
        - resourceId: resourceId
          file: file
          checksum: checksum
          tenantId: tenantId
          description: description
          resourceVersionId: resourceVersionId
          updateTs: 6
          compatibleVersions:
          - compatibleVersions
          - compatibleVersions
          creationTs: 0
        - resourceId: resourceId
          file: file
          checksum: checksum
          tenantId: tenantId
          description: description
          resourceVersionId: resourceVersionId
          updateTs: 6
          compatibleVersions:
          - compatibleVersions
          - compatibleVersions
          creationTs: 0
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/ResourceVersion'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    FiringGuard:
      description: Hold a FiringRule from triggering a FiredEvent if it has already
        been sent for the same aggregationKeys. Will exist only for FiringRule of
        type ONCE or SLEEP.
      example:
        matchingContext:
          matchingRule:
            dataPredicate: '{}'
            name: name
            id: id
            enabled: false
          data:
            metadata: '{}'
            streamId: streamId
            extra:
              key: extra
            location:
              provider: GPS
              alt: 5.00001
              accuracy: 10.0
              lon: -30.00001
              lat: 45.000009
            model: model
            value: '{}'
            tags:
            - tags
            - tags
            timestamp: timestamp
          tenantId: tenantId
          timestamp: timestamp
        firingRuleId: firingRuleId
        created: created
        guardCriteria:
        - keyPath: keyPath
          value: '{}'
        - keyPath: keyPath
          value: '{}'
        tenantId: tenantId
        id: id
        expireAt: expireAt
      properties:
        created:
          description: creation of this FiringGuard
          type: string
        expireAt:
          description: expiration of this FiringGuard
          type: string
        firingRuleId:
          description: id of the FiringRule linked to this FiringGuard.
          type: string
        guardCriteria:
          description: pairs of aggregationKey/value that are hold by this FiringGuard
          items:
            $ref: '#/components/schemas/SelectionCriteria'
          type: array
        id:
          description: id of the FiringGuard.
          type: string
        matchingContext:
          $ref: '#/components/schemas/MatchingContext'
        tenantId:
          description: identifier of tenant account this FiringRule belongs to .
          type: string
      required:
      - created
      - firingRuleId
      - guardCriteria
      - id
      - matchingContext
      - tenantId
      type: object
    DeferredResult«Void»:
      properties:
        result:
          properties: {}
          type: object
        setOrExpired:
          type: boolean
      type: object
    DeviceParametersSetRequest:
      example:
        parameters:
          key:
            type: INT32
            value: '{}'
      properties:
        parameters:
          additionalProperties:
            $ref: '#/components/schemas/NewDeviceParameterValue'
          description: Device configuration update. Max number of parameters is 100.
            Parameter name max length is 128. Parameter value must be valid according
            to the type and max length is 2000.
          type: object
      type: object
    ConnectorAccounting:
      properties:
        inventory:
          additionalProperties:
            format: int64
            type: integer
          type: object
        traffic:
          $ref: '#/components/schemas/Traffic'
      type: object
    GwSystem:
      example:
        powerState: UP
        timeSync: NTP
        gpsState: UNKNOWN
      properties:
        gpsState:
          description: GPS state
          example: UNKNOWN
          type: string
        powerState:
          description: Power state
          example: UP
          type: string
        timeSync:
          description: Time synchronization
          example: NTP
          type: string
      type: object
    Device:
      example:
        interfaces:
        - capabilities:
            configuration:
              available: true
              version: 1
            resource:
              available: true
              version: 1
            command:
              available: true
              version: 1
          connector: connector
          activity: '{}'
          created: 2016-06-03T15:55:36.944Z
          definition: '{}'
          nodeId: nodeId
          deviceId: deviceId
          updated: 2016-06-03T15:55:36.944Z
          enabled: false
          status: ONLINE
          lastContact: lastContact
        - capabilities:
            configuration:
              available: true
              version: 1
            resource:
              available: true
              version: 1
            command:
              available: true
              version: 1
          connector: connector
          activity: '{}'
          created: 2016-06-03T15:55:36.944Z
          definition: '{}'
          nodeId: nodeId
          deviceId: deviceId
          updated: 2016-06-03T15:55:36.944Z
          enabled: false
          status: ONLINE
          lastContact: lastContact
        created: created
        defaultDataStreamId: urn:lo:nsid:mysensor:001
        description: Moisture sensor
        resources:
          key: resources
        tags:
        - sensor
        - moisture
        activityState: NOT_MONITORED
        name: Pretty moisture sensor
        firmwares:
          key: firmwares
        id: id
        config:
          logLevel:
            type: STRING
            value: debug
          frequency:
            type: INT32
            value: 200.0
        updated: updated
        properties:
          key: properties
        group:
          path: /france/paris
          id: E89AE
      properties:
        id:
          description: Device URN
          type: string
        name:
          description: Human readable name
          example: Pretty moisture sensor
          type: string
        description:
          description: Device description
          example: Moisture sensor
          type: string
        tags:
          description: Device tags
          example:
          - sensor
          - moisture
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
          description: Device properties (from device provisioning)
          type: object
        group:
          $ref: '#/components/schemas/DeviceGroup'
        interfaces:
          description: List of this device's interfaces (i.e. 'connectivity nodes')
          items:
            $ref: '#/components/schemas/DeviceInterface'
          type: array
        config:
          additionalProperties:
            $ref: '#/components/schemas/DeviceParameterValue'
          description: Device configuration (last reported parameter values)
          example:
            logLevel:
              type: STRING
              value: debug
            frequency:
              type: INT32
              value: 200.0
          type: object
        firmwares:
          additionalProperties:
            type: string
          description: Device firmware versions
          type: object
        resources:
          additionalProperties:
            type: string
          description: Device resource versions
          type: object
        defaultDataStreamId:
          description: default data streamId
          example: urn:lo:nsid:mysensor:001
          type: string
        created:
          description: Date/time when device was first registered
          type: string
        updated:
          description: Date/time when device status has been lastly updated
          type: string
        activityState:
          description: Activity state of the device according to the activity rules
            set for this device
          enum:
          - NOT_MONITORED
          - UNKNOWN
          - SILENT
          - ACTIVE
          type: string
      required:
      - created
      - id
      type: object
    FifoTopic:
      description: body of FIFO data
      example:
        messageUnacknowledged: 5
        messageBytes: 1
        name: MyFIFOName
        messages: 7
        consumers: 0
        messageTtl: 5
        messageUnacknowledgedBytes: 2
        maxLengthBytes: 6
      properties:
        consumers:
          description: Number of active consumers
          format: int64
          type: integer
        maxLengthBytes:
          description: Maximum number of bytes that can be stored
          format: int64
          type: integer
        messageBytes:
          description: Total number of bytes stored
          format: int64
          type: integer
        messageTtl:
          description: Time in seconds before a message is dropped if not consumed
          format: int32
          type: integer
        messageUnacknowledged:
          description: Total number of bytes of unacknowledged messages
          format: int64
          type: integer
        messageUnacknowledgedBytes:
          description: Total number of bytes of unacknowledged messages
          format: int64
          type: integer
        messages:
          description: Number of message stored
          format: int64
          type: integer
        name:
          description: Topic name of the FIFO
          example: MyFIFOName
          type: string
      required:
      - name
      type: object
    Resource:
      description: Resource data
      example:
        versionAliases:
          prod: "1.1"
        metadata:
          secured: true
        resourceId: MyResource001
        connector: connector
        tenantId: 57xxxxxxxxxxxxxxxxxxxxxx
        description: It the last provided resource
        label: My resource Label
        updateTs: 6
        creationTs: 0
      properties:
        connector:
          description: the resource's connector
          type: string
        creationTs:
          description: creation timestamp
          format: int64
          type: integer
        description:
          description: the resource's description
          example: It the last provided resource
          type: string
        label:
          description: the resource's label
          example: My resource Label
          type: string
        metadata:
          additionalProperties:
            type: string
          description: the resource metadata
          example:
            secured: true
          type: object
        resourceId:
          description: the resource's identifier
          example: MyResource001
          type: string
        tenantId:
          description: identifier of tenant account
          example: 57xxxxxxxxxxxxxxxxxxxxxx
          type: string
        updateTs:
          description: last update timestamp
          format: int64
          type: integer
        versionAliases:
          additionalProperties:
            type: string
          description: the resource version aliases
          example:
            prod: "1.1"
          type: object
      type: object
    ResourceVersion:
      example:
        resourceId: resourceId
        file: file
        checksum: checksum
        tenantId: tenantId
        description: description
        resourceVersionId: resourceVersionId
        updateTs: 6
        compatibleVersions:
        - compatibleVersions
        - compatibleVersions
        creationTs: 0
      properties:
        checksum:
          type: string
        compatibleVersions:
          items:
            type: string
          type: array
        creationTs:
          format: int64
          type: integer
        description:
          type: string
        file:
          type: string
        resourceId:
          type: string
        resourceVersionId:
          type: string
        tenantId:
          type: string
        updateTs:
          format: int64
          type: integer
      type: object
    UpdateInterfaceReqWeb:
      example:
        definition: '{}'
        deviceId: urn:lo:nsid:sensor:2327398
        enabled: false
      properties:
        deviceId:
          description: New device id this connector node must be associated with (or
            null)
          example: urn:lo:nsid:sensor:2327398
          type: string
        enabled:
          description: New enabled state for this connector node (or null)
          example: false
          type: boolean
        definition:
          description: New interface definition
          properties: {}
          type: object
      type: object
    ClientCertificatesConfiguration:
      example:
        caCertIds:
        - 5b057d0fb8605a5e80758e42
        required: true
      properties:
        caCertIds:
          description: List of Ca Certificate Ids used to authenticate devices. Expected
            array of string (max 100 elements, value max 255 characters)
          example:
          - 5b057d0fb8605a5e80758e42
          items:
            type: string
          type: array
        required:
          description: Indicates if the client must use TLS client cert authentication
          example: true
          type: boolean
      type: object
    ContactMessage:
      description: Contact information
      example:
        cc:
        - cc
        - cc
        cci:
        - cci
        - cci
        to:
        - to
        - to
        phoneNumbers:
        - phoneNumbers
        - phoneNumbers
      properties:
        cc:
          description: cc
          items:
            type: string
          type: array
        cci:
          description: cci
          items:
            type: string
          type: array
        phoneNumbers:
          description: phoneNumbers
          items:
            type: string
          type: array
        to:
          description: to
          items:
            type: string
          type: array
      type: object
    Pageable«ApiKey»:
      example:
        size: 1
        data:
        - actingTenantId: 57FFFFFFFFFFFFFFFFFFFFFF
          masterKey: true
          roles:
          - USER_R
          - APIKEY_R
          description: My description of Api Key target
          usurpedKey: true
          expired: true
          scope:
            fifos:
            - default
            - supplierA
          from: 1473078900000
          id: 52FFCAFEDECAFFFFFFFFFFF
          value: e45ffc0d97c64cd6b959436f9200d5d1
          creationTs: 1473078982518
          clientCert:
            caCertIds:
            - 5b057d0fb8605a5e80758e42
            required: true
          rateLimit:
            mqttDeviceWindowSize: 1
            mqttDeviceMaxMessages: 1
            httpWindowSize: 1
            httpMaxCalls: 1
            mqttBridgeMaxMessages: 1
            mqttBridgeWindowSize: 1
          sessionKey: true
          active: true
          label: My Api Key Name
          debugModeEndTs: 1475224200000
          nonce: 875fd664f97540f0ad9ec2f889a40ce9
          userId: 57FFFFFFFFFFFFFFFFFFFFFF
          parentId: 57FFFFFFFFFFFFFFFFFFFFFF
          tenantId: 57FFFFFFFFFFFFFFFFFFFFFF
          actingUserId: 57FFFFFFFFFFFFFFFFFFFFFF
          lastActivity: 1473078982518
          sessionTTL: 144410
          to: 1475224200000
        - actingTenantId: 57FFFFFFFFFFFFFFFFFFFFFF
          masterKey: true
          roles:
          - USER_R
          - APIKEY_R
          description: My description of Api Key target
          usurpedKey: true
          expired: true
          scope:
            fifos:
            - default
            - supplierA
          from: 1473078900000
          id: 52FFCAFEDECAFFFFFFFFFFF
          value: e45ffc0d97c64cd6b959436f9200d5d1
          creationTs: 1473078982518
          clientCert:
            caCertIds:
            - 5b057d0fb8605a5e80758e42
            required: true
          rateLimit:
            mqttDeviceWindowSize: 1
            mqttDeviceMaxMessages: 1
            httpWindowSize: 1
            httpMaxCalls: 1
            mqttBridgeMaxMessages: 1
            mqttBridgeWindowSize: 1
          sessionKey: true
          active: true
          label: My Api Key Name
          debugModeEndTs: 1475224200000
          nonce: 875fd664f97540f0ad9ec2f889a40ce9
          userId: 57FFFFFFFFFFFFFFFFFFFFFF
          parentId: 57FFFFFFFFFFFFFFFFFFFFFF
          tenantId: 57FFFFFFFFFFFFFFFFFFFFFF
          actingUserId: 57FFFFFFFFFFFFFFFFFFFFFF
          lastActivity: 1473078982518
          sessionTTL: 144410
          to: 1475224200000
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/ApiKey'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    Pageable«Group»:
      example:
        size: 1
        data:
        - path: /group1/group2
          created: 2017-12-27T12:59:59.877Z
          pathNode: group2
          description: Moisture sensor
          id: IbN89a
          updated: 2017-12-27T14:13:09.231Z
          parentId: PjFg6J
        - path: /group1/group2
          created: 2017-12-27T12:59:59.877Z
          pathNode: group2
          description: Moisture sensor
          id: IbN89a
          updated: 2017-12-27T14:13:09.231Z
          parentId: PjFg6J
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/Group'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    MatchingFiredFilter:
      example:
        ruleIds:
        - ruleIds
        - ruleIds
      properties:
        ruleIds:
          description: list of filtered rule Ids. Null or empty to accept all rule
            Ids
          items:
            type: string
          type: array
      type: object
    ApiKeyUpdateReqWeb:
      description: ApiKey in Update Request
      example:
        clientCert:
          caCertIds:
          - 5b057d0fb8605a5e80758e42
          required: true
        masterKey: false
        roles:
        - USER_R
        - API_KEY_R
        active: false
        description: description
        regenerateValue: false
        label: label
        debugModeEndTs: 0
        scope:
          fifos:
          - default
          - supplierA
        tenantId: 51FFFFFFFFFFFFFFFFFFFFFF
        from: 6
        sessionTtl: 300000
        to: 1
      properties:
        active:
          description: Status
          example: false
          type: boolean
        clientCert:
          $ref: '#/components/schemas/ClientCertificatesConfiguration'
        debugModeEndTs:
          description: Timestamp until which the debug mode will be activated
          format: int64
          type: integer
        description:
          description: Short description of the key. Expected string (limited to 140
            first characters)
          type: string
        from:
          description: Timestamp from which the key is valid
          format: int64
          type: integer
        label:
          description: Title of the key. Expected string (limited to 24 first characters)
          type: string
        masterKey:
          description: Specify the request is for a MasterKey (only update available
            for admin)
          example: false
          type: boolean
        regenerateValue:
          description: Request a random value regeneration
          example: false
          type: boolean
        roles:
          description: list of API key associated Roles. Basic roles are "USER_R",
            "USER_W", "API_KEY_R", "API_KEY_W" or any role string supplied at tenant
            account creation time. Expected array of role name (max all roles, role
            value max 255 characters)
          example:
          - USER_R
          - API_KEY_R
          items:
            type: string
          type: array
        scope:
          $ref: '#/components/schemas/ScopeApplication'
        sessionTtl:
          description: Maximum inactivity period (ms)
          example: 300000
          format: int64
          type: integer
        tenantId:
          description: identifier of tenant account this API key belongs to. Expected
            identifier (max 24 characters)
          example: 51FFFFFFFFFFFFFFFFFFFFFF
          type: string
        to:
          description: Timestamp until which the key is valid
          format: int64
          type: integer
      type: object
    ScopeApplication:
      example:
        fifos:
        - default
        - supplierA
      properties:
        fifos:
          description: List of allowed FIFOs to publish or subscribe. Expected array
            of string (max 100 elements, value max 255 characters)
          example:
          - default
          - supplierA
          items:
            type: string
          type: array
      type: object
    GeozoneContainerBase:
      example:
        description: description
        geometry:
          coordinates:
          - - - 0.8008281904610115
              - 0.8008281904610115
            - - 0.8008281904610115
              - 0.8008281904610115
          - - - 0.8008281904610115
              - 0.8008281904610115
            - - 0.8008281904610115
              - 0.8008281904610115
          type: Polygon
        properties: '{}'
        tags:
        - tags
        - tags
      properties:
        description:
          type: string
        geometry:
          $ref: '#/components/schemas/Polygon'
        properties:
          properties: {}
          type: object
        tags:
          items:
            type: string
          type: array
      type: object
    LoraCommand:
      example:
        data: 51285624ab5d
        commandStatus: SENT
        port: 1
        id: 5743000f0cf25e30a712e83c
        confirmed: true
        updateTs: 2016-06-09T08:04:37.971Z
        creationTs: 2016-06-03T15:55:36.944Z
      properties:
        commandStatus:
          description: 'Status of the command. SENT: The command was injected into
            LPWA network core. ERROR: The command could injected into LPWA network
            core.'
          enum:
          - PENDING
          - SENDING
          - SENT
          - DELIVERED
          - ERROR
          example: SENT
          type: string
        confirmed:
          description: Network ack confirmation
          example: true
          type: boolean
        creationTs:
          description: Date/time of the command creation
          example: 2016-06-03T15:55:36.944Z
          readOnly: true
          type: string
        data:
          description: Hexadecimal raw data of the command
          example: 51285624ab5d
          type: string
        id:
          description: Unique id of the command
          example: 5743000f0cf25e30a712e83c
          type: string
        port:
          description: Port of the device on which the command was sent (cf. LoRaWan)
          example: 1
          format: int32
          type: integer
        updateTs:
          description: Date/time of the last command modification
          example: 2016-06-09T08:04:37.971Z
          readOnly: true
          type: string
      required:
      - commandStatus
      - confirmed
      - data
      - id
      - port
      type: object
    ApiKeyCreationReqWeb:
      description: ApiKey in Creation Request
      example:
        clientCert:
          caCertIds:
          - 5b057d0fb8605a5e80758e42
          required: true
        roles:
        - USER_R
        - API_KEY_R
        scope:
          fifos:
          - default
          - supplierA
        active: true
        description: description of Api Key target
        from: 1473078900000
        label: My Api Key Name
        sessionTtl: 144410
        to: 1475224200000
        ttl: 144410000
        userId: 51FFFFFFFFFFFFFFFFFFFFFA
        parentId: 57FFFFFFFFFFFFFFFFFFFFFE
      properties:
        active:
          description: Status
          example: true
          type: boolean
        clientCert:
          $ref: '#/components/schemas/ClientCertificatesConfiguration'
        description:
          description: Short description of the key. Expected string (limited to 140
            first characters)
          example: description of Api Key target
          type: string
        from:
          description: Timestamp from which the key is valid
          example: 1473078900000
          format: int64
          type: integer
        label:
          description: Title of the key. Expected string (limited to 24 first characters)
          example: My Api Key Name
          type: string
        parentId:
          description: identifier of the parent key to set. Expected identifier (max
            24 characters)
          example: 57FFFFFFFFFFFFFFFFFFFFFE
          type: string
        roles:
          description: list of API key associated roles. Basic roles are "USER_R",
            "USER_W", "API_KEY_R", "API_KEY_W" or any role string supplied at tenant
            account creation time. Expected array of role name (max all roles, role
            value max 255 characters)
          example:
          - USER_R
          - API_KEY_R
          items:
            type: string
          type: array
        scope:
          $ref: '#/components/schemas/ScopeApplication'
        sessionTtl:
          description: Maximum inactivity period (ms)
          example: 144410
          format: int64
          type: integer
        to:
          description: Timestamp until which the key is valid
          example: 1475224200000
          format: int64
          type: integer
        ttl:
          description: Time to live (ms)
          example: 144410000
          format: int64
          type: integer
        userId:
          description: identifier of the user owner of this key. Expected identifier
            (max 24 characters)
          example: 51FFFFFFFFFFFFFFFFFFFFFA
          type: string
      required:
      - parentId
      - roles
      type: object
    MatchingContext:
      description: 'hold the Matching context : data, MatchingRule and timestamp of
        the match'
      example:
        matchingRule:
          dataPredicate: '{}'
          name: name
          id: id
          enabled: false
        data:
          metadata: '{}'
          streamId: streamId
          extra:
            key: extra
          location:
            provider: GPS
            alt: 5.00001
            accuracy: 10.0
            lon: -30.00001
            lat: 45.000009
          model: model
          value: '{}'
          tags:
          - tags
          - tags
          timestamp: timestamp
        tenantId: tenantId
        timestamp: timestamp
      properties:
        data:
          $ref: '#/components/schemas/NewData'
        matchingRule:
          $ref: '#/components/schemas/MatchingRule'
        tenantId:
          type: string
        timestamp:
          type: string
      required:
      - data
      - matchingRule
      type: object
    NewDeviceInterface:
      description: Definition of a new device interface
      example:
        connector: lora
        definition: '{}'
        enabled: true
      properties:
        connector:
          description: Connector ID. A connector must respect the following regular
            expression <code>([\w\-_]{1,128})</code> (max 128 characters)
          example: lora
          type: string
        enabled:
          description: Indicates whether the interface is enabled
          example: true
          type: boolean
        definition:
          description: Base definition. Expected string (max 10000 characters)
          properties: {}
          type: object
      type: object
    DeviceDeletedFilter:
      example:
        connectors:
        - connectors
        - connectors
        groupPaths:
        - includeSubPath: false
          path: /europe/france
        - includeSubPath: false
          path: /europe/france
        tags:
        - - ALERT
      properties:
        connectors:
          description: list of filtered connectors.
          items:
            type: string
          type: array
        groupPaths:
          description: list of filtered group paths. Null or empty to accept all group
            paths
          items:
            $ref: '#/components/schemas/GroupPath'
          type: array
        tags:
          description: list of groups of tags that should be contained in message
            tags. There is a match if at least one group of tags is a match. A group
            of tags is a match if the tags of the message contains all elements of
            this group.<br>e.g. [["ALERT"]] will match all messages containing tag
            'ALERT'.<br>e.g. [["HIGH", "ALERT"],["PROD"]] will match messages with
            either tag 'PROD' or both tags 'ALERT' and 'HIGH'.
          example:
          - - ALERT
          items:
            items:
              type: string
            type: array
          type: array
      type: object
    OffersAndOptionsReqWeb:
      properties:
        displayName:
          description: Rule's display name Discover/Premium
          example: Discover
          type: string
        name:
          description: Rule's name
          example: Discover_OFR_v2.2
          type: string
        type:
          description: Rule's type OFFER/OPTION
          example: OFFER
          type: string
      type: object
    User:
      description: body of user data
      example:
        externalIdentity:
          provider: provider
          id: id
          login: login
        lastAuthentication: 1475224200000
        roles:
        - USER_R
        - APIKEY_R
        portalData: '{}'
        tenantId: 51FFFFFFFFFFFFFFFFFFFFFF
        id: 57FFFFFFFFFFFFFFFFFFFFFF
        mainUser: false
        state: enabled
        login: MyLoginName
        email: me.name@mycompagny.mycom
      properties:
        email:
          description: user email
          example: me.name@mycompagny.mycom
          type: string
        externalIdentity:
          $ref: '#/components/schemas/ExternalIdentity'
        id:
          description: identifier of user
          example: 57FFFFFFFFFFFFFFFFFFFFFF
          type: string
        lastAuthentication:
          description: user last authentication timestamp in ms
          example: 1475224200000
          format: int64
          type: integer
        login:
          description: user login
          example: MyLoginName
          type: string
        mainUser:
          description: user is the tenant's main user
          example: false
          type: boolean
        portalData:
          description: user portal data
          properties: {}
          type: object
        roles:
          description: list of user associated roles.
          example:
          - USER_R
          - APIKEY_R
          items:
            type: string
          type: array
        state:
          description: 'user state : disabled, enabled or suspended'
          example: enabled
          type: string
        tenantId:
          description: identifier of tenant account this user will belong to
          example: 51FFFFFFFFFFFFFFFFFFFFFF
          type: string
      required:
      - email
      - id
      - login
      - roles
      - state
      - tenantId
      type: object
    CommandStatusTrigger:
      example:
        filter:
          status:
          - PENDING
          - PENDING
        version: 0
      properties:
        filter:
          $ref: '#/components/schemas/CommandStatusFilter'
        version:
          description: requested object version
          enum:
          - 1
          format: int32
          type: integer
      required:
      - version
      type: object
    CampaignOperation:
      properties:
        action:
          description: Type of operation
          enum:
          - CampaignAction(action=configure)
          - CampaignAction(action=command)
          - CampaignAction(action=resource)
          example: configure
          type: string
        version:
          description: Version of operation (default:0)
          example: 1
          format: int32
          type: integer
      required:
      - action
      type: object
    PipelineFilter:
      example:
        connectors:
        - lora
        encodings:
        - encodings
        - encodings
        groupPaths:
        - includeSubPath: false
          path: /europe/france
        - includeSubPath: false
          path: /europe/france
        tags:
        - - ALERT
      properties:
        connectors:
          description: list of filtered connectors. Null or empty to accept all connectors
          example:
          - lora
          items:
            type: string
          type: array
        encodings:
          description: list of filtered datamessage's encodings. Null or empty to
            accept all datamessage's encodings
          items:
            type: string
          type: array
        groupPaths:
          description: list of filtered group paths. Null or empty to accept all group
            paths
          items:
            $ref: '#/components/schemas/GroupPath'
          type: array
        tags:
          description: list of groups of tags that should be contained in message
            tags. There is a match if at least one group of tags is a match. A group
            of tags is a match if the tags of the message contains all elements of
            this group.<br>e.g. [["ALERT"]] will match all messages containing tag
            'ALERT'.<br>e.g. [["HIGH", "ALERT"],["PROD"]] will match messages with
            either tag 'PROD' or both tags 'ALERT' and 'HIGH'.
          example:
          - - ALERT
          items:
            items:
              type: string
            type: array
          type: array
      type: object
    Source:
      example:
        connector: lora
        campaignId: campaignId
        actionPolicyId: actionPolicyId
        eventProcessingRuleId: eventProcessingRuleId
        deviceId: deviceId
        nodeId: nodeId
        gatewayId: gatewayId
        pipelineId: pipelineId
      properties:
        actionPolicyId:
          type: string
        campaignId:
          type: string
        connector:
          enum:
          - lora
          - mqtt
          - http
          - sms
          - coap
          type: string
        deviceId:
          type: string
        eventProcessingRuleId:
          type: string
        gatewayId:
          type: string
        nodeId:
          type: string
        pipelineId:
          type: string
      type: object
    ServiceMetrics:
      additionalProperties:
        format: int64
        type: integer
      type: object
    DataMatchTest:
      example:
        data: '{}'
        dataPredicate: '{}'
      properties:
        data:
          description: data to test the dataPredicate with
          properties: {}
          type: object
        dataPredicate:
          description: the jsonLogic that will be used to evaluate the data
          properties: {}
          type: object
      required:
      - data
      - dataPredicate
      type: object
    RateLimit:
      example:
        mqttDeviceWindowSize: 1
        mqttDeviceMaxMessages: 1
        httpWindowSize: 1
        httpMaxCalls: 1
        mqttBridgeMaxMessages: 1
        mqttBridgeWindowSize: 1
      properties:
        httpMaxCalls:
          description: 'http rate limit: maximum api calls allowed per time window'
          example: 1
          format: int64
          type: integer
        httpWindowSize:
          description: 'http rate limit: window size in seconds'
          example: 1
          format: int64
          type: integer
        mqttBridgeMaxMessages:
          description: 'mqtt bridge rate limit: maximum messages allowed per time
            window'
          example: 1
          format: int64
          type: integer
        mqttBridgeWindowSize:
          description: 'mqtt bridge rate limit: window size in seconds'
          example: 1
          format: int64
          type: integer
        mqttDeviceMaxMessages:
          description: 'mqtt device rate limit: maximum messages allowed per time
            window'
          example: 1
          format: int64
          type: integer
        mqttDeviceWindowSize:
          description: 'mqtt device rate limit: window size in seconds'
          example: 1
          format: int64
          type: integer
      type: object
    ContextContainerList:
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/ContextContainer'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
    StateProcessingRule:
      description: defines the JsonLogic Function that will be applied to all new
        data. This function will compute a state
      example:
        stateKeyPath: stateKeyPath
        name: name
        stateFunction: '{}'
        id: id
        enabled: false
        filterPredicate: '{}'
      properties:
        enabled:
          description: activate or not the StateProcessingRule. Default is false.
          example: false
          type: boolean
        filterPredicate:
          description: the JsonLogic (http://jsonlogic.com/) filter predicate applied
            before state function
          properties: {}
          type: object
        id:
          description: id of the StateProcessingRule. Should be null when used for
            POST.
          type: string
        name:
          description: name of the StateProcessingRule. Must be unique.
          type: string
        stateFunction:
          description: the JsonLogic (http://jsonlogic.com/) state function
          properties: {}
          type: object
        stateKeyPath:
          description: the json path applied on dataMessage used to compute the stateKey
          type: string
      required:
      - name
      type: object
    Tenant:
      example:
        country: country
        technicalSettings:
          key:
            version: version
            content: '{}'
            revision: 1
        accountType: ADMIN
        siret: siret
        identityProvider: identityProvider
        parentId: parentId
        tags:
        - tags
        - tags
        mainUserId: mainUserId
        userSettings:
          key:
            version: version
            content: '{}'
            revision: 1
        adminInfo:
          country: country
          businessUnit:
            name: name
          vendor:
            name: name
            id: id
          supportVendorIds:
          - supportVendorIds
          - supportVendorIds
        name: name
        offerSettings:
          key:
            version: version
            content: '{}'
            revision: 1
        id: id
        masterApiKeyId: masterApiKeyId
        properties:
          key: properties
        creationTs: 0
        deletionTs: 6
      properties:
        accountType:
          enum:
          - ADMIN
          - VENDOR
          - CUSTOMER
          type: string
        adminInfo:
          $ref: '#/components/schemas/AdminInfo'
        country:
          type: string
        creationTs:
          format: int64
          type: integer
        deletionTs:
          format: int64
          type: integer
        id:
          type: string
        identityProvider:
          type: string
        mainUserId:
          type: string
        masterApiKeyId:
          type: string
        name:
          type: string
        offerSettings:
          additionalProperties:
            $ref: '#/components/schemas/SettingsSection'
          type: object
        parentId:
          type: string
        properties:
          additionalProperties:
            type: string
          type: object
        siret:
          type: string
        tags:
          items:
            type: string
          type: array
        technicalSettings:
          additionalProperties:
            $ref: '#/components/schemas/SettingsSection'
          type: object
        userSettings:
          additionalProperties:
            $ref: '#/components/schemas/SettingsSection'
          type: object
      type: object
    UpdateConnectorNodeRequest:
      example:
        definition: '{}'
        deviceId: urn:lo:nsid:sensor:2327398
        enabled: false
      properties:
        deviceId:
          description: New device id this connector node must be associated with (or
            null)
          example: urn:lo:nsid:sensor:2327398
          type: string
        enabled:
          description: New enabled state for this connector node (or null)
          example: false
          type: boolean
        definition:
          description: New interface definition
          properties: {}
          type: object
      type: object
    PayloadDescriptionMetadata:
      description: decoder metadata
      example:
        certified: false
        certifiedSince: 2019-05-15T07:55:55.555Z
      properties:
        certified:
          description: the decoder is certified for the specified encoding. Only a
            public decoder can be certified. The default value is false.
          example: false
          type: boolean
        certifiedSince:
          description: date since when the decoder is certified. ISO 8601 date time.
          example: 2019-05-15T07:55:55.555Z
          readOnly: true
          type: string
      type: object
    MessageSelector:
      example:
        filter:
          connectors:
          - connectors
          - connectors
          deviceIds:
          - deviceIds
          - deviceIds
          groupPaths:
          - includeSubPath: false
            path: /europe/france
          - includeSubPath: false
            path: /europe/france
        origin: data_new
      properties:
        filter:
          $ref: '#/components/schemas/MessageSelectorFilter'
        origin:
          description: Specifies the source of the message that will trigger an action
          enum:
          - data_new
          type: string
      required:
      - origin
      type: object
    ApiKeySetDebugModeReqWeb:
      description: Set ApiKey debug mode request
      example:
        durationSeconds: 0
        activated: false
      properties:
        activated:
          description: The state of the debug mode
          example: false
          type: boolean
        durationSeconds:
          description: The duration during which the debug mode will be activated
            (default = 15 min)
          format: int64
          type: integer
      required:
      - activated
      type: object
    LoraNetworkSubscriptionDetail:
      example:
        name: Reseau national LoRa Orange
        id: orange-cs/cp_ack_tdoa_rep3_adrv2
      properties:
        id:
          description: Unique id of the connectivity plan
          example: orange-cs/cp_ack_tdoa_rep3_adrv2
          type: string
        name:
          description: Commercial name of the connectivity plan
          example: Reseau national LoRa Orange
          type: string
      type: object
    UpdatePasswordReqWeb:
      description: User Update Password body Request
      example:
        tokenId: tokenId
        captcha: captcha
        oldPassword: MyCurrentPWD
        newPassword: MyNewPWD
        captchaToken: captchaToken
      properties:
        captcha:
          description: security captcha got from user
          type: string
        captchaToken:
          description: captcha token, that will be checked for authorizing the update
          type: string
        newPassword:
          description: new password string
          example: MyNewPWD
          type: string
        oldPassword:
          description: old password string
          example: MyCurrentPWD
          type: string
        tokenId:
          description: token identifier
          type: string
      required:
      - captcha
      - captchaToken
      - newPassword
      - oldPassword
      - tokenId
      type: object
    PipelineStep:
      description: Step of a pipeline. See developer guide to have list of step types.
      properties:
        type:
          enum:
          - externalTransformation
          - cellularGeolocEnrichment
          type: string
      type: object
    StateProcessingFunctionTest:
      example:
        data:
          metadata: '{}'
          streamId: streamId
          extra:
            key: extra
          location:
            provider: GPS
            alt: 5.00001
            accuracy: 10.0
            lon: -30.00001
            lat: 45.000009
          model: model
          value: '{}'
          tags:
          - tags
          - tags
          timestamp: timestamp
        currentState: '{}'
        stateProcessingFunction: '{}'
      properties:
        currentState:
          description: current state that can be used by the state function
          properties: {}
          type: object
        data:
          $ref: '#/components/schemas/NewData'
        stateProcessingFunction:
          description: the state function in jsonLogic syntax
          properties: {}
          type: object
      required:
      - data
      - stateProcessingFunction
      type: object
    DeviceStatusFilter:
      example:
        connectors:
        - connectors
        - connectors
        groupPaths:
        - includeSubPath: false
          path: /europe/france
        - includeSubPath: false
          path: /europe/france
      properties:
        connectors:
          description: list of filtered connectors. Null or empty to accept all connectors
          items:
            type: string
          type: array
        groupPaths:
          description: list of filtered group paths. Null or empty to accept all group
            paths
          items:
            $ref: '#/components/schemas/GroupPath'
          type: array
      type: object
    Vendor:
      example:
        name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    AzureEventHubsAction:
      description: Action that will push the message to an Azure Event Hub instance
        using HTTP protocol
      example:
        sharedAccessKey: sharedAccessKey
        sharedAccessKeyName: sharedAccessKeyName
        retryOnFailure: false
        jsonPath: jsonPath
        eventHubsNamespace: eventHubsNamespace
        eventHubName: eventHubName
        content: content
      properties:
        content:
          description: A raw string or a mustache (https://mustache.github.io/mustache.5.html)
            template describing the webhook body. If empty, the raw event will be
            used.
          type: string
        eventHubName:
          description: The name of the targeted Event Hub.
          type: string
        eventHubsNamespace:
          description: the Event Hubs namespace where is located the targeted Event
            Hub.
          type: string
        jsonPath:
          description: The json path to extract from the considered message (or event),
            it will be taken as the root datacontext object when combined with a mustache
            template in content
          type: string
        retryOnFailure:
          description: Indicate if a retry policy should be set up in case of a Event
            Hub delivery failure
          example: false
          type: boolean
        sharedAccessKey:
          description: The shared access key (also called shared access policy).
          type: string
        sharedAccessKeyName:
          description: The name of the shared access key (also called shared access
            policy) from the targeted Event Hub.
          type: string
      required:
      - eventHubName
      - eventHubsNamespace
      - sharedAccessKey
      - sharedAccessKeyName
      type: object
    SelectionCriteria:
      example:
        keyPath: keyPath
        value: '{}'
      properties:
        keyPath:
          description: json path of field to select
          type: string
        value:
          description: value to match
          properties: {}
          type: object
      required:
      - keyPath
      - value
      type: object
    DataMatchResult:
      example:
        dataPredicateValid: true
        dataPredicateResult: true
        dataValid: true
      properties:
        dataPredicateResult:
          type: boolean
        dataPredicateValid:
          type: boolean
        dataValid:
          type: boolean
      type: object
    SMSConnectorBusinessSettingsUpdateReqWeb:
      description: SMS Connector Business Settings in Update Request
      example:
        decoderName: decoderName
        newDecoderName: newDecoderName
        msisdns:
        - msisdn: "3387654321"
        - msisdn: "3387654321"
      properties:
        decoderName:
          description: 'decoder name ex: "decoderName"'
          type: string
        msisdns:
          description: 'device''s SIM Card identifier ex: "33666666667"'
          items:
            $ref: '#/components/schemas/Msisdns'
          type: array
        newDecoderName:
          description: 'new decoder name ex: "newDecoderName"'
          type: string
      type: object
    AssetParamsStatusUpdateReqWeb:
      description: request to update the details of a registered asset
      example:
        paramKeys:
        - paramKeys
        - paramKeys
        newStatus: CANCELED
      properties:
        newStatus:
          description: future state of the parameter --> CANCELED
          enum:
          - NONE
          - PENDING
          - SENT
          - CANCELED
          - OK
          - FAILED
          example: CANCELED
          type: string
        paramKeys:
          description: set of keys identifying the targeted asset parameters. Maximum
            100 parameters, and parameter name max length is 128
          items:
            type: string
          type: array
      required:
      - newStatus
      - paramKeys
      type: object
    LoraGatewayData:
      example:
        name: FF02041D
        description: description
        location:
          provider: GPS
          lastUpdateTs: 2016-06-14T11:09:22.125Z
          alt: 50.0
          lon: 7.44464
          lat: 10.11212
      properties:
        description:
          description: Description
          type: string
        location:
          $ref: '#/components/schemas/LoraGatewayLocation'
        name:
          description: Name of the gateway
          example: FF02041D
          type: string
      type: object
    ResetPasswordReqWeb:
      description: body of user reset password request
      example:
        userLogin: MyLoginName
        captcha: captcha
        captchaToken: captchaToken
      properties:
        captcha:
          description: Security captcha got from user
          type: string
        captchaToken:
          description: Security captcha waited token
          type: string
        userLogin:
          description: the user login
          example: MyLoginName
          type: string
      required:
      - captcha
      - captchaToken
      - userLogin
      type: object
    CampaignList:
      example:
        size: 1
        data:
        - planning:
            endDate: endDate
            startDate: startDate
          operations:
          - action: command
            definition:
              event: reset
              data:
                delay: "5000"
          totalTargetsPerStatus:
            canceled: 0
            inProgress: 1
            failure: 6
            success: 2
            pending: 5
            notStarted: 5
          created: 2119-07-19T09:23:11Z
          campaignStatus: RUNNING
          name: My campaign
          options:
            dynamicallyAddEligibleDevice: true
          description: A campaign that configures parameters, sends command and updates
            a resource
          id: auto-generated id
          updated: 2119-07-19T09:23:11Z
          numberOfTargets: 1
          target:
            idList:
            - urn:lo:nsid:myNamespace:myDeviceId
            filterQuery: tag=in=(FUT,TEST1)
        - planning:
            endDate: endDate
            startDate: startDate
          operations:
          - action: command
            definition:
              event: reset
              data:
                delay: "5000"
          totalTargetsPerStatus:
            canceled: 0
            inProgress: 1
            failure: 6
            success: 2
            pending: 5
            notStarted: 5
          created: 2119-07-19T09:23:11Z
          campaignStatus: RUNNING
          name: My campaign
          options:
            dynamicallyAddEligibleDevice: true
          description: A campaign that configures parameters, sends command and updates
            a resource
          id: auto-generated id
          updated: 2119-07-19T09:23:11Z
          numberOfTargets: 1
          target:
            idList:
            - urn:lo:nsid:myNamespace:myDeviceId
            filterQuery: tag=in=(FUT,TEST1)
        page: 0
        totalCount: 1
      properties:
        page:
          description: 'number of the current page: starts at 0.'
          example: 0
          format: int64
          type: integer
        size:
          description: number of data per page (= maximum number of data in the associated
            list of data:the last page can have less data)
          example: 1
          format: int64
          type: integer
        totalCount:
          description: total count of data in the complete list.
          example: 1
          format: int64
          type: integer
        data:
          description: list of data in this page.
          items:
            $ref: '#/components/schemas/Campaign'
          type: array
      required:
      - data
      - page
      - size
      - totalCount
      type: object
