/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeprecatedDeviceManagementDevicesFirmwaresApiService DeprecatedDeviceManagementDevicesFirmwaresApi service
type DeprecatedDeviceManagementDevicesFirmwaresApiService service

type ApiGetDeviceFirmwareUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementDevicesFirmwaresApiService
	deviceId string
	firmwareId string
	xAPIKEY *string
}

func (r ApiGetDeviceFirmwareUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetDeviceFirmwareUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetDeviceFirmwareUsingGETRequest) Execute() (DeviceFirmwareWeb, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceFirmwareUsingGETExecute(r)
}

/*
 * GetDeviceFirmwareUsingGET Get a specific device firmware (use /api/v1/deviceMgt/devices/{deviceId}/resources/{resourceId} instead)
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @param firmwareId device firmware identifier. Expected string (max 255 characters)
 * @return ApiGetDeviceFirmwareUsingGETRequest
 */
func (a *DeprecatedDeviceManagementDevicesFirmwaresApiService) GetDeviceFirmwareUsingGET(ctx _context.Context, deviceId string, firmwareId string) ApiGetDeviceFirmwareUsingGETRequest {
	return ApiGetDeviceFirmwareUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
		firmwareId: firmwareId,
	}
}

/*
 * Execute executes the request
 * @return DeviceFirmwareWeb
 */
func (a *DeprecatedDeviceManagementDevicesFirmwaresApiService) GetDeviceFirmwareUsingGETExecute(r ApiGetDeviceFirmwareUsingGETRequest) (DeviceFirmwareWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DeviceFirmwareWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementDevicesFirmwaresApiService.GetDeviceFirmwareUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}/firmwares/{firmwareId}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firmwareId"+"}", _neturl.PathEscape(parameterToString(r.firmwareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeviceResourceUpdatesUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementDevicesFirmwaresApiService
	deviceId string
	xAPIKEY *string
	page *int32
	size *int32
	xTotalCount *bool
}

func (r ApiGetDeviceResourceUpdatesUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetDeviceResourceUpdatesUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiGetDeviceResourceUpdatesUsingGETRequest) Page(page int32) ApiGetDeviceResourceUpdatesUsingGETRequest {
	r.page = &page
	return r
}
func (r ApiGetDeviceResourceUpdatesUsingGETRequest) Size(size int32) ApiGetDeviceResourceUpdatesUsingGETRequest {
	r.size = &size
	return r
}
func (r ApiGetDeviceResourceUpdatesUsingGETRequest) XTotalCount(xTotalCount bool) ApiGetDeviceResourceUpdatesUsingGETRequest {
	r.xTotalCount = &xTotalCount
	return r
}

func (r ApiGetDeviceResourceUpdatesUsingGETRequest) Execute() ([]FirmwareUpdateWeb, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceResourceUpdatesUsingGETExecute(r)
}

/*
 * GetDeviceResourceUpdatesUsingGET Get a list of device firmware updates (use /api/v1/deviceMgt/devices/{deviceId}/resources/updates
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId requested target device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @return ApiGetDeviceResourceUpdatesUsingGETRequest
 */
func (a *DeprecatedDeviceManagementDevicesFirmwaresApiService) GetDeviceResourceUpdatesUsingGET(ctx _context.Context, deviceId string) ApiGetDeviceResourceUpdatesUsingGETRequest {
	return ApiGetDeviceResourceUpdatesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
	}
}

/*
 * Execute executes the request
 * @return []FirmwareUpdateWeb
 */
func (a *DeprecatedDeviceManagementDevicesFirmwaresApiService) GetDeviceResourceUpdatesUsingGETExecute(r ApiGetDeviceResourceUpdatesUsingGETRequest) ([]FirmwareUpdateWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []FirmwareUpdateWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementDevicesFirmwaresApiService.GetDeviceResourceUpdatesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}/firmwareUpdates"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTotalCount != nil {
		localVarHeaderParams["X-Total-Count"] = parameterToString(*r.xTotalCount, "")
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLastResourceUpdateUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementDevicesFirmwaresApiService
	deviceId string
	firmwareId string
	xAPIKEY *string
}

func (r ApiGetLastResourceUpdateUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetLastResourceUpdateUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetLastResourceUpdateUsingGETRequest) Execute() (FirmwareUpdateWeb, *_nethttp.Response, error) {
	return r.ApiService.GetLastResourceUpdateUsingGETExecute(r)
}

/*
 * GetLastResourceUpdateUsingGET Get info about last update of this device firmware (use /api/v1/deviceMgt/devices/{deviceId}/resources/{resourceId}/updates/latest instead)
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId requested device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @param firmwareId device firmware identifier. Expected string (max 255 characters)
 * @return ApiGetLastResourceUpdateUsingGETRequest
 */
func (a *DeprecatedDeviceManagementDevicesFirmwaresApiService) GetLastResourceUpdateUsingGET(ctx _context.Context, deviceId string, firmwareId string) ApiGetLastResourceUpdateUsingGETRequest {
	return ApiGetLastResourceUpdateUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
		firmwareId: firmwareId,
	}
}

/*
 * Execute executes the request
 * @return FirmwareUpdateWeb
 */
func (a *DeprecatedDeviceManagementDevicesFirmwaresApiService) GetLastResourceUpdateUsingGETExecute(r ApiGetLastResourceUpdateUsingGETRequest) (FirmwareUpdateWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FirmwareUpdateWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementDevicesFirmwaresApiService.GetLastResourceUpdateUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}/firmwares/{firmwareId}/lastUpdate"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firmwareId"+"}", _neturl.PathEscape(parameterToString(r.firmwareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDeviceResourcesUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementDevicesFirmwaresApiService
	deviceId string
	xAPIKEY *string
}

func (r ApiListDeviceResourcesUsingGETRequest) XAPIKEY(xAPIKEY string) ApiListDeviceResourcesUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiListDeviceResourcesUsingGETRequest) Execute() (map[string]DeviceFirmwareWeb, *_nethttp.Response, error) {
	return r.ApiService.ListDeviceResourcesUsingGETExecute(r)
}

/*
 * ListDeviceResourcesUsingGET Get a map of all device firmwares (use /api/v1/deviceMgt/devices/{deviceId}/resources instead)
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId requested target device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @return ApiListDeviceResourcesUsingGETRequest
 */
func (a *DeprecatedDeviceManagementDevicesFirmwaresApiService) ListDeviceResourcesUsingGET(ctx _context.Context, deviceId string) ApiListDeviceResourcesUsingGETRequest {
	return ApiListDeviceResourcesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
	}
}

/*
 * Execute executes the request
 * @return map[string]DeviceFirmwareWeb
 */
func (a *DeprecatedDeviceManagementDevicesFirmwaresApiService) ListDeviceResourcesUsingGETExecute(r ApiListDeviceResourcesUsingGETRequest) (map[string]DeviceFirmwareWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]DeviceFirmwareWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementDevicesFirmwaresApiService.ListDeviceResourcesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}/firmwares"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetDeviceResourceVersionUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementDevicesFirmwaresApiService
	deviceId string
	firmwareId string
	xAPIKEY *string
	update *UpdateDeviceFirmwareReqWeb
}

func (r ApiSetDeviceResourceVersionUsingPOSTRequest) XAPIKEY(xAPIKEY string) ApiSetDeviceResourceVersionUsingPOSTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiSetDeviceResourceVersionUsingPOSTRequest) Update(update UpdateDeviceFirmwareReqWeb) ApiSetDeviceResourceVersionUsingPOSTRequest {
	r.update = &update
	return r
}

func (r ApiSetDeviceResourceVersionUsingPOSTRequest) Execute() (DeviceFirmwareWeb, *_nethttp.Response, error) {
	return r.ApiService.SetDeviceResourceVersionUsingPOSTExecute(r)
}

/*
 * SetDeviceResourceVersionUsingPOST Set device firmware versions (use /api/v1/deviceMgt/devices/{deviceId}/resources/{resourceId} instead)
 * Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @param firmwareId device firmware identifier. Expected string (max 255 characters)
 * @return ApiSetDeviceResourceVersionUsingPOSTRequest
 */
func (a *DeprecatedDeviceManagementDevicesFirmwaresApiService) SetDeviceResourceVersionUsingPOST(ctx _context.Context, deviceId string, firmwareId string) ApiSetDeviceResourceVersionUsingPOSTRequest {
	return ApiSetDeviceResourceVersionUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
		firmwareId: firmwareId,
	}
}

/*
 * Execute executes the request
 * @return DeviceFirmwareWeb
 */
func (a *DeprecatedDeviceManagementDevicesFirmwaresApiService) SetDeviceResourceVersionUsingPOSTExecute(r ApiSetDeviceResourceVersionUsingPOSTRequest) (DeviceFirmwareWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DeviceFirmwareWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementDevicesFirmwaresApiService.SetDeviceResourceVersionUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}/firmwares/{firmwareId}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"firmwareId"+"}", _neturl.PathEscape(parameterToString(r.firmwareId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.update
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
