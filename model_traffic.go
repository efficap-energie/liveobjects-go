/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// Traffic struct for Traffic
type Traffic struct {
	In *map[string]int64 `json:"in,omitempty"`
	Out *map[string]int64 `json:"out,omitempty"`
}

// NewTraffic instantiates a new Traffic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraffic() *Traffic {
	this := Traffic{}
	return &this
}

// NewTrafficWithDefaults instantiates a new Traffic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrafficWithDefaults() *Traffic {
	this := Traffic{}
	return &this
}

// GetIn returns the In field value if set, zero value otherwise.
func (o *Traffic) GetIn() map[string]int64 {
	if o == nil || o.In == nil {
		var ret map[string]int64
		return ret
	}
	return *o.In
}

// GetInOk returns a tuple with the In field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Traffic) GetInOk() (*map[string]int64, bool) {
	if o == nil || o.In == nil {
		return nil, false
	}
	return o.In, true
}

// HasIn returns a boolean if a field has been set.
func (o *Traffic) HasIn() bool {
	if o != nil && o.In != nil {
		return true
	}

	return false
}

// SetIn gets a reference to the given map[string]int64 and assigns it to the In field.
func (o *Traffic) SetIn(v map[string]int64) {
	o.In = &v
}

// GetOut returns the Out field value if set, zero value otherwise.
func (o *Traffic) GetOut() map[string]int64 {
	if o == nil || o.Out == nil {
		var ret map[string]int64
		return ret
	}
	return *o.Out
}

// GetOutOk returns a tuple with the Out field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Traffic) GetOutOk() (*map[string]int64, bool) {
	if o == nil || o.Out == nil {
		return nil, false
	}
	return o.Out, true
}

// HasOut returns a boolean if a field has been set.
func (o *Traffic) HasOut() bool {
	if o != nil && o.Out != nil {
		return true
	}

	return false
}

// SetOut gets a reference to the given map[string]int64 and assigns it to the Out field.
func (o *Traffic) SetOut(v map[string]int64) {
	o.Out = &v
}

func (o Traffic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.In != nil {
		toSerialize["in"] = o.In
	}
	if o.Out != nil {
		toSerialize["out"] = o.Out
	}
	return json.Marshal(toSerialize)
}

type NullableTraffic struct {
	value *Traffic
	isSet bool
}

func (v NullableTraffic) Get() *Traffic {
	return v.value
}

func (v *NullableTraffic) Set(val *Traffic) {
	v.value = val
	v.isSet = true
}

func (v NullableTraffic) IsSet() bool {
	return v.isSet
}

func (v *NullableTraffic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraffic(val *Traffic) *NullableTraffic {
	return &NullableTraffic{value: val, isSet: true}
}

func (v NullableTraffic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraffic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


