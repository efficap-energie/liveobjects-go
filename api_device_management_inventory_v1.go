/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementInventoryV1ApiService DeviceManagementInventoryV1Api service
type DeviceManagementInventoryV1ApiService service

type ApiCreateDeviceUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementInventoryV1ApiService
	xAPIKEY *string
	body *DeviceCreateRequest
}

func (r ApiCreateDeviceUsingPOSTRequest) XAPIKEY(xAPIKEY string) ApiCreateDeviceUsingPOSTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiCreateDeviceUsingPOSTRequest) Body(body DeviceCreateRequest) ApiCreateDeviceUsingPOSTRequest {
	r.body = &body
	return r
}

func (r ApiCreateDeviceUsingPOSTRequest) Execute() (Device, *_nethttp.Response, error) {
	return r.ApiService.CreateDeviceUsingPOSTExecute(r)
}

/*
 * CreateDeviceUsingPOST Create a device
 * Please refer to the 'Device Management > Interfaces' API notes for more information about 'interfaces.[x].definition' content<br><br>Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateDeviceUsingPOSTRequest
 */
func (a *DeviceManagementInventoryV1ApiService) CreateDeviceUsingPOST(ctx _context.Context) ApiCreateDeviceUsingPOSTRequest {
	return ApiCreateDeviceUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Device
 */
func (a *DeviceManagementInventoryV1ApiService) CreateDeviceUsingPOSTExecute(r ApiCreateDeviceUsingPOSTRequest) (Device, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Device
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementInventoryV1ApiService.CreateDeviceUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDeviceUsingDELETERequest struct {
	ctx _context.Context
	ApiService *DeviceManagementInventoryV1ApiService
	deviceId string
	xAPIKEY *string
}

func (r ApiDeleteDeviceUsingDELETERequest) XAPIKEY(xAPIKEY string) ApiDeleteDeviceUsingDELETERequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiDeleteDeviceUsingDELETERequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteDeviceUsingDELETEExecute(r)
}

/*
 * DeleteDeviceUsingDELETE Delete a device
 * Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId Target device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @return ApiDeleteDeviceUsingDELETERequest
 */
func (a *DeviceManagementInventoryV1ApiService) DeleteDeviceUsingDELETE(ctx _context.Context, deviceId string) ApiDeleteDeviceUsingDELETERequest {
	return ApiDeleteDeviceUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
	}
}

/*
 * Execute executes the request
 */
func (a *DeviceManagementInventoryV1ApiService) DeleteDeviceUsingDELETEExecute(r ApiDeleteDeviceUsingDELETERequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementInventoryV1ApiService.DeleteDeviceUsingDELETE")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDeviceStreamsUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementInventoryV1ApiService
	deviceId string
	xAPIKEY *string
	limit *int32
}

func (r ApiGetDeviceStreamsUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetDeviceStreamsUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiGetDeviceStreamsUsingGETRequest) Limit(limit int32) ApiGetDeviceStreamsUsingGETRequest {
	r.limit = &limit
	return r
}

func (r ApiGetDeviceStreamsUsingGETRequest) Execute() ([]DeviceStreamsResponseWeb, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceStreamsUsingGETExecute(r)
}

/*
 * GetDeviceStreamsUsingGET Get a device's streamIds
 * Restricted to API keys with at least one of the following roles : DATA_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId Targeted device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @return ApiGetDeviceStreamsUsingGETRequest
 */
func (a *DeviceManagementInventoryV1ApiService) GetDeviceStreamsUsingGET(ctx _context.Context, deviceId string) ApiGetDeviceStreamsUsingGETRequest {
	return ApiGetDeviceStreamsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
	}
}

/*
 * Execute executes the request
 * @return []DeviceStreamsResponseWeb
 */
func (a *DeviceManagementInventoryV1ApiService) GetDeviceStreamsUsingGETExecute(r ApiGetDeviceStreamsUsingGETRequest) ([]DeviceStreamsResponseWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []DeviceStreamsResponseWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementInventoryV1ApiService.GetDeviceStreamsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}/data/streams"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeviceUsingGET2Request struct {
	ctx _context.Context
	ApiService *DeviceManagementInventoryV1ApiService
	deviceId string
	xAPIKEY *string
}

func (r ApiGetDeviceUsingGET2Request) XAPIKEY(xAPIKEY string) ApiGetDeviceUsingGET2Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetDeviceUsingGET2Request) Execute() (Device, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceUsingGET2Execute(r)
}

/*
 * GetDeviceUsingGET2 Get a device
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @return ApiGetDeviceUsingGET2Request
 */
func (a *DeviceManagementInventoryV1ApiService) GetDeviceUsingGET2(ctx _context.Context, deviceId string) ApiGetDeviceUsingGET2Request {
	return ApiGetDeviceUsingGET2Request{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
	}
}

/*
 * Execute executes the request
 * @return Device
 */
func (a *DeviceManagementInventoryV1ApiService) GetDeviceUsingGET2Execute(r ApiGetDeviceUsingGET2Request) (Device, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Device
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementInventoryV1ApiService.GetDeviceUsingGET2")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDevicesUsingGET2Request struct {
	ctx _context.Context
	ApiService *DeviceManagementInventoryV1ApiService
	xAPIKEY *string
	limit *int32
	offset *int32
	sort *[]string
	id *string
	groupPath *string
	groupId *string
	name *string
	tags *[]string
	connectors *[]string
	interfacesNodeId *string
	interfacesStatus *[]string
	interfacesEnabled *bool
	propertyFilterName *string
	activityStates *[]string
	filterQuery *string
	fields *[]string
	xTotalCount *bool
}

func (r ApiListDevicesUsingGET2Request) XAPIKEY(xAPIKEY string) ApiListDevicesUsingGET2Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiListDevicesUsingGET2Request) Limit(limit int32) ApiListDevicesUsingGET2Request {
	r.limit = &limit
	return r
}
func (r ApiListDevicesUsingGET2Request) Offset(offset int32) ApiListDevicesUsingGET2Request {
	r.offset = &offset
	return r
}
func (r ApiListDevicesUsingGET2Request) Sort(sort []string) ApiListDevicesUsingGET2Request {
	r.sort = &sort
	return r
}
func (r ApiListDevicesUsingGET2Request) Id(id string) ApiListDevicesUsingGET2Request {
	r.id = &id
	return r
}
func (r ApiListDevicesUsingGET2Request) GroupPath(groupPath string) ApiListDevicesUsingGET2Request {
	r.groupPath = &groupPath
	return r
}
func (r ApiListDevicesUsingGET2Request) GroupId(groupId string) ApiListDevicesUsingGET2Request {
	r.groupId = &groupId
	return r
}
func (r ApiListDevicesUsingGET2Request) Name(name string) ApiListDevicesUsingGET2Request {
	r.name = &name
	return r
}
func (r ApiListDevicesUsingGET2Request) Tags(tags []string) ApiListDevicesUsingGET2Request {
	r.tags = &tags
	return r
}
func (r ApiListDevicesUsingGET2Request) Connectors(connectors []string) ApiListDevicesUsingGET2Request {
	r.connectors = &connectors
	return r
}
func (r ApiListDevicesUsingGET2Request) InterfacesNodeId(interfacesNodeId string) ApiListDevicesUsingGET2Request {
	r.interfacesNodeId = &interfacesNodeId
	return r
}
func (r ApiListDevicesUsingGET2Request) InterfacesStatus(interfacesStatus []string) ApiListDevicesUsingGET2Request {
	r.interfacesStatus = &interfacesStatus
	return r
}
func (r ApiListDevicesUsingGET2Request) InterfacesEnabled(interfacesEnabled bool) ApiListDevicesUsingGET2Request {
	r.interfacesEnabled = &interfacesEnabled
	return r
}
func (r ApiListDevicesUsingGET2Request) PropertyFilterName(propertyFilterName string) ApiListDevicesUsingGET2Request {
	r.propertyFilterName = &propertyFilterName
	return r
}
func (r ApiListDevicesUsingGET2Request) ActivityStates(activityStates []string) ApiListDevicesUsingGET2Request {
	r.activityStates = &activityStates
	return r
}
func (r ApiListDevicesUsingGET2Request) FilterQuery(filterQuery string) ApiListDevicesUsingGET2Request {
	r.filterQuery = &filterQuery
	return r
}
func (r ApiListDevicesUsingGET2Request) Fields(fields []string) ApiListDevicesUsingGET2Request {
	r.fields = &fields
	return r
}
func (r ApiListDevicesUsingGET2Request) XTotalCount(xTotalCount bool) ApiListDevicesUsingGET2Request {
	r.xTotalCount = &xTotalCount
	return r
}

func (r ApiListDevicesUsingGET2Request) Execute() ([]Device, *_nethttp.Response, error) {
	return r.ApiService.ListDevicesUsingGET2Execute(r)
}

/*
 * ListDevicesUsingGET2 List registered devices
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListDevicesUsingGET2Request
 */
func (a *DeviceManagementInventoryV1ApiService) ListDevicesUsingGET2(ctx _context.Context) ApiListDevicesUsingGET2Request {
	return ApiListDevicesUsingGET2Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []Device
 */
func (a *DeviceManagementInventoryV1ApiService) ListDevicesUsingGET2Execute(r ApiListDevicesUsingGET2Request) ([]Device, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Device
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementInventoryV1ApiService.ListDevicesUsingGET2")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sort", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sort", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.groupPath != nil {
		localVarQueryParams.Add("groupPath", parameterToString(*r.groupPath, ""))
	}
	if r.groupId != nil {
		localVarQueryParams.Add("groupId", parameterToString(*r.groupId, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	if r.connectors != nil {
		t := *r.connectors
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("connectors", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("connectors", parameterToString(t, "multi"))
		}
	}
	if r.interfacesNodeId != nil {
		localVarQueryParams.Add("interfaces.nodeId", parameterToString(*r.interfacesNodeId, ""))
	}
	if r.interfacesStatus != nil {
		t := *r.interfacesStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("interfaces.status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("interfaces.status", parameterToString(t, "multi"))
		}
	}
	if r.interfacesEnabled != nil {
		localVarQueryParams.Add("interfaces.enabled", parameterToString(*r.interfacesEnabled, ""))
	}
	if r.propertyFilterName != nil {
		localVarQueryParams.Add("property.{filterName}", parameterToString(*r.propertyFilterName, ""))
	}
	if r.activityStates != nil {
		t := *r.activityStates
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("activityStates", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("activityStates", parameterToString(t, "multi"))
		}
	}
	if r.filterQuery != nil {
		localVarQueryParams.Add("filterQuery", parameterToString(*r.filterQuery, ""))
	}
	if r.fields != nil {
		t := *r.fields
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fields", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xTotalCount != nil {
		localVarHeaderParams["X-Total-Count"] = parameterToString(*r.xTotalCount, "")
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDeviceUsingPATCHRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementInventoryV1ApiService
	deviceId string
	xAPIKEY *string
	deviceUpdate *DeviceUpdate
}

func (r ApiUpdateDeviceUsingPATCHRequest) XAPIKEY(xAPIKEY string) ApiUpdateDeviceUsingPATCHRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiUpdateDeviceUsingPATCHRequest) DeviceUpdate(deviceUpdate DeviceUpdate) ApiUpdateDeviceUsingPATCHRequest {
	r.deviceUpdate = &deviceUpdate
	return r
}

func (r ApiUpdateDeviceUsingPATCHRequest) Execute() (ErrorResponseWeb, *_nethttp.Response, error) {
	return r.ApiService.UpdateDeviceUsingPATCHExecute(r)
}

/*
 * UpdateDeviceUsingPATCH Update a device
 * Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId Targeted device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @return ApiUpdateDeviceUsingPATCHRequest
 */
func (a *DeviceManagementInventoryV1ApiService) UpdateDeviceUsingPATCH(ctx _context.Context, deviceId string) ApiUpdateDeviceUsingPATCHRequest {
	return ApiUpdateDeviceUsingPATCHRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
	}
}

/*
 * Execute executes the request
 * @return ErrorResponseWeb
 */
func (a *DeviceManagementInventoryV1ApiService) UpdateDeviceUsingPATCHExecute(r ApiUpdateDeviceUsingPATCHRequest) (ErrorResponseWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ErrorResponseWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementInventoryV1ApiService.UpdateDeviceUsingPATCH")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}
	if r.deviceUpdate == nil {
		return localVarReturnValue, nil, reportError("deviceUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.deviceUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
