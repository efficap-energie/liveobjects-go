/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// UserCreationReqWeb body for create a new user
type UserCreationReqWeb struct {
	// the user email. Expected a valid email (max 254 characters)
	Email string `json:"email"`
	// user language. Expected language ISO 639-1 (example: \"en\", \"fr\", \"sk\", \"ro\", \"es\") (max 2 characters)
	Language *string `json:"language,omitempty"`
	// the user login. If no external identity provider is used, then login must respect the following regular expression <code>[a-zA-Z0-9_-]{3,254}</code>
	Login string `json:"login"`
	// list of user associated roles. Basic roles are \"USER_R\", \"USER_W\", \"API_KEY_R\", \"API_KEY_W\" or any role string supplied at tenant account creation time. Expected array of role name (max all roles, role value max 255 characters)
	Roles []string `json:"roles"`
	// identifier of tenant account this user will belong to. Expected identifier (max 24 characters)
	TenantId string `json:"tenantId"`
}

// NewUserCreationReqWeb instantiates a new UserCreationReqWeb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCreationReqWeb(email string, login string, roles []string, tenantId string, ) *UserCreationReqWeb {
	this := UserCreationReqWeb{}
	this.Email = email
	this.Login = login
	this.Roles = roles
	this.TenantId = tenantId
	return &this
}

// NewUserCreationReqWebWithDefaults instantiates a new UserCreationReqWeb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCreationReqWebWithDefaults() *UserCreationReqWeb {
	this := UserCreationReqWeb{}
	return &this
}

// GetEmail returns the Email field value
func (o *UserCreationReqWeb) GetEmail() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserCreationReqWeb) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserCreationReqWeb) SetEmail(v string) {
	o.Email = v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *UserCreationReqWeb) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreationReqWeb) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *UserCreationReqWeb) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *UserCreationReqWeb) SetLanguage(v string) {
	o.Language = &v
}

// GetLogin returns the Login field value
func (o *UserCreationReqWeb) GetLogin() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Login
}

// GetLoginOk returns a tuple with the Login field value
// and a boolean to check if the value has been set.
func (o *UserCreationReqWeb) GetLoginOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Login, true
}

// SetLogin sets field value
func (o *UserCreationReqWeb) SetLogin(v string) {
	o.Login = v
}

// GetRoles returns the Roles field value
func (o *UserCreationReqWeb) GetRoles() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *UserCreationReqWeb) GetRolesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Roles, true
}

// SetRoles sets field value
func (o *UserCreationReqWeb) SetRoles(v []string) {
	o.Roles = v
}

// GetTenantId returns the TenantId field value
func (o *UserCreationReqWeb) GetTenantId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *UserCreationReqWeb) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *UserCreationReqWeb) SetTenantId(v string) {
	o.TenantId = v
}

func (o UserCreationReqWeb) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if true {
		toSerialize["login"] = o.Login
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	if true {
		toSerialize["tenantId"] = o.TenantId
	}
	return json.Marshal(toSerialize)
}

type NullableUserCreationReqWeb struct {
	value *UserCreationReqWeb
	isSet bool
}

func (v NullableUserCreationReqWeb) Get() *UserCreationReqWeb {
	return v.value
}

func (v *NullableUserCreationReqWeb) Set(val *UserCreationReqWeb) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCreationReqWeb) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCreationReqWeb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCreationReqWeb(val *UserCreationReqWeb) *NullableUserCreationReqWeb {
	return &NullableUserCreationReqWeb{value: val, isSet: true}
}

func (v NullableUserCreationReqWeb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCreationReqWeb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


