/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ConnectorAccounting struct for ConnectorAccounting
type ConnectorAccounting struct {
	Inventory *map[string]int64 `json:"inventory,omitempty"`
	Traffic *Traffic `json:"traffic,omitempty"`
}

// NewConnectorAccounting instantiates a new ConnectorAccounting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorAccounting() *ConnectorAccounting {
	this := ConnectorAccounting{}
	return &this
}

// NewConnectorAccountingWithDefaults instantiates a new ConnectorAccounting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorAccountingWithDefaults() *ConnectorAccounting {
	this := ConnectorAccounting{}
	return &this
}

// GetInventory returns the Inventory field value if set, zero value otherwise.
func (o *ConnectorAccounting) GetInventory() map[string]int64 {
	if o == nil || o.Inventory == nil {
		var ret map[string]int64
		return ret
	}
	return *o.Inventory
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorAccounting) GetInventoryOk() (*map[string]int64, bool) {
	if o == nil || o.Inventory == nil {
		return nil, false
	}
	return o.Inventory, true
}

// HasInventory returns a boolean if a field has been set.
func (o *ConnectorAccounting) HasInventory() bool {
	if o != nil && o.Inventory != nil {
		return true
	}

	return false
}

// SetInventory gets a reference to the given map[string]int64 and assigns it to the Inventory field.
func (o *ConnectorAccounting) SetInventory(v map[string]int64) {
	o.Inventory = &v
}

// GetTraffic returns the Traffic field value if set, zero value otherwise.
func (o *ConnectorAccounting) GetTraffic() Traffic {
	if o == nil || o.Traffic == nil {
		var ret Traffic
		return ret
	}
	return *o.Traffic
}

// GetTrafficOk returns a tuple with the Traffic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorAccounting) GetTrafficOk() (*Traffic, bool) {
	if o == nil || o.Traffic == nil {
		return nil, false
	}
	return o.Traffic, true
}

// HasTraffic returns a boolean if a field has been set.
func (o *ConnectorAccounting) HasTraffic() bool {
	if o != nil && o.Traffic != nil {
		return true
	}

	return false
}

// SetTraffic gets a reference to the given Traffic and assigns it to the Traffic field.
func (o *ConnectorAccounting) SetTraffic(v Traffic) {
	o.Traffic = &v
}

func (o ConnectorAccounting) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Inventory != nil {
		toSerialize["inventory"] = o.Inventory
	}
	if o.Traffic != nil {
		toSerialize["traffic"] = o.Traffic
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorAccounting struct {
	value *ConnectorAccounting
	isSet bool
}

func (v NullableConnectorAccounting) Get() *ConnectorAccounting {
	return v.value
}

func (v *NullableConnectorAccounting) Set(val *ConnectorAccounting) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorAccounting) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorAccounting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorAccounting(val *ConnectorAccounting) *NullableConnectorAccounting {
	return &NullableConnectorAccounting{value: val, isSet: true}
}

func (v NullableConnectorAccounting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorAccounting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


