/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApi service
type DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService service

type ApiGetAssetParamUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService
	assetNamespace string
	assetId string
	paramKey string
	xAPIKEY *string
}

func (r ApiGetAssetParamUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetAssetParamUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetAssetParamUsingGETRequest) Execute() (AssetParameter, *_nethttp.Response, error) {
	return r.ApiService.GetAssetParamUsingGETExecute(r)
}

/*
 * GetAssetParamUsingGET Get a specific asset parameter
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetNamespace asset namespace ex : myNode1. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId asset identifier ex: assetInteg. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @param paramKey key identifying the targeted asset parameter. Expected string (max 128 characters)
 * @return ApiGetAssetParamUsingGETRequest
 */
func (a *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService) GetAssetParamUsingGET(ctx _context.Context, assetNamespace string, assetId string, paramKey string) ApiGetAssetParamUsingGETRequest {
	return ApiGetAssetParamUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		assetNamespace: assetNamespace,
		assetId: assetId,
		paramKey: paramKey,
	}
}

/*
 * Execute executes the request
 * @return AssetParameter
 */
func (a *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService) GetAssetParamUsingGETExecute(r ApiGetAssetParamUsingGETRequest) (AssetParameter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AssetParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService.GetAssetParamUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/assets/{assetNamespace}/{assetId}/params/{paramKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"assetNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"paramKey"+"}", _neturl.PathEscape(parameterToString(r.paramKey, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAssetParamsUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService
	assetNamespace string
	assetId string
	xAPIKEY *string
}

func (r ApiGetAssetParamsUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetAssetParamsUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetAssetParamsUsingGETRequest) Execute() (map[string]AssetParameter, *_nethttp.Response, error) {
	return r.ApiService.GetAssetParamsUsingGETExecute(r)
}

/*
 * GetAssetParamsUsingGET Get a specific asset list of parameters
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetNamespace asset namespace ex : myNode1. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId asset identifier ex: assetInteg. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @return ApiGetAssetParamsUsingGETRequest
 */
func (a *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService) GetAssetParamsUsingGET(ctx _context.Context, assetNamespace string, assetId string) ApiGetAssetParamsUsingGETRequest {
	return ApiGetAssetParamsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		assetNamespace: assetNamespace,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 * @return map[string]AssetParameter
 */
func (a *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService) GetAssetParamsUsingGETExecute(r ApiGetAssetParamsUsingGETRequest) (map[string]AssetParameter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]AssetParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService.GetAssetParamsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/assets/{assetNamespace}/{assetId}/params"
	localVarPath = strings.Replace(localVarPath, "{"+"assetNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetAssetParamsUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService
	assetNamespace string
	assetId string
	xAPIKEY *string
	notifyTo *string
	newParamValues *map[string]AssetParameterValue
}

func (r ApiSetAssetParamsUsingPOSTRequest) XAPIKEY(xAPIKEY string) ApiSetAssetParamsUsingPOSTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiSetAssetParamsUsingPOSTRequest) NotifyTo(notifyTo string) ApiSetAssetParamsUsingPOSTRequest {
	r.notifyTo = &notifyTo
	return r
}
func (r ApiSetAssetParamsUsingPOSTRequest) NewParamValues(newParamValues map[string]AssetParameterValue) ApiSetAssetParamsUsingPOSTRequest {
	r.newParamValues = &newParamValues
	return r
}

func (r ApiSetAssetParamsUsingPOSTRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SetAssetParamsUsingPOSTExecute(r)
}

/*
 * SetAssetParamsUsingPOST Update a specific asset list of parameters
 * Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetNamespace asset namespace ex : myNode1. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId asset identifier ex: assetInteg. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @return ApiSetAssetParamsUsingPOSTRequest
 */
func (a *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService) SetAssetParamsUsingPOST(ctx _context.Context, assetNamespace string, assetId string) ApiSetAssetParamsUsingPOSTRequest {
	return ApiSetAssetParamsUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
		assetNamespace: assetNamespace,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 */
func (a *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService) SetAssetParamsUsingPOSTExecute(r ApiSetAssetParamsUsingPOSTRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService.SetAssetParamsUsingPOST")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/assets/{assetNamespace}/{assetId}/params"
	localVarPath = strings.Replace(localVarPath, "{"+"assetNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.notifyTo != nil {
		localVarQueryParams.Add("notifyTo", parameterToString(*r.notifyTo, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.newParamValues
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetDeviceParamUpdateStatusUsingPUTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService
	assetNamespace string
	assetId string
	paramKey string
	xAPIKEY *string
	force *bool
	newStatus *string
}

func (r ApiSetDeviceParamUpdateStatusUsingPUTRequest) XAPIKEY(xAPIKEY string) ApiSetDeviceParamUpdateStatusUsingPUTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiSetDeviceParamUpdateStatusUsingPUTRequest) Force(force bool) ApiSetDeviceParamUpdateStatusUsingPUTRequest {
	r.force = &force
	return r
}
func (r ApiSetDeviceParamUpdateStatusUsingPUTRequest) NewStatus(newStatus string) ApiSetDeviceParamUpdateStatusUsingPUTRequest {
	r.newStatus = &newStatus
	return r
}

func (r ApiSetDeviceParamUpdateStatusUsingPUTRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SetDeviceParamUpdateStatusUsingPUTExecute(r)
}

/*
 * SetDeviceParamUpdateStatusUsingPUT Update the status of a specific asset parameter update
 * Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetNamespace asset namespace ex : myNode1. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId asset identifier ex: assetInteg. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @param paramKey key identifying the targeted asset parameter. Expected string (max 128 characters)
 * @return ApiSetDeviceParamUpdateStatusUsingPUTRequest
 */
func (a *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService) SetDeviceParamUpdateStatusUsingPUT(ctx _context.Context, assetNamespace string, assetId string, paramKey string) ApiSetDeviceParamUpdateStatusUsingPUTRequest {
	return ApiSetDeviceParamUpdateStatusUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		assetNamespace: assetNamespace,
		assetId: assetId,
		paramKey: paramKey,
	}
}

/*
 * Execute executes the request
 */
func (a *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService) SetDeviceParamUpdateStatusUsingPUTExecute(r ApiSetDeviceParamUpdateStatusUsingPUTRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService.SetDeviceParamUpdateStatusUsingPUT")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/assets/{assetNamespace}/{assetId}/params/{paramKey}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"assetNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"paramKey"+"}", _neturl.PathEscape(parameterToString(r.paramKey, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.newStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSetDeviceParamsUpdateStatusUsingPUTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService
	assetNamespace string
	assetId string
	xAPIKEY *string
	force *bool
	reqWeb *AssetParamsStatusUpdateReqWeb
}

func (r ApiSetDeviceParamsUpdateStatusUsingPUTRequest) XAPIKEY(xAPIKEY string) ApiSetDeviceParamsUpdateStatusUsingPUTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiSetDeviceParamsUpdateStatusUsingPUTRequest) Force(force bool) ApiSetDeviceParamsUpdateStatusUsingPUTRequest {
	r.force = &force
	return r
}
func (r ApiSetDeviceParamsUpdateStatusUsingPUTRequest) ReqWeb(reqWeb AssetParamsStatusUpdateReqWeb) ApiSetDeviceParamsUpdateStatusUsingPUTRequest {
	r.reqWeb = &reqWeb
	return r
}

func (r ApiSetDeviceParamsUpdateStatusUsingPUTRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SetDeviceParamsUpdateStatusUsingPUTExecute(r)
}

/*
 * SetDeviceParamsUpdateStatusUsingPUT Update the status of a specific asset parameters update
 * Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetNamespace asset namespace ex : myNode1. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId asset identifier ex: assetInteg. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @return ApiSetDeviceParamsUpdateStatusUsingPUTRequest
 */
func (a *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService) SetDeviceParamsUpdateStatusUsingPUT(ctx _context.Context, assetNamespace string, assetId string) ApiSetDeviceParamsUpdateStatusUsingPUTRequest {
	return ApiSetDeviceParamsUpdateStatusUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		assetNamespace: assetNamespace,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 */
func (a *DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService) SetDeviceParamsUpdateStatusUsingPUTExecute(r ApiSetDeviceParamsUpdateStatusUsingPUTRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementParameterV0UseDeviceManagementConfigurationV1InsteadApiService.SetDeviceParamsUpdateStatusUsingPUT")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/assets/{assetNamespace}/{assetId}/params/status"
	localVarPath = strings.Replace(localVarPath, "{"+"assetNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.reqWeb
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
