/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ScopeApplication struct for ScopeApplication
type ScopeApplication struct {
	// List of allowed FIFOs to publish or subscribe. Expected array of string (max 100 elements, value max 255 characters)
	Fifos *[]string `json:"fifos,omitempty"`
}

// NewScopeApplication instantiates a new ScopeApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeApplication() *ScopeApplication {
	this := ScopeApplication{}
	return &this
}

// NewScopeApplicationWithDefaults instantiates a new ScopeApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeApplicationWithDefaults() *ScopeApplication {
	this := ScopeApplication{}
	return &this
}

// GetFifos returns the Fifos field value if set, zero value otherwise.
func (o *ScopeApplication) GetFifos() []string {
	if o == nil || o.Fifos == nil {
		var ret []string
		return ret
	}
	return *o.Fifos
}

// GetFifosOk returns a tuple with the Fifos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeApplication) GetFifosOk() (*[]string, bool) {
	if o == nil || o.Fifos == nil {
		return nil, false
	}
	return o.Fifos, true
}

// HasFifos returns a boolean if a field has been set.
func (o *ScopeApplication) HasFifos() bool {
	if o != nil && o.Fifos != nil {
		return true
	}

	return false
}

// SetFifos gets a reference to the given []string and assigns it to the Fifos field.
func (o *ScopeApplication) SetFifos(v []string) {
	o.Fifos = &v
}

func (o ScopeApplication) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fifos != nil {
		toSerialize["fifos"] = o.Fifos
	}
	return json.Marshal(toSerialize)
}

type NullableScopeApplication struct {
	value *ScopeApplication
	isSet bool
}

func (v NullableScopeApplication) Get() *ScopeApplication {
	return v.value
}

func (v *NullableScopeApplication) Set(val *ScopeApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeApplication(val *ScopeApplication) *NullableScopeApplication {
	return &NullableScopeApplication{value: val, isSet: true}
}

func (v NullableScopeApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


