/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// OptionPartnerTenant struct for OptionPartnerTenant
type OptionPartnerTenant struct {
	// option identifier
	Id string `json:"id"`
	// Parameters
	Parameters *map[string]int32 `json:"parameters,omitempty"`
}

// NewOptionPartnerTenant instantiates a new OptionPartnerTenant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionPartnerTenant(id string, ) *OptionPartnerTenant {
	this := OptionPartnerTenant{}
	this.Id = id
	return &this
}

// NewOptionPartnerTenantWithDefaults instantiates a new OptionPartnerTenant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionPartnerTenantWithDefaults() *OptionPartnerTenant {
	this := OptionPartnerTenant{}
	return &this
}

// GetId returns the Id field value
func (o *OptionPartnerTenant) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OptionPartnerTenant) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OptionPartnerTenant) SetId(v string) {
	o.Id = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *OptionPartnerTenant) GetParameters() map[string]int32 {
	if o == nil || o.Parameters == nil {
		var ret map[string]int32
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionPartnerTenant) GetParametersOk() (*map[string]int32, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *OptionPartnerTenant) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]int32 and assigns it to the Parameters field.
func (o *OptionPartnerTenant) SetParameters(v map[string]int32) {
	o.Parameters = &v
}

func (o OptionPartnerTenant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	return json.Marshal(toSerialize)
}

type NullableOptionPartnerTenant struct {
	value *OptionPartnerTenant
	isSet bool
}

func (v NullableOptionPartnerTenant) Get() *OptionPartnerTenant {
	return v.value
}

func (v *NullableOptionPartnerTenant) Set(val *OptionPartnerTenant) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionPartnerTenant) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionPartnerTenant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionPartnerTenant(val *OptionPartnerTenant) *NullableOptionPartnerTenant {
	return &NullableOptionPartnerTenant{value: val, isSet: true}
}

func (v NullableOptionPartnerTenant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionPartnerTenant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


