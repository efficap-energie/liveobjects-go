/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// PayloadDescriptionMetadata decoder metadata
type PayloadDescriptionMetadata struct {
	// the decoder is certified for the specified encoding. Only a public decoder can be certified. The default value is false.
	Certified *bool `json:"certified,omitempty"`
	// date since when the decoder is certified. ISO 8601 date time.
	CertifiedSince *string `json:"certifiedSince,omitempty"`
}

// NewPayloadDescriptionMetadata instantiates a new PayloadDescriptionMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayloadDescriptionMetadata() *PayloadDescriptionMetadata {
	this := PayloadDescriptionMetadata{}
	return &this
}

// NewPayloadDescriptionMetadataWithDefaults instantiates a new PayloadDescriptionMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayloadDescriptionMetadataWithDefaults() *PayloadDescriptionMetadata {
	this := PayloadDescriptionMetadata{}
	return &this
}

// GetCertified returns the Certified field value if set, zero value otherwise.
func (o *PayloadDescriptionMetadata) GetCertified() bool {
	if o == nil || o.Certified == nil {
		var ret bool
		return ret
	}
	return *o.Certified
}

// GetCertifiedOk returns a tuple with the Certified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadDescriptionMetadata) GetCertifiedOk() (*bool, bool) {
	if o == nil || o.Certified == nil {
		return nil, false
	}
	return o.Certified, true
}

// HasCertified returns a boolean if a field has been set.
func (o *PayloadDescriptionMetadata) HasCertified() bool {
	if o != nil && o.Certified != nil {
		return true
	}

	return false
}

// SetCertified gets a reference to the given bool and assigns it to the Certified field.
func (o *PayloadDescriptionMetadata) SetCertified(v bool) {
	o.Certified = &v
}

// GetCertifiedSince returns the CertifiedSince field value if set, zero value otherwise.
func (o *PayloadDescriptionMetadata) GetCertifiedSince() string {
	if o == nil || o.CertifiedSince == nil {
		var ret string
		return ret
	}
	return *o.CertifiedSince
}

// GetCertifiedSinceOk returns a tuple with the CertifiedSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadDescriptionMetadata) GetCertifiedSinceOk() (*string, bool) {
	if o == nil || o.CertifiedSince == nil {
		return nil, false
	}
	return o.CertifiedSince, true
}

// HasCertifiedSince returns a boolean if a field has been set.
func (o *PayloadDescriptionMetadata) HasCertifiedSince() bool {
	if o != nil && o.CertifiedSince != nil {
		return true
	}

	return false
}

// SetCertifiedSince gets a reference to the given string and assigns it to the CertifiedSince field.
func (o *PayloadDescriptionMetadata) SetCertifiedSince(v string) {
	o.CertifiedSince = &v
}

func (o PayloadDescriptionMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Certified != nil {
		toSerialize["certified"] = o.Certified
	}
	if o.CertifiedSince != nil {
		toSerialize["certifiedSince"] = o.CertifiedSince
	}
	return json.Marshal(toSerialize)
}

type NullablePayloadDescriptionMetadata struct {
	value *PayloadDescriptionMetadata
	isSet bool
}

func (v NullablePayloadDescriptionMetadata) Get() *PayloadDescriptionMetadata {
	return v.value
}

func (v *NullablePayloadDescriptionMetadata) Set(val *PayloadDescriptionMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullablePayloadDescriptionMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullablePayloadDescriptionMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayloadDescriptionMetadata(val *PayloadDescriptionMetadata) *NullablePayloadDescriptionMetadata {
	return &NullablePayloadDescriptionMetadata{value: val, isSet: true}
}

func (v NullablePayloadDescriptionMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayloadDescriptionMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


