/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// OfferAndOptions struct for OfferAndOptions
type OfferAndOptions struct {
	Offer *Rule `json:"offer,omitempty"`
	// displayName
	Options *[]Rule `json:"options,omitempty"`
}

// NewOfferAndOptions instantiates a new OfferAndOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOfferAndOptions() *OfferAndOptions {
	this := OfferAndOptions{}
	return &this
}

// NewOfferAndOptionsWithDefaults instantiates a new OfferAndOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOfferAndOptionsWithDefaults() *OfferAndOptions {
	this := OfferAndOptions{}
	return &this
}

// GetOffer returns the Offer field value if set, zero value otherwise.
func (o *OfferAndOptions) GetOffer() Rule {
	if o == nil || o.Offer == nil {
		var ret Rule
		return ret
	}
	return *o.Offer
}

// GetOfferOk returns a tuple with the Offer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferAndOptions) GetOfferOk() (*Rule, bool) {
	if o == nil || o.Offer == nil {
		return nil, false
	}
	return o.Offer, true
}

// HasOffer returns a boolean if a field has been set.
func (o *OfferAndOptions) HasOffer() bool {
	if o != nil && o.Offer != nil {
		return true
	}

	return false
}

// SetOffer gets a reference to the given Rule and assigns it to the Offer field.
func (o *OfferAndOptions) SetOffer(v Rule) {
	o.Offer = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *OfferAndOptions) GetOptions() []Rule {
	if o == nil || o.Options == nil {
		var ret []Rule
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OfferAndOptions) GetOptionsOk() (*[]Rule, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *OfferAndOptions) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []Rule and assigns it to the Options field.
func (o *OfferAndOptions) SetOptions(v []Rule) {
	o.Options = &v
}

func (o OfferAndOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Offer != nil {
		toSerialize["offer"] = o.Offer
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableOfferAndOptions struct {
	value *OfferAndOptions
	isSet bool
}

func (v NullableOfferAndOptions) Get() *OfferAndOptions {
	return v.value
}

func (v *NullableOfferAndOptions) Set(val *OfferAndOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferAndOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferAndOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferAndOptions(val *OfferAndOptions) *NullableOfferAndOptions {
	return &NullableOfferAndOptions{value: val, isSet: true}
}

func (v NullableOfferAndOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferAndOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


