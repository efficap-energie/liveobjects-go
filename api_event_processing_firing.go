/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// EventProcessingFiringApiService EventProcessingFiringApi service
type EventProcessingFiringApiService service

type ApiDeleteUsingDELETE16Request struct {
	ctx _context.Context
	ApiService *EventProcessingFiringApiService
	firingRuleId string
	xAPIKEY *string
}

func (r ApiDeleteUsingDELETE16Request) XAPIKEY(xAPIKEY string) ApiDeleteUsingDELETE16Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiDeleteUsingDELETE16Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteUsingDELETE16Execute(r)
}

/*
 * DeleteUsingDELETE16 Delete a FiringRule
 * Usage of this API will be reported in your access log under 'alarming' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param firingRuleId id of the FiringRule to delete
 * @return ApiDeleteUsingDELETE16Request
 */
func (a *EventProcessingFiringApiService) DeleteUsingDELETE16(ctx _context.Context, firingRuleId string) ApiDeleteUsingDELETE16Request {
	return ApiDeleteUsingDELETE16Request{
		ApiService: a,
		ctx: ctx,
		firingRuleId: firingRuleId,
	}
}

/*
 * Execute executes the request
 */
func (a *EventProcessingFiringApiService) DeleteUsingDELETE16Execute(r ApiDeleteUsingDELETE16Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingFiringApiService.DeleteUsingDELETE16")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/firing-rule/{firingRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firingRuleId"+"}", _neturl.PathEscape(parameterToString(r.firingRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFiringGuardUsingGETRequest struct {
	ctx _context.Context
	ApiService *EventProcessingFiringApiService
	firingGuardId string
	xAPIKEY *string
}

func (r ApiGetFiringGuardUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetFiringGuardUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetFiringGuardUsingGETRequest) Execute() (FiringGuard, *_nethttp.Response, error) {
	return r.ApiService.GetFiringGuardUsingGETExecute(r)
}

/*
 * GetFiringGuardUsingGET Get a FiringGuard
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param firingGuardId id of the FiringGuard
 * @return ApiGetFiringGuardUsingGETRequest
 */
func (a *EventProcessingFiringApiService) GetFiringGuardUsingGET(ctx _context.Context, firingGuardId string) ApiGetFiringGuardUsingGETRequest {
	return ApiGetFiringGuardUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		firingGuardId: firingGuardId,
	}
}

/*
 * Execute executes the request
 * @return FiringGuard
 */
func (a *EventProcessingFiringApiService) GetFiringGuardUsingGETExecute(r ApiGetFiringGuardUsingGETRequest) (FiringGuard, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FiringGuard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingFiringApiService.GetFiringGuardUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/firing-guard/{firingGuardId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firingGuardId"+"}", _neturl.PathEscape(parameterToString(r.firingGuardId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFiringGuardsUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *EventProcessingFiringApiService
	xAPIKEY *string
	searchParam *FiringGuardGetRequest
}

func (r ApiGetFiringGuardsUsingPOSTRequest) XAPIKEY(xAPIKEY string) ApiGetFiringGuardsUsingPOSTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiGetFiringGuardsUsingPOSTRequest) SearchParam(searchParam FiringGuardGetRequest) ApiGetFiringGuardsUsingPOSTRequest {
	r.searchParam = &searchParam
	return r
}

func (r ApiGetFiringGuardsUsingPOSTRequest) Execute() ([]FiringGuard, *_nethttp.Response, error) {
	return r.ApiService.GetFiringGuardsUsingPOSTExecute(r)
}

/*
 * GetFiringGuardsUsingPOST Get FiringGuards linked to a FiringRule, and where FiringGuards selection criteria match.
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetFiringGuardsUsingPOSTRequest
 */
func (a *EventProcessingFiringApiService) GetFiringGuardsUsingPOST(ctx _context.Context) ApiGetFiringGuardsUsingPOSTRequest {
	return ApiGetFiringGuardsUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []FiringGuard
 */
func (a *EventProcessingFiringApiService) GetFiringGuardsUsingPOSTExecute(r ApiGetFiringGuardsUsingPOSTRequest) ([]FiringGuard, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []FiringGuard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingFiringApiService.GetFiringGuardsUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/firing-guard/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.searchParam
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUsingGET15Request struct {
	ctx _context.Context
	ApiService *EventProcessingFiringApiService
	firingRuleId string
	xAPIKEY *string
}

func (r ApiGetUsingGET15Request) XAPIKEY(xAPIKEY string) ApiGetUsingGET15Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetUsingGET15Request) Execute() (FiringRule, *_nethttp.Response, error) {
	return r.ApiService.GetUsingGET15Execute(r)
}

/*
 * GetUsingGET15 Retrieve a FiringRule
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param firingRuleId id of the FiringRule to retrieve
 * @return ApiGetUsingGET15Request
 */
func (a *EventProcessingFiringApiService) GetUsingGET15(ctx _context.Context, firingRuleId string) ApiGetUsingGET15Request {
	return ApiGetUsingGET15Request{
		ApiService: a,
		ctx: ctx,
		firingRuleId: firingRuleId,
	}
}

/*
 * Execute executes the request
 * @return FiringRule
 */
func (a *EventProcessingFiringApiService) GetUsingGET15Execute(r ApiGetUsingGET15Request) (FiringRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FiringRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingFiringApiService.GetUsingGET15")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/firing-rule/{firingRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firingRuleId"+"}", _neturl.PathEscape(parameterToString(r.firingRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUsingGET18Request struct {
	ctx _context.Context
	ApiService *EventProcessingFiringApiService
	xAPIKEY *string
	name *string
}

func (r ApiListUsingGET18Request) XAPIKEY(xAPIKEY string) ApiListUsingGET18Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiListUsingGET18Request) Name(name string) ApiListUsingGET18Request {
	r.name = &name
	return r
}

func (r ApiListUsingGET18Request) Execute() ([]FiringRule, *_nethttp.Response, error) {
	return r.ApiService.ListUsingGET18Execute(r)
}

/*
 * ListUsingGET18 Retrieve the list of all the FiringRules or get a FiringRule by its name
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListUsingGET18Request
 */
func (a *EventProcessingFiringApiService) ListUsingGET18(ctx _context.Context) ApiListUsingGET18Request {
	return ApiListUsingGET18Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []FiringRule
 */
func (a *EventProcessingFiringApiService) ListUsingGET18Execute(r ApiListUsingGET18Request) ([]FiringRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []FiringRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingFiringApiService.ListUsingGET18")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/firing-rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostUsingPOST14Request struct {
	ctx _context.Context
	ApiService *EventProcessingFiringApiService
	xAPIKEY *string
	firingRule *FiringRule
}

func (r ApiPostUsingPOST14Request) XAPIKEY(xAPIKEY string) ApiPostUsingPOST14Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiPostUsingPOST14Request) FiringRule(firingRule FiringRule) ApiPostUsingPOST14Request {
	r.firingRule = &firingRule
	return r
}

func (r ApiPostUsingPOST14Request) Execute() (FiringRule, *_nethttp.Response, error) {
	return r.ApiService.PostUsingPOST14Execute(r)
}

/*
 * PostUsingPOST14 Create a FiringRule
 * Total number of FiringRules is limited. Contact the commercial team or see developer guide to get more information.<br><br>Usage of this API will be reported in your access log under 'alarming' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPostUsingPOST14Request
 */
func (a *EventProcessingFiringApiService) PostUsingPOST14(ctx _context.Context) ApiPostUsingPOST14Request {
	return ApiPostUsingPOST14Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return FiringRule
 */
func (a *EventProcessingFiringApiService) PostUsingPOST14Execute(r ApiPostUsingPOST14Request) (FiringRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FiringRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingFiringApiService.PostUsingPOST14")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/firing-rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.firingRule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveFiringGuardUsingDELETERequest struct {
	ctx _context.Context
	ApiService *EventProcessingFiringApiService
	firingGuardId string
	xAPIKEY *string
}

func (r ApiRemoveFiringGuardUsingDELETERequest) XAPIKEY(xAPIKEY string) ApiRemoveFiringGuardUsingDELETERequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiRemoveFiringGuardUsingDELETERequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.RemoveFiringGuardUsingDELETEExecute(r)
}

/*
 * RemoveFiringGuardUsingDELETE Remove a FiringGuard
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param firingGuardId id of the FiringGuard to remove
 * @return ApiRemoveFiringGuardUsingDELETERequest
 */
func (a *EventProcessingFiringApiService) RemoveFiringGuardUsingDELETE(ctx _context.Context, firingGuardId string) ApiRemoveFiringGuardUsingDELETERequest {
	return ApiRemoveFiringGuardUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		firingGuardId: firingGuardId,
	}
}

/*
 * Execute executes the request
 */
func (a *EventProcessingFiringApiService) RemoveFiringGuardUsingDELETEExecute(r ApiRemoveFiringGuardUsingDELETERequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingFiringApiService.RemoveFiringGuardUsingDELETE")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/firing-guard/{firingGuardId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firingGuardId"+"}", _neturl.PathEscape(parameterToString(r.firingGuardId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRemoveFiringGuardsUsingDELETERequest struct {
	ctx _context.Context
	ApiService *EventProcessingFiringApiService
	xAPIKEY *string
	resetParams *FiringGuardResetRequest
}

func (r ApiRemoveFiringGuardsUsingDELETERequest) XAPIKEY(xAPIKEY string) ApiRemoveFiringGuardsUsingDELETERequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiRemoveFiringGuardsUsingDELETERequest) ResetParams(resetParams FiringGuardResetRequest) ApiRemoveFiringGuardsUsingDELETERequest {
	r.resetParams = &resetParams
	return r
}

func (r ApiRemoveFiringGuardsUsingDELETERequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.RemoveFiringGuardsUsingDELETEExecute(r)
}

/*
 * RemoveFiringGuardsUsingDELETE Remove the FiringGuards linked to FiringRule, and where FiringGuards selection criteria match.
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiRemoveFiringGuardsUsingDELETERequest
 */
func (a *EventProcessingFiringApiService) RemoveFiringGuardsUsingDELETE(ctx _context.Context) ApiRemoveFiringGuardsUsingDELETERequest {
	return ApiRemoveFiringGuardsUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return int32
 */
func (a *EventProcessingFiringApiService) RemoveFiringGuardsUsingDELETEExecute(r ApiRemoveFiringGuardsUsingDELETERequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingFiringApiService.RemoveFiringGuardsUsingDELETE")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/firing-guard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.resetParams
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateUsingPUT8Request struct {
	ctx _context.Context
	ApiService *EventProcessingFiringApiService
	firingRuleId string
	xAPIKEY *string
	firingRule *FiringRule
}

func (r ApiUpdateUsingPUT8Request) XAPIKEY(xAPIKEY string) ApiUpdateUsingPUT8Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiUpdateUsingPUT8Request) FiringRule(firingRule FiringRule) ApiUpdateUsingPUT8Request {
	r.firingRule = &firingRule
	return r
}

func (r ApiUpdateUsingPUT8Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UpdateUsingPUT8Execute(r)
}

/*
 * UpdateUsingPUT8 Update a FiringRule
 * Usage of this API will be reported in your access log under 'alarming' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param firingRuleId id of the FiringRule to update
 * @return ApiUpdateUsingPUT8Request
 */
func (a *EventProcessingFiringApiService) UpdateUsingPUT8(ctx _context.Context, firingRuleId string) ApiUpdateUsingPUT8Request {
	return ApiUpdateUsingPUT8Request{
		ApiService: a,
		ctx: ctx,
		firingRuleId: firingRuleId,
	}
}

/*
 * Execute executes the request
 */
func (a *EventProcessingFiringApiService) UpdateUsingPUT8Execute(r ApiUpdateUsingPUT8Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingFiringApiService.UpdateUsingPUT8")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/firing-rule/{firingRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firingRuleId"+"}", _neturl.PathEscape(parameterToString(r.firingRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.firingRule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
