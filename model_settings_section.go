/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// SettingsSection struct for SettingsSection
type SettingsSection struct {
	Content *map[string]interface{} `json:"content,omitempty"`
	Revision *int32 `json:"revision,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewSettingsSection instantiates a new SettingsSection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsSection() *SettingsSection {
	this := SettingsSection{}
	return &this
}

// NewSettingsSectionWithDefaults instantiates a new SettingsSection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsSectionWithDefaults() *SettingsSection {
	this := SettingsSection{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *SettingsSection) GetContent() map[string]interface{} {
	if o == nil || o.Content == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsSection) GetContentOk() (*map[string]interface{}, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *SettingsSection) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given map[string]interface{} and assigns it to the Content field.
func (o *SettingsSection) SetContent(v map[string]interface{}) {
	o.Content = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *SettingsSection) GetRevision() int32 {
	if o == nil || o.Revision == nil {
		var ret int32
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsSection) GetRevisionOk() (*int32, bool) {
	if o == nil || o.Revision == nil {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *SettingsSection) HasRevision() bool {
	if o != nil && o.Revision != nil {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int32 and assigns it to the Revision field.
func (o *SettingsSection) SetRevision(v int32) {
	o.Revision = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SettingsSection) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsSection) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SettingsSection) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *SettingsSection) SetVersion(v string) {
	o.Version = &v
}

func (o SettingsSection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.Revision != nil {
		toSerialize["revision"] = o.Revision
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableSettingsSection struct {
	value *SettingsSection
	isSet bool
}

func (v NullableSettingsSection) Get() *SettingsSection {
	return v.value
}

func (v *NullableSettingsSection) Set(val *SettingsSection) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsSection) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsSection(val *SettingsSection) *NullableSettingsSection {
	return &NullableSettingsSection{value: val, isSet: true}
}

func (v NullableSettingsSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


