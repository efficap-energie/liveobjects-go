/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// AuthReqWeb body of authentication request
type AuthReqWeb struct {
	// the user email
	Email *string `json:"email,omitempty"`
	// the user login
	Login *string `json:"login,omitempty"`
	// the user password
	Password string `json:"password"`
}

// NewAuthReqWeb instantiates a new AuthReqWeb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthReqWeb(password string, ) *AuthReqWeb {
	this := AuthReqWeb{}
	this.Password = password
	return &this
}

// NewAuthReqWebWithDefaults instantiates a new AuthReqWeb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthReqWebWithDefaults() *AuthReqWeb {
	this := AuthReqWeb{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AuthReqWeb) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthReqWeb) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AuthReqWeb) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AuthReqWeb) SetEmail(v string) {
	o.Email = &v
}

// GetLogin returns the Login field value if set, zero value otherwise.
func (o *AuthReqWeb) GetLogin() string {
	if o == nil || o.Login == nil {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthReqWeb) GetLoginOk() (*string, bool) {
	if o == nil || o.Login == nil {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *AuthReqWeb) HasLogin() bool {
	if o != nil && o.Login != nil {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
func (o *AuthReqWeb) SetLogin(v string) {
	o.Login = &v
}

// GetPassword returns the Password field value
func (o *AuthReqWeb) GetPassword() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *AuthReqWeb) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *AuthReqWeb) SetPassword(v string) {
	o.Password = v
}

func (o AuthReqWeb) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Login != nil {
		toSerialize["login"] = o.Login
	}
	if true {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableAuthReqWeb struct {
	value *AuthReqWeb
	isSet bool
}

func (v NullableAuthReqWeb) Get() *AuthReqWeb {
	return v.value
}

func (v *NullableAuthReqWeb) Set(val *AuthReqWeb) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthReqWeb) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthReqWeb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthReqWeb(val *AuthReqWeb) *NullableAuthReqWeb {
	return &NullableAuthReqWeb{value: val, isSet: true}
}

func (v NullableAuthReqWeb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthReqWeb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


