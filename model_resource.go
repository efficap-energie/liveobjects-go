/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// Resource Resource data
type Resource struct {
	// the resource's connector
	Connector *string `json:"connector,omitempty"`
	// creation timestamp
	CreationTs *int64 `json:"creationTs,omitempty"`
	// the resource's description
	Description *string `json:"description,omitempty"`
	// the resource's label
	Label *string `json:"label,omitempty"`
	// the resource metadata
	Metadata *map[string]string `json:"metadata,omitempty"`
	// the resource's identifier
	ResourceId *string `json:"resourceId,omitempty"`
	// identifier of tenant account
	TenantId *string `json:"tenantId,omitempty"`
	// last update timestamp
	UpdateTs *int64 `json:"updateTs,omitempty"`
	// the resource version aliases
	VersionAliases *map[string]string `json:"versionAliases,omitempty"`
}

// NewResource instantiates a new Resource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResource() *Resource {
	this := Resource{}
	return &this
}

// NewResourceWithDefaults instantiates a new Resource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceWithDefaults() *Resource {
	this := Resource{}
	return &this
}

// GetConnector returns the Connector field value if set, zero value otherwise.
func (o *Resource) GetConnector() string {
	if o == nil || o.Connector == nil {
		var ret string
		return ret
	}
	return *o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetConnectorOk() (*string, bool) {
	if o == nil || o.Connector == nil {
		return nil, false
	}
	return o.Connector, true
}

// HasConnector returns a boolean if a field has been set.
func (o *Resource) HasConnector() bool {
	if o != nil && o.Connector != nil {
		return true
	}

	return false
}

// SetConnector gets a reference to the given string and assigns it to the Connector field.
func (o *Resource) SetConnector(v string) {
	o.Connector = &v
}

// GetCreationTs returns the CreationTs field value if set, zero value otherwise.
func (o *Resource) GetCreationTs() int64 {
	if o == nil || o.CreationTs == nil {
		var ret int64
		return ret
	}
	return *o.CreationTs
}

// GetCreationTsOk returns a tuple with the CreationTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetCreationTsOk() (*int64, bool) {
	if o == nil || o.CreationTs == nil {
		return nil, false
	}
	return o.CreationTs, true
}

// HasCreationTs returns a boolean if a field has been set.
func (o *Resource) HasCreationTs() bool {
	if o != nil && o.CreationTs != nil {
		return true
	}

	return false
}

// SetCreationTs gets a reference to the given int64 and assigns it to the CreationTs field.
func (o *Resource) SetCreationTs(v int64) {
	o.CreationTs = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Resource) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Resource) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Resource) SetDescription(v string) {
	o.Description = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Resource) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Resource) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Resource) SetLabel(v string) {
	o.Label = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Resource) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Resource) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *Resource) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *Resource) GetResourceId() string {
	if o == nil || o.ResourceId == nil {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetResourceIdOk() (*string, bool) {
	if o == nil || o.ResourceId == nil {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *Resource) HasResourceId() bool {
	if o != nil && o.ResourceId != nil {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *Resource) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *Resource) GetTenantId() string {
	if o == nil || o.TenantId == nil {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetTenantIdOk() (*string, bool) {
	if o == nil || o.TenantId == nil {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *Resource) HasTenantId() bool {
	if o != nil && o.TenantId != nil {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *Resource) SetTenantId(v string) {
	o.TenantId = &v
}

// GetUpdateTs returns the UpdateTs field value if set, zero value otherwise.
func (o *Resource) GetUpdateTs() int64 {
	if o == nil || o.UpdateTs == nil {
		var ret int64
		return ret
	}
	return *o.UpdateTs
}

// GetUpdateTsOk returns a tuple with the UpdateTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetUpdateTsOk() (*int64, bool) {
	if o == nil || o.UpdateTs == nil {
		return nil, false
	}
	return o.UpdateTs, true
}

// HasUpdateTs returns a boolean if a field has been set.
func (o *Resource) HasUpdateTs() bool {
	if o != nil && o.UpdateTs != nil {
		return true
	}

	return false
}

// SetUpdateTs gets a reference to the given int64 and assigns it to the UpdateTs field.
func (o *Resource) SetUpdateTs(v int64) {
	o.UpdateTs = &v
}

// GetVersionAliases returns the VersionAliases field value if set, zero value otherwise.
func (o *Resource) GetVersionAliases() map[string]string {
	if o == nil || o.VersionAliases == nil {
		var ret map[string]string
		return ret
	}
	return *o.VersionAliases
}

// GetVersionAliasesOk returns a tuple with the VersionAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetVersionAliasesOk() (*map[string]string, bool) {
	if o == nil || o.VersionAliases == nil {
		return nil, false
	}
	return o.VersionAliases, true
}

// HasVersionAliases returns a boolean if a field has been set.
func (o *Resource) HasVersionAliases() bool {
	if o != nil && o.VersionAliases != nil {
		return true
	}

	return false
}

// SetVersionAliases gets a reference to the given map[string]string and assigns it to the VersionAliases field.
func (o *Resource) SetVersionAliases(v map[string]string) {
	o.VersionAliases = &v
}

func (o Resource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Connector != nil {
		toSerialize["connector"] = o.Connector
	}
	if o.CreationTs != nil {
		toSerialize["creationTs"] = o.CreationTs
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.ResourceId != nil {
		toSerialize["resourceId"] = o.ResourceId
	}
	if o.TenantId != nil {
		toSerialize["tenantId"] = o.TenantId
	}
	if o.UpdateTs != nil {
		toSerialize["updateTs"] = o.UpdateTs
	}
	if o.VersionAliases != nil {
		toSerialize["versionAliases"] = o.VersionAliases
	}
	return json.Marshal(toSerialize)
}

type NullableResource struct {
	value *Resource
	isSet bool
}

func (v NullableResource) Get() *Resource {
	return v.value
}

func (v *NullableResource) Set(val *Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResource(val *Resource) *NullableResource {
	return &NullableResource{value: val, isSet: true}
}

func (v NullableResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


