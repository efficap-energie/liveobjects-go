/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ActivityState defines the current activity state of a specific device and a specific activity rule
type ActivityState struct {
	ActivityRule ActivityRule `json:"activityRule"`
	// id of the targeted device
	DeviceId string `json:"deviceId"`
	// timestamp (ISO 8601) of the last registered contact of the device
	LastActivity *string `json:"lastActivity,omitempty"`
	// timestamp (ISO 8601) of the next alarm for this rule if the device remains silent
	NextAlarm string `json:"nextAlarm"`
	// number of times a reminder has been sent for the current state
	NumberOfAlarmReminders int32 `json:"numberOfAlarmReminders"`
	// current state of the device
	State string `json:"state"`
}

// NewActivityState instantiates a new ActivityState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityState(activityRule ActivityRule, deviceId string, nextAlarm string, numberOfAlarmReminders int32, state string, ) *ActivityState {
	this := ActivityState{}
	this.ActivityRule = activityRule
	this.DeviceId = deviceId
	this.NextAlarm = nextAlarm
	this.NumberOfAlarmReminders = numberOfAlarmReminders
	this.State = state
	return &this
}

// NewActivityStateWithDefaults instantiates a new ActivityState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityStateWithDefaults() *ActivityState {
	this := ActivityState{}
	return &this
}

// GetActivityRule returns the ActivityRule field value
func (o *ActivityState) GetActivityRule() ActivityRule {
	if o == nil  {
		var ret ActivityRule
		return ret
	}

	return o.ActivityRule
}

// GetActivityRuleOk returns a tuple with the ActivityRule field value
// and a boolean to check if the value has been set.
func (o *ActivityState) GetActivityRuleOk() (*ActivityRule, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ActivityRule, true
}

// SetActivityRule sets field value
func (o *ActivityState) SetActivityRule(v ActivityRule) {
	o.ActivityRule = v
}

// GetDeviceId returns the DeviceId field value
func (o *ActivityState) GetDeviceId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *ActivityState) GetDeviceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *ActivityState) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetLastActivity returns the LastActivity field value if set, zero value otherwise.
func (o *ActivityState) GetLastActivity() string {
	if o == nil || o.LastActivity == nil {
		var ret string
		return ret
	}
	return *o.LastActivity
}

// GetLastActivityOk returns a tuple with the LastActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityState) GetLastActivityOk() (*string, bool) {
	if o == nil || o.LastActivity == nil {
		return nil, false
	}
	return o.LastActivity, true
}

// HasLastActivity returns a boolean if a field has been set.
func (o *ActivityState) HasLastActivity() bool {
	if o != nil && o.LastActivity != nil {
		return true
	}

	return false
}

// SetLastActivity gets a reference to the given string and assigns it to the LastActivity field.
func (o *ActivityState) SetLastActivity(v string) {
	o.LastActivity = &v
}

// GetNextAlarm returns the NextAlarm field value
func (o *ActivityState) GetNextAlarm() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.NextAlarm
}

// GetNextAlarmOk returns a tuple with the NextAlarm field value
// and a boolean to check if the value has been set.
func (o *ActivityState) GetNextAlarmOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NextAlarm, true
}

// SetNextAlarm sets field value
func (o *ActivityState) SetNextAlarm(v string) {
	o.NextAlarm = v
}

// GetNumberOfAlarmReminders returns the NumberOfAlarmReminders field value
func (o *ActivityState) GetNumberOfAlarmReminders() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.NumberOfAlarmReminders
}

// GetNumberOfAlarmRemindersOk returns a tuple with the NumberOfAlarmReminders field value
// and a boolean to check if the value has been set.
func (o *ActivityState) GetNumberOfAlarmRemindersOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NumberOfAlarmReminders, true
}

// SetNumberOfAlarmReminders sets field value
func (o *ActivityState) SetNumberOfAlarmReminders(v int32) {
	o.NumberOfAlarmReminders = v
}

// GetState returns the State field value
func (o *ActivityState) GetState() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ActivityState) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ActivityState) SetState(v string) {
	o.State = v
}

func (o ActivityState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["activityRule"] = o.ActivityRule
	}
	if true {
		toSerialize["deviceId"] = o.DeviceId
	}
	if o.LastActivity != nil {
		toSerialize["lastActivity"] = o.LastActivity
	}
	if true {
		toSerialize["nextAlarm"] = o.NextAlarm
	}
	if true {
		toSerialize["numberOfAlarmReminders"] = o.NumberOfAlarmReminders
	}
	if true {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableActivityState struct {
	value *ActivityState
	isSet bool
}

func (v NullableActivityState) Get() *ActivityState {
	return v.value
}

func (v *NullableActivityState) Set(val *ActivityState) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityState) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityState(val *ActivityState) *NullableActivityState {
	return &NullableActivityState{value: val, isSet: true}
}

func (v NullableActivityState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


