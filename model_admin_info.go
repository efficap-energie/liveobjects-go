/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// AdminInfo struct for AdminInfo
type AdminInfo struct {
	BusinessUnit *BusinessUnit `json:"businessUnit,omitempty"`
	Country *string `json:"country,omitempty"`
	SupportVendorIds *[]string `json:"supportVendorIds,omitempty"`
	Vendor *Vendor `json:"vendor,omitempty"`
}

// NewAdminInfo instantiates a new AdminInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminInfo() *AdminInfo {
	this := AdminInfo{}
	return &this
}

// NewAdminInfoWithDefaults instantiates a new AdminInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminInfoWithDefaults() *AdminInfo {
	this := AdminInfo{}
	return &this
}

// GetBusinessUnit returns the BusinessUnit field value if set, zero value otherwise.
func (o *AdminInfo) GetBusinessUnit() BusinessUnit {
	if o == nil || o.BusinessUnit == nil {
		var ret BusinessUnit
		return ret
	}
	return *o.BusinessUnit
}

// GetBusinessUnitOk returns a tuple with the BusinessUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInfo) GetBusinessUnitOk() (*BusinessUnit, bool) {
	if o == nil || o.BusinessUnit == nil {
		return nil, false
	}
	return o.BusinessUnit, true
}

// HasBusinessUnit returns a boolean if a field has been set.
func (o *AdminInfo) HasBusinessUnit() bool {
	if o != nil && o.BusinessUnit != nil {
		return true
	}

	return false
}

// SetBusinessUnit gets a reference to the given BusinessUnit and assigns it to the BusinessUnit field.
func (o *AdminInfo) SetBusinessUnit(v BusinessUnit) {
	o.BusinessUnit = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *AdminInfo) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInfo) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AdminInfo) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *AdminInfo) SetCountry(v string) {
	o.Country = &v
}

// GetSupportVendorIds returns the SupportVendorIds field value if set, zero value otherwise.
func (o *AdminInfo) GetSupportVendorIds() []string {
	if o == nil || o.SupportVendorIds == nil {
		var ret []string
		return ret
	}
	return *o.SupportVendorIds
}

// GetSupportVendorIdsOk returns a tuple with the SupportVendorIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInfo) GetSupportVendorIdsOk() (*[]string, bool) {
	if o == nil || o.SupportVendorIds == nil {
		return nil, false
	}
	return o.SupportVendorIds, true
}

// HasSupportVendorIds returns a boolean if a field has been set.
func (o *AdminInfo) HasSupportVendorIds() bool {
	if o != nil && o.SupportVendorIds != nil {
		return true
	}

	return false
}

// SetSupportVendorIds gets a reference to the given []string and assigns it to the SupportVendorIds field.
func (o *AdminInfo) SetSupportVendorIds(v []string) {
	o.SupportVendorIds = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *AdminInfo) GetVendor() Vendor {
	if o == nil || o.Vendor == nil {
		var ret Vendor
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminInfo) GetVendorOk() (*Vendor, bool) {
	if o == nil || o.Vendor == nil {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *AdminInfo) HasVendor() bool {
	if o != nil && o.Vendor != nil {
		return true
	}

	return false
}

// SetVendor gets a reference to the given Vendor and assigns it to the Vendor field.
func (o *AdminInfo) SetVendor(v Vendor) {
	o.Vendor = &v
}

func (o AdminInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BusinessUnit != nil {
		toSerialize["businessUnit"] = o.BusinessUnit
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.SupportVendorIds != nil {
		toSerialize["supportVendorIds"] = o.SupportVendorIds
	}
	if o.Vendor != nil {
		toSerialize["vendor"] = o.Vendor
	}
	return json.Marshal(toSerialize)
}

type NullableAdminInfo struct {
	value *AdminInfo
	isSet bool
}

func (v NullableAdminInfo) Get() *AdminInfo {
	return v.value
}

func (v *NullableAdminInfo) Set(val *AdminInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminInfo(val *AdminInfo) *NullableAdminInfo {
	return &NullableAdminInfo{value: val, isSet: true}
}

func (v NullableAdminInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


