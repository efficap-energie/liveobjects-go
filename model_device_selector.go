/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// DeviceSelector struct for DeviceSelector
type DeviceSelector struct {
	// Filtering expression using RSQL notation. Supported device properties are 'groupPath', 'groupId', 'tags', 'properties'. Supported RSQL operators are '==','!=','=in=','=out=','=re=','=lt=','=le=','=gt=','=ge=','and','or'
	FilterQuery *string `json:"filterQuery,omitempty"`
	// List of device IDs in the form urn:lo:nsid:${assetNamespace}:${assetId}
	IdList *[]string `json:"idList,omitempty"`
}

// NewDeviceSelector instantiates a new DeviceSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceSelector() *DeviceSelector {
	this := DeviceSelector{}
	return &this
}

// NewDeviceSelectorWithDefaults instantiates a new DeviceSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceSelectorWithDefaults() *DeviceSelector {
	this := DeviceSelector{}
	return &this
}

// GetFilterQuery returns the FilterQuery field value if set, zero value otherwise.
func (o *DeviceSelector) GetFilterQuery() string {
	if o == nil || o.FilterQuery == nil {
		var ret string
		return ret
	}
	return *o.FilterQuery
}

// GetFilterQueryOk returns a tuple with the FilterQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSelector) GetFilterQueryOk() (*string, bool) {
	if o == nil || o.FilterQuery == nil {
		return nil, false
	}
	return o.FilterQuery, true
}

// HasFilterQuery returns a boolean if a field has been set.
func (o *DeviceSelector) HasFilterQuery() bool {
	if o != nil && o.FilterQuery != nil {
		return true
	}

	return false
}

// SetFilterQuery gets a reference to the given string and assigns it to the FilterQuery field.
func (o *DeviceSelector) SetFilterQuery(v string) {
	o.FilterQuery = &v
}

// GetIdList returns the IdList field value if set, zero value otherwise.
func (o *DeviceSelector) GetIdList() []string {
	if o == nil || o.IdList == nil {
		var ret []string
		return ret
	}
	return *o.IdList
}

// GetIdListOk returns a tuple with the IdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceSelector) GetIdListOk() (*[]string, bool) {
	if o == nil || o.IdList == nil {
		return nil, false
	}
	return o.IdList, true
}

// HasIdList returns a boolean if a field has been set.
func (o *DeviceSelector) HasIdList() bool {
	if o != nil && o.IdList != nil {
		return true
	}

	return false
}

// SetIdList gets a reference to the given []string and assigns it to the IdList field.
func (o *DeviceSelector) SetIdList(v []string) {
	o.IdList = &v
}

func (o DeviceSelector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilterQuery != nil {
		toSerialize["filterQuery"] = o.FilterQuery
	}
	if o.IdList != nil {
		toSerialize["idList"] = o.IdList
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceSelector struct {
	value *DeviceSelector
	isSet bool
}

func (v NullableDeviceSelector) Get() *DeviceSelector {
	return v.value
}

func (v *NullableDeviceSelector) Set(val *DeviceSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceSelector(val *DeviceSelector) *NullableDeviceSelector {
	return &NullableDeviceSelector{value: val, isSet: true}
}

func (v NullableDeviceSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


