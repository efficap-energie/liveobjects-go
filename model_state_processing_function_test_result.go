/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// StateProcessingFunctionTestResult struct for StateProcessingFunctionTestResult
type StateProcessingFunctionTestResult struct {
	DataValid *bool `json:"dataValid,omitempty"`
	StateFunctionResult *map[string]interface{} `json:"stateFunctionResult,omitempty"`
	StateFunctionValid *bool `json:"stateFunctionValid,omitempty"`
}

// NewStateProcessingFunctionTestResult instantiates a new StateProcessingFunctionTestResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStateProcessingFunctionTestResult() *StateProcessingFunctionTestResult {
	this := StateProcessingFunctionTestResult{}
	return &this
}

// NewStateProcessingFunctionTestResultWithDefaults instantiates a new StateProcessingFunctionTestResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStateProcessingFunctionTestResultWithDefaults() *StateProcessingFunctionTestResult {
	this := StateProcessingFunctionTestResult{}
	return &this
}

// GetDataValid returns the DataValid field value if set, zero value otherwise.
func (o *StateProcessingFunctionTestResult) GetDataValid() bool {
	if o == nil || o.DataValid == nil {
		var ret bool
		return ret
	}
	return *o.DataValid
}

// GetDataValidOk returns a tuple with the DataValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateProcessingFunctionTestResult) GetDataValidOk() (*bool, bool) {
	if o == nil || o.DataValid == nil {
		return nil, false
	}
	return o.DataValid, true
}

// HasDataValid returns a boolean if a field has been set.
func (o *StateProcessingFunctionTestResult) HasDataValid() bool {
	if o != nil && o.DataValid != nil {
		return true
	}

	return false
}

// SetDataValid gets a reference to the given bool and assigns it to the DataValid field.
func (o *StateProcessingFunctionTestResult) SetDataValid(v bool) {
	o.DataValid = &v
}

// GetStateFunctionResult returns the StateFunctionResult field value if set, zero value otherwise.
func (o *StateProcessingFunctionTestResult) GetStateFunctionResult() map[string]interface{} {
	if o == nil || o.StateFunctionResult == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.StateFunctionResult
}

// GetStateFunctionResultOk returns a tuple with the StateFunctionResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateProcessingFunctionTestResult) GetStateFunctionResultOk() (*map[string]interface{}, bool) {
	if o == nil || o.StateFunctionResult == nil {
		return nil, false
	}
	return o.StateFunctionResult, true
}

// HasStateFunctionResult returns a boolean if a field has been set.
func (o *StateProcessingFunctionTestResult) HasStateFunctionResult() bool {
	if o != nil && o.StateFunctionResult != nil {
		return true
	}

	return false
}

// SetStateFunctionResult gets a reference to the given map[string]interface{} and assigns it to the StateFunctionResult field.
func (o *StateProcessingFunctionTestResult) SetStateFunctionResult(v map[string]interface{}) {
	o.StateFunctionResult = &v
}

// GetStateFunctionValid returns the StateFunctionValid field value if set, zero value otherwise.
func (o *StateProcessingFunctionTestResult) GetStateFunctionValid() bool {
	if o == nil || o.StateFunctionValid == nil {
		var ret bool
		return ret
	}
	return *o.StateFunctionValid
}

// GetStateFunctionValidOk returns a tuple with the StateFunctionValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateProcessingFunctionTestResult) GetStateFunctionValidOk() (*bool, bool) {
	if o == nil || o.StateFunctionValid == nil {
		return nil, false
	}
	return o.StateFunctionValid, true
}

// HasStateFunctionValid returns a boolean if a field has been set.
func (o *StateProcessingFunctionTestResult) HasStateFunctionValid() bool {
	if o != nil && o.StateFunctionValid != nil {
		return true
	}

	return false
}

// SetStateFunctionValid gets a reference to the given bool and assigns it to the StateFunctionValid field.
func (o *StateProcessingFunctionTestResult) SetStateFunctionValid(v bool) {
	o.StateFunctionValid = &v
}

func (o StateProcessingFunctionTestResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataValid != nil {
		toSerialize["dataValid"] = o.DataValid
	}
	if o.StateFunctionResult != nil {
		toSerialize["stateFunctionResult"] = o.StateFunctionResult
	}
	if o.StateFunctionValid != nil {
		toSerialize["stateFunctionValid"] = o.StateFunctionValid
	}
	return json.Marshal(toSerialize)
}

type NullableStateProcessingFunctionTestResult struct {
	value *StateProcessingFunctionTestResult
	isSet bool
}

func (v NullableStateProcessingFunctionTestResult) Get() *StateProcessingFunctionTestResult {
	return v.value
}

func (v *NullableStateProcessingFunctionTestResult) Set(val *StateProcessingFunctionTestResult) {
	v.value = val
	v.isSet = true
}

func (v NullableStateProcessingFunctionTestResult) IsSet() bool {
	return v.isSet
}

func (v *NullableStateProcessingFunctionTestResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateProcessingFunctionTestResult(val *StateProcessingFunctionTestResult) *NullableStateProcessingFunctionTestResult {
	return &NullableStateProcessingFunctionTestResult{value: val, isSet: true}
}

func (v NullableStateProcessingFunctionTestResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateProcessingFunctionTestResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


