/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// AzureEventHubsAction Action that will push the message to an Azure Event Hub instance using HTTP protocol
type AzureEventHubsAction struct {
	// A raw string or a mustache (https://mustache.github.io/mustache.5.html) template describing the webhook body. If empty, the raw event will be used.
	Content *string `json:"content,omitempty"`
	// The name of the targeted Event Hub.
	EventHubName string `json:"eventHubName"`
	// the Event Hubs namespace where is located the targeted Event Hub.
	EventHubsNamespace string `json:"eventHubsNamespace"`
	// The json path to extract from the considered message (or event), it will be taken as the root datacontext object when combined with a mustache template in content
	JsonPath *string `json:"jsonPath,omitempty"`
	// Indicate if a retry policy should be set up in case of a Event Hub delivery failure
	RetryOnFailure *bool `json:"retryOnFailure,omitempty"`
	// The shared access key (also called shared access policy).
	SharedAccessKey string `json:"sharedAccessKey"`
	// The name of the shared access key (also called shared access policy) from the targeted Event Hub.
	SharedAccessKeyName string `json:"sharedAccessKeyName"`
}

// NewAzureEventHubsAction instantiates a new AzureEventHubsAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureEventHubsAction(eventHubName string, eventHubsNamespace string, sharedAccessKey string, sharedAccessKeyName string, ) *AzureEventHubsAction {
	this := AzureEventHubsAction{}
	this.EventHubName = eventHubName
	this.EventHubsNamespace = eventHubsNamespace
	this.SharedAccessKey = sharedAccessKey
	this.SharedAccessKeyName = sharedAccessKeyName
	return &this
}

// NewAzureEventHubsActionWithDefaults instantiates a new AzureEventHubsAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureEventHubsActionWithDefaults() *AzureEventHubsAction {
	this := AzureEventHubsAction{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *AzureEventHubsAction) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureEventHubsAction) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *AzureEventHubsAction) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *AzureEventHubsAction) SetContent(v string) {
	o.Content = &v
}

// GetEventHubName returns the EventHubName field value
func (o *AzureEventHubsAction) GetEventHubName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EventHubName
}

// GetEventHubNameOk returns a tuple with the EventHubName field value
// and a boolean to check if the value has been set.
func (o *AzureEventHubsAction) GetEventHubNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventHubName, true
}

// SetEventHubName sets field value
func (o *AzureEventHubsAction) SetEventHubName(v string) {
	o.EventHubName = v
}

// GetEventHubsNamespace returns the EventHubsNamespace field value
func (o *AzureEventHubsAction) GetEventHubsNamespace() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EventHubsNamespace
}

// GetEventHubsNamespaceOk returns a tuple with the EventHubsNamespace field value
// and a boolean to check if the value has been set.
func (o *AzureEventHubsAction) GetEventHubsNamespaceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventHubsNamespace, true
}

// SetEventHubsNamespace sets field value
func (o *AzureEventHubsAction) SetEventHubsNamespace(v string) {
	o.EventHubsNamespace = v
}

// GetJsonPath returns the JsonPath field value if set, zero value otherwise.
func (o *AzureEventHubsAction) GetJsonPath() string {
	if o == nil || o.JsonPath == nil {
		var ret string
		return ret
	}
	return *o.JsonPath
}

// GetJsonPathOk returns a tuple with the JsonPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureEventHubsAction) GetJsonPathOk() (*string, bool) {
	if o == nil || o.JsonPath == nil {
		return nil, false
	}
	return o.JsonPath, true
}

// HasJsonPath returns a boolean if a field has been set.
func (o *AzureEventHubsAction) HasJsonPath() bool {
	if o != nil && o.JsonPath != nil {
		return true
	}

	return false
}

// SetJsonPath gets a reference to the given string and assigns it to the JsonPath field.
func (o *AzureEventHubsAction) SetJsonPath(v string) {
	o.JsonPath = &v
}

// GetRetryOnFailure returns the RetryOnFailure field value if set, zero value otherwise.
func (o *AzureEventHubsAction) GetRetryOnFailure() bool {
	if o == nil || o.RetryOnFailure == nil {
		var ret bool
		return ret
	}
	return *o.RetryOnFailure
}

// GetRetryOnFailureOk returns a tuple with the RetryOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureEventHubsAction) GetRetryOnFailureOk() (*bool, bool) {
	if o == nil || o.RetryOnFailure == nil {
		return nil, false
	}
	return o.RetryOnFailure, true
}

// HasRetryOnFailure returns a boolean if a field has been set.
func (o *AzureEventHubsAction) HasRetryOnFailure() bool {
	if o != nil && o.RetryOnFailure != nil {
		return true
	}

	return false
}

// SetRetryOnFailure gets a reference to the given bool and assigns it to the RetryOnFailure field.
func (o *AzureEventHubsAction) SetRetryOnFailure(v bool) {
	o.RetryOnFailure = &v
}

// GetSharedAccessKey returns the SharedAccessKey field value
func (o *AzureEventHubsAction) GetSharedAccessKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.SharedAccessKey
}

// GetSharedAccessKeyOk returns a tuple with the SharedAccessKey field value
// and a boolean to check if the value has been set.
func (o *AzureEventHubsAction) GetSharedAccessKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SharedAccessKey, true
}

// SetSharedAccessKey sets field value
func (o *AzureEventHubsAction) SetSharedAccessKey(v string) {
	o.SharedAccessKey = v
}

// GetSharedAccessKeyName returns the SharedAccessKeyName field value
func (o *AzureEventHubsAction) GetSharedAccessKeyName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.SharedAccessKeyName
}

// GetSharedAccessKeyNameOk returns a tuple with the SharedAccessKeyName field value
// and a boolean to check if the value has been set.
func (o *AzureEventHubsAction) GetSharedAccessKeyNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SharedAccessKeyName, true
}

// SetSharedAccessKeyName sets field value
func (o *AzureEventHubsAction) SetSharedAccessKeyName(v string) {
	o.SharedAccessKeyName = v
}

func (o AzureEventHubsAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if true {
		toSerialize["eventHubName"] = o.EventHubName
	}
	if true {
		toSerialize["eventHubsNamespace"] = o.EventHubsNamespace
	}
	if o.JsonPath != nil {
		toSerialize["jsonPath"] = o.JsonPath
	}
	if o.RetryOnFailure != nil {
		toSerialize["retryOnFailure"] = o.RetryOnFailure
	}
	if true {
		toSerialize["sharedAccessKey"] = o.SharedAccessKey
	}
	if true {
		toSerialize["sharedAccessKeyName"] = o.SharedAccessKeyName
	}
	return json.Marshal(toSerialize)
}

type NullableAzureEventHubsAction struct {
	value *AzureEventHubsAction
	isSet bool
}

func (v NullableAzureEventHubsAction) Get() *AzureEventHubsAction {
	return v.value
}

func (v *NullableAzureEventHubsAction) Set(val *AzureEventHubsAction) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureEventHubsAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureEventHubsAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureEventHubsAction(val *AzureEventHubsAction) *NullableAzureEventHubsAction {
	return &NullableAzureEventHubsAction{value: val, isSet: true}
}

func (v NullableAzureEventHubsAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureEventHubsAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


