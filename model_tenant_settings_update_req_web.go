/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// TenantSettingsUpdateReqWeb body of tenant settings Update Request
type TenantSettingsUpdateReqWeb struct {
	// Content of the section to set
	Settings map[string]interface{} `json:"settings"`
	// Current revision of the section, for history of value changes.
	SettingsRevision int32 `json:"settingsRevision"`
	// Version of the settings model
	SettingsVersion *string `json:"settingsVersion,omitempty"`
}

// NewTenantSettingsUpdateReqWeb instantiates a new TenantSettingsUpdateReqWeb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantSettingsUpdateReqWeb(settings map[string]interface{}, settingsRevision int32, ) *TenantSettingsUpdateReqWeb {
	this := TenantSettingsUpdateReqWeb{}
	this.Settings = settings
	this.SettingsRevision = settingsRevision
	return &this
}

// NewTenantSettingsUpdateReqWebWithDefaults instantiates a new TenantSettingsUpdateReqWeb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantSettingsUpdateReqWebWithDefaults() *TenantSettingsUpdateReqWeb {
	this := TenantSettingsUpdateReqWeb{}
	return &this
}

// GetSettings returns the Settings field value
func (o *TenantSettingsUpdateReqWeb) GetSettings() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *TenantSettingsUpdateReqWeb) GetSettingsOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *TenantSettingsUpdateReqWeb) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

// GetSettingsRevision returns the SettingsRevision field value
func (o *TenantSettingsUpdateReqWeb) GetSettingsRevision() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SettingsRevision
}

// GetSettingsRevisionOk returns a tuple with the SettingsRevision field value
// and a boolean to check if the value has been set.
func (o *TenantSettingsUpdateReqWeb) GetSettingsRevisionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SettingsRevision, true
}

// SetSettingsRevision sets field value
func (o *TenantSettingsUpdateReqWeb) SetSettingsRevision(v int32) {
	o.SettingsRevision = v
}

// GetSettingsVersion returns the SettingsVersion field value if set, zero value otherwise.
func (o *TenantSettingsUpdateReqWeb) GetSettingsVersion() string {
	if o == nil || o.SettingsVersion == nil {
		var ret string
		return ret
	}
	return *o.SettingsVersion
}

// GetSettingsVersionOk returns a tuple with the SettingsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantSettingsUpdateReqWeb) GetSettingsVersionOk() (*string, bool) {
	if o == nil || o.SettingsVersion == nil {
		return nil, false
	}
	return o.SettingsVersion, true
}

// HasSettingsVersion returns a boolean if a field has been set.
func (o *TenantSettingsUpdateReqWeb) HasSettingsVersion() bool {
	if o != nil && o.SettingsVersion != nil {
		return true
	}

	return false
}

// SetSettingsVersion gets a reference to the given string and assigns it to the SettingsVersion field.
func (o *TenantSettingsUpdateReqWeb) SetSettingsVersion(v string) {
	o.SettingsVersion = &v
}

func (o TenantSettingsUpdateReqWeb) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["settings"] = o.Settings
	}
	if true {
		toSerialize["settingsRevision"] = o.SettingsRevision
	}
	if o.SettingsVersion != nil {
		toSerialize["settingsVersion"] = o.SettingsVersion
	}
	return json.Marshal(toSerialize)
}

type NullableTenantSettingsUpdateReqWeb struct {
	value *TenantSettingsUpdateReqWeb
	isSet bool
}

func (v NullableTenantSettingsUpdateReqWeb) Get() *TenantSettingsUpdateReqWeb {
	return v.value
}

func (v *NullableTenantSettingsUpdateReqWeb) Set(val *TenantSettingsUpdateReqWeb) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantSettingsUpdateReqWeb) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantSettingsUpdateReqWeb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantSettingsUpdateReqWeb(val *TenantSettingsUpdateReqWeb) *NullableTenantSettingsUpdateReqWeb {
	return &NullableTenantSettingsUpdateReqWeb{value: val, isSet: true}
}

func (v NullableTenantSettingsUpdateReqWeb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantSettingsUpdateReqWeb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


