/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// CommandStatusFilter struct for CommandStatusFilter
type CommandStatusFilter struct {
	// list of command status devices. Null or empty to accept all status
	Status *[]string `json:"status,omitempty"`
}

// NewCommandStatusFilter instantiates a new CommandStatusFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommandStatusFilter() *CommandStatusFilter {
	this := CommandStatusFilter{}
	return &this
}

// NewCommandStatusFilterWithDefaults instantiates a new CommandStatusFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandStatusFilterWithDefaults() *CommandStatusFilter {
	this := CommandStatusFilter{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CommandStatusFilter) GetStatus() []string {
	if o == nil || o.Status == nil {
		var ret []string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandStatusFilter) GetStatusOk() (*[]string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CommandStatusFilter) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []string and assigns it to the Status field.
func (o *CommandStatusFilter) SetStatus(v []string) {
	o.Status = &v
}

func (o CommandStatusFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableCommandStatusFilter struct {
	value *CommandStatusFilter
	isSet bool
}

func (v NullableCommandStatusFilter) Get() *CommandStatusFilter {
	return v.value
}

func (v *NullableCommandStatusFilter) Set(val *CommandStatusFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandStatusFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandStatusFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandStatusFilter(val *CommandStatusFilter) *NullableCommandStatusFilter {
	return &NullableCommandStatusFilter{value: val, isSet: true}
}

func (v NullableCommandStatusFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandStatusFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


