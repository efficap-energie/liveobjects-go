/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// Device struct for Device
type Device struct {
	// Device URN
	Id string `json:"id"`
	// Human readable name
	Name *string `json:"name,omitempty"`
	// Device description
	Description *string `json:"description,omitempty"`
	// Device tags
	Tags *[]string `json:"tags,omitempty"`
	// Device properties (from device provisioning)
	Properties *map[string]string `json:"properties,omitempty"`
	Group *DeviceGroup `json:"group,omitempty"`
	// List of this device's interfaces (i.e. 'connectivity nodes')
	Interfaces *[]DeviceInterface `json:"interfaces,omitempty"`
	// Device configuration (last reported parameter values)
	Config *map[string]DeviceParameterValue `json:"config,omitempty"`
	// Device firmware versions
	Firmwares *map[string]string `json:"firmwares,omitempty"`
	// Device resource versions
	Resources *map[string]string `json:"resources,omitempty"`
	// default data streamId
	DefaultDataStreamId *string `json:"defaultDataStreamId,omitempty"`
	// Date/time when device was first registered
	Created string `json:"created"`
	// Date/time when device status has been lastly updated
	Updated *string `json:"updated,omitempty"`
	// Activity state of the device according to the activity rules set for this device
	ActivityState *string `json:"activityState,omitempty"`
}

// NewDevice instantiates a new Device object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice(id string, created string, ) *Device {
	this := Device{}
	this.Id = id
	this.Created = created
	return &this
}

// NewDeviceWithDefaults instantiates a new Device object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithDefaults() *Device {
	this := Device{}
	return &this
}

// GetId returns the Id field value
func (o *Device) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Device) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Device) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Device) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Device) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Device) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Device) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Device) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Device) SetDescription(v string) {
	o.Description = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Device) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Device) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Device) SetTags(v []string) {
	o.Tags = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Device) GetProperties() map[string]string {
	if o == nil || o.Properties == nil {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Device) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *Device) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *Device) GetGroup() DeviceGroup {
	if o == nil || o.Group == nil {
		var ret DeviceGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetGroupOk() (*DeviceGroup, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *Device) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given DeviceGroup and assigns it to the Group field.
func (o *Device) SetGroup(v DeviceGroup) {
	o.Group = &v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *Device) GetInterfaces() []DeviceInterface {
	if o == nil || o.Interfaces == nil {
		var ret []DeviceInterface
		return ret
	}
	return *o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetInterfacesOk() (*[]DeviceInterface, bool) {
	if o == nil || o.Interfaces == nil {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *Device) HasInterfaces() bool {
	if o != nil && o.Interfaces != nil {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []DeviceInterface and assigns it to the Interfaces field.
func (o *Device) SetInterfaces(v []DeviceInterface) {
	o.Interfaces = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *Device) GetConfig() map[string]DeviceParameterValue {
	if o == nil || o.Config == nil {
		var ret map[string]DeviceParameterValue
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetConfigOk() (*map[string]DeviceParameterValue, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *Device) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]DeviceParameterValue and assigns it to the Config field.
func (o *Device) SetConfig(v map[string]DeviceParameterValue) {
	o.Config = &v
}

// GetFirmwares returns the Firmwares field value if set, zero value otherwise.
func (o *Device) GetFirmwares() map[string]string {
	if o == nil || o.Firmwares == nil {
		var ret map[string]string
		return ret
	}
	return *o.Firmwares
}

// GetFirmwaresOk returns a tuple with the Firmwares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetFirmwaresOk() (*map[string]string, bool) {
	if o == nil || o.Firmwares == nil {
		return nil, false
	}
	return o.Firmwares, true
}

// HasFirmwares returns a boolean if a field has been set.
func (o *Device) HasFirmwares() bool {
	if o != nil && o.Firmwares != nil {
		return true
	}

	return false
}

// SetFirmwares gets a reference to the given map[string]string and assigns it to the Firmwares field.
func (o *Device) SetFirmwares(v map[string]string) {
	o.Firmwares = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *Device) GetResources() map[string]string {
	if o == nil || o.Resources == nil {
		var ret map[string]string
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetResourcesOk() (*map[string]string, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *Device) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given map[string]string and assigns it to the Resources field.
func (o *Device) SetResources(v map[string]string) {
	o.Resources = &v
}

// GetDefaultDataStreamId returns the DefaultDataStreamId field value if set, zero value otherwise.
func (o *Device) GetDefaultDataStreamId() string {
	if o == nil || o.DefaultDataStreamId == nil {
		var ret string
		return ret
	}
	return *o.DefaultDataStreamId
}

// GetDefaultDataStreamIdOk returns a tuple with the DefaultDataStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDefaultDataStreamIdOk() (*string, bool) {
	if o == nil || o.DefaultDataStreamId == nil {
		return nil, false
	}
	return o.DefaultDataStreamId, true
}

// HasDefaultDataStreamId returns a boolean if a field has been set.
func (o *Device) HasDefaultDataStreamId() bool {
	if o != nil && o.DefaultDataStreamId != nil {
		return true
	}

	return false
}

// SetDefaultDataStreamId gets a reference to the given string and assigns it to the DefaultDataStreamId field.
func (o *Device) SetDefaultDataStreamId(v string) {
	o.DefaultDataStreamId = &v
}

// GetCreated returns the Created field value
func (o *Device) GetCreated() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Device) GetCreatedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Device) SetCreated(v string) {
	o.Created = v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Device) GetUpdated() string {
	if o == nil || o.Updated == nil {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetUpdatedOk() (*string, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Device) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *Device) SetUpdated(v string) {
	o.Updated = &v
}

// GetActivityState returns the ActivityState field value if set, zero value otherwise.
func (o *Device) GetActivityState() string {
	if o == nil || o.ActivityState == nil {
		var ret string
		return ret
	}
	return *o.ActivityState
}

// GetActivityStateOk returns a tuple with the ActivityState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetActivityStateOk() (*string, bool) {
	if o == nil || o.ActivityState == nil {
		return nil, false
	}
	return o.ActivityState, true
}

// HasActivityState returns a boolean if a field has been set.
func (o *Device) HasActivityState() bool {
	if o != nil && o.ActivityState != nil {
		return true
	}

	return false
}

// SetActivityState gets a reference to the given string and assigns it to the ActivityState field.
func (o *Device) SetActivityState(v string) {
	o.ActivityState = &v
}

func (o Device) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.Interfaces != nil {
		toSerialize["interfaces"] = o.Interfaces
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Firmwares != nil {
		toSerialize["firmwares"] = o.Firmwares
	}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	if o.DefaultDataStreamId != nil {
		toSerialize["defaultDataStreamId"] = o.DefaultDataStreamId
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	if o.ActivityState != nil {
		toSerialize["activityState"] = o.ActivityState
	}
	return json.Marshal(toSerialize)
}

type NullableDevice struct {
	value *Device
	isSet bool
}

func (v NullableDevice) Get() *Device {
	return v.value
}

func (v *NullableDevice) Set(val *Device) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice(val *Device) *NullableDevice {
	return &NullableDevice{value: val, isSet: true}
}

func (v NullableDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


