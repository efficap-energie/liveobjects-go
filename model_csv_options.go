/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// CsvOptions struct for CsvOptions
type CsvOptions struct {
	ColumnSeparator *string `json:"columnSeparator,omitempty"`
	EscapeChar *string `json:"escapeChar,omitempty"`
	LineFeedSeparator *string `json:"lineFeedSeparator,omitempty"`
	QuoteChar *string `json:"quoteChar,omitempty"`
	SkipWhiteSpace *bool `json:"skipWhiteSpace,omitempty"`
	UseEscapeChar *bool `json:"useEscapeChar,omitempty"`
}

// NewCsvOptions instantiates a new CsvOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCsvOptions() *CsvOptions {
	this := CsvOptions{}
	return &this
}

// NewCsvOptionsWithDefaults instantiates a new CsvOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCsvOptionsWithDefaults() *CsvOptions {
	this := CsvOptions{}
	return &this
}

// GetColumnSeparator returns the ColumnSeparator field value if set, zero value otherwise.
func (o *CsvOptions) GetColumnSeparator() string {
	if o == nil || o.ColumnSeparator == nil {
		var ret string
		return ret
	}
	return *o.ColumnSeparator
}

// GetColumnSeparatorOk returns a tuple with the ColumnSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsvOptions) GetColumnSeparatorOk() (*string, bool) {
	if o == nil || o.ColumnSeparator == nil {
		return nil, false
	}
	return o.ColumnSeparator, true
}

// HasColumnSeparator returns a boolean if a field has been set.
func (o *CsvOptions) HasColumnSeparator() bool {
	if o != nil && o.ColumnSeparator != nil {
		return true
	}

	return false
}

// SetColumnSeparator gets a reference to the given string and assigns it to the ColumnSeparator field.
func (o *CsvOptions) SetColumnSeparator(v string) {
	o.ColumnSeparator = &v
}

// GetEscapeChar returns the EscapeChar field value if set, zero value otherwise.
func (o *CsvOptions) GetEscapeChar() string {
	if o == nil || o.EscapeChar == nil {
		var ret string
		return ret
	}
	return *o.EscapeChar
}

// GetEscapeCharOk returns a tuple with the EscapeChar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsvOptions) GetEscapeCharOk() (*string, bool) {
	if o == nil || o.EscapeChar == nil {
		return nil, false
	}
	return o.EscapeChar, true
}

// HasEscapeChar returns a boolean if a field has been set.
func (o *CsvOptions) HasEscapeChar() bool {
	if o != nil && o.EscapeChar != nil {
		return true
	}

	return false
}

// SetEscapeChar gets a reference to the given string and assigns it to the EscapeChar field.
func (o *CsvOptions) SetEscapeChar(v string) {
	o.EscapeChar = &v
}

// GetLineFeedSeparator returns the LineFeedSeparator field value if set, zero value otherwise.
func (o *CsvOptions) GetLineFeedSeparator() string {
	if o == nil || o.LineFeedSeparator == nil {
		var ret string
		return ret
	}
	return *o.LineFeedSeparator
}

// GetLineFeedSeparatorOk returns a tuple with the LineFeedSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsvOptions) GetLineFeedSeparatorOk() (*string, bool) {
	if o == nil || o.LineFeedSeparator == nil {
		return nil, false
	}
	return o.LineFeedSeparator, true
}

// HasLineFeedSeparator returns a boolean if a field has been set.
func (o *CsvOptions) HasLineFeedSeparator() bool {
	if o != nil && o.LineFeedSeparator != nil {
		return true
	}

	return false
}

// SetLineFeedSeparator gets a reference to the given string and assigns it to the LineFeedSeparator field.
func (o *CsvOptions) SetLineFeedSeparator(v string) {
	o.LineFeedSeparator = &v
}

// GetQuoteChar returns the QuoteChar field value if set, zero value otherwise.
func (o *CsvOptions) GetQuoteChar() string {
	if o == nil || o.QuoteChar == nil {
		var ret string
		return ret
	}
	return *o.QuoteChar
}

// GetQuoteCharOk returns a tuple with the QuoteChar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsvOptions) GetQuoteCharOk() (*string, bool) {
	if o == nil || o.QuoteChar == nil {
		return nil, false
	}
	return o.QuoteChar, true
}

// HasQuoteChar returns a boolean if a field has been set.
func (o *CsvOptions) HasQuoteChar() bool {
	if o != nil && o.QuoteChar != nil {
		return true
	}

	return false
}

// SetQuoteChar gets a reference to the given string and assigns it to the QuoteChar field.
func (o *CsvOptions) SetQuoteChar(v string) {
	o.QuoteChar = &v
}

// GetSkipWhiteSpace returns the SkipWhiteSpace field value if set, zero value otherwise.
func (o *CsvOptions) GetSkipWhiteSpace() bool {
	if o == nil || o.SkipWhiteSpace == nil {
		var ret bool
		return ret
	}
	return *o.SkipWhiteSpace
}

// GetSkipWhiteSpaceOk returns a tuple with the SkipWhiteSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsvOptions) GetSkipWhiteSpaceOk() (*bool, bool) {
	if o == nil || o.SkipWhiteSpace == nil {
		return nil, false
	}
	return o.SkipWhiteSpace, true
}

// HasSkipWhiteSpace returns a boolean if a field has been set.
func (o *CsvOptions) HasSkipWhiteSpace() bool {
	if o != nil && o.SkipWhiteSpace != nil {
		return true
	}

	return false
}

// SetSkipWhiteSpace gets a reference to the given bool and assigns it to the SkipWhiteSpace field.
func (o *CsvOptions) SetSkipWhiteSpace(v bool) {
	o.SkipWhiteSpace = &v
}

// GetUseEscapeChar returns the UseEscapeChar field value if set, zero value otherwise.
func (o *CsvOptions) GetUseEscapeChar() bool {
	if o == nil || o.UseEscapeChar == nil {
		var ret bool
		return ret
	}
	return *o.UseEscapeChar
}

// GetUseEscapeCharOk returns a tuple with the UseEscapeChar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsvOptions) GetUseEscapeCharOk() (*bool, bool) {
	if o == nil || o.UseEscapeChar == nil {
		return nil, false
	}
	return o.UseEscapeChar, true
}

// HasUseEscapeChar returns a boolean if a field has been set.
func (o *CsvOptions) HasUseEscapeChar() bool {
	if o != nil && o.UseEscapeChar != nil {
		return true
	}

	return false
}

// SetUseEscapeChar gets a reference to the given bool and assigns it to the UseEscapeChar field.
func (o *CsvOptions) SetUseEscapeChar(v bool) {
	o.UseEscapeChar = &v
}

func (o CsvOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ColumnSeparator != nil {
		toSerialize["columnSeparator"] = o.ColumnSeparator
	}
	if o.EscapeChar != nil {
		toSerialize["escapeChar"] = o.EscapeChar
	}
	if o.LineFeedSeparator != nil {
		toSerialize["lineFeedSeparator"] = o.LineFeedSeparator
	}
	if o.QuoteChar != nil {
		toSerialize["quoteChar"] = o.QuoteChar
	}
	if o.SkipWhiteSpace != nil {
		toSerialize["skipWhiteSpace"] = o.SkipWhiteSpace
	}
	if o.UseEscapeChar != nil {
		toSerialize["useEscapeChar"] = o.UseEscapeChar
	}
	return json.Marshal(toSerialize)
}

type NullableCsvOptions struct {
	value *CsvOptions
	isSet bool
}

func (v NullableCsvOptions) Get() *CsvOptions {
	return v.value
}

func (v *NullableCsvOptions) Set(val *CsvOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCsvOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCsvOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCsvOptions(val *CsvOptions) *NullableCsvOptions {
	return &NullableCsvOptions{value: val, isSet: true}
}

func (v NullableCsvOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCsvOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


