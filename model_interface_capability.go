/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// InterfaceCapability struct for InterfaceCapability
type InterfaceCapability struct {
	// Indicates whether the capability is available for the interface
	Available *bool `json:"available,omitempty"`
	// Capability version
	Version *int32 `json:"version,omitempty"`
}

// NewInterfaceCapability instantiates a new InterfaceCapability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceCapability() *InterfaceCapability {
	this := InterfaceCapability{}
	return &this
}

// NewInterfaceCapabilityWithDefaults instantiates a new InterfaceCapability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceCapabilityWithDefaults() *InterfaceCapability {
	this := InterfaceCapability{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *InterfaceCapability) GetAvailable() bool {
	if o == nil || o.Available == nil {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCapability) GetAvailableOk() (*bool, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *InterfaceCapability) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *InterfaceCapability) SetAvailable(v bool) {
	o.Available = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InterfaceCapability) GetVersion() int32 {
	if o == nil || o.Version == nil {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCapability) GetVersionOk() (*int32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InterfaceCapability) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *InterfaceCapability) SetVersion(v int32) {
	o.Version = &v
}

func (o InterfaceCapability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableInterfaceCapability struct {
	value *InterfaceCapability
	isSet bool
}

func (v NullableInterfaceCapability) Get() *InterfaceCapability {
	return v.value
}

func (v *NullableInterfaceCapability) Set(val *InterfaceCapability) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceCapability) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceCapability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceCapability(val *InterfaceCapability) *NullableInterfaceCapability {
	return &NullableInterfaceCapability{value: val, isSet: true}
}

func (v NullableInterfaceCapability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceCapability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


