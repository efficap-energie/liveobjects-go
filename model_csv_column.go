/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// CsvColumn struct for CsvColumn
type CsvColumn struct {
	JsonType string `json:"jsonType"`
	Name string `json:"name"`
}

// NewCsvColumn instantiates a new CsvColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCsvColumn(jsonType string, name string, ) *CsvColumn {
	this := CsvColumn{}
	this.JsonType = jsonType
	this.Name = name
	return &this
}

// NewCsvColumnWithDefaults instantiates a new CsvColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCsvColumnWithDefaults() *CsvColumn {
	this := CsvColumn{}
	return &this
}

// GetJsonType returns the JsonType field value
func (o *CsvColumn) GetJsonType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.JsonType
}

// GetJsonTypeOk returns a tuple with the JsonType field value
// and a boolean to check if the value has been set.
func (o *CsvColumn) GetJsonTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JsonType, true
}

// SetJsonType sets field value
func (o *CsvColumn) SetJsonType(v string) {
	o.JsonType = v
}

// GetName returns the Name field value
func (o *CsvColumn) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CsvColumn) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CsvColumn) SetName(v string) {
	o.Name = v
}

func (o CsvColumn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["jsonType"] = o.JsonType
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableCsvColumn struct {
	value *CsvColumn
	isSet bool
}

func (v NullableCsvColumn) Get() *CsvColumn {
	return v.value
}

func (v *NullableCsvColumn) Set(val *CsvColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableCsvColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableCsvColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCsvColumn(val *CsvColumn) *NullableCsvColumn {
	return &NullableCsvColumn{value: val, isSet: true}
}

func (v NullableCsvColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCsvColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


