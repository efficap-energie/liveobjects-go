/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// StateProcessingFunctionTest struct for StateProcessingFunctionTest
type StateProcessingFunctionTest struct {
	// current state that can be used by the state function
	CurrentState *map[string]interface{} `json:"currentState,omitempty"`
	Data NewData `json:"data"`
	// the state function in jsonLogic syntax
	StateProcessingFunction map[string]interface{} `json:"stateProcessingFunction"`
}

// NewStateProcessingFunctionTest instantiates a new StateProcessingFunctionTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStateProcessingFunctionTest(data NewData, stateProcessingFunction map[string]interface{}, ) *StateProcessingFunctionTest {
	this := StateProcessingFunctionTest{}
	this.Data = data
	this.StateProcessingFunction = stateProcessingFunction
	return &this
}

// NewStateProcessingFunctionTestWithDefaults instantiates a new StateProcessingFunctionTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStateProcessingFunctionTestWithDefaults() *StateProcessingFunctionTest {
	this := StateProcessingFunctionTest{}
	return &this
}

// GetCurrentState returns the CurrentState field value if set, zero value otherwise.
func (o *StateProcessingFunctionTest) GetCurrentState() map[string]interface{} {
	if o == nil || o.CurrentState == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.CurrentState
}

// GetCurrentStateOk returns a tuple with the CurrentState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateProcessingFunctionTest) GetCurrentStateOk() (*map[string]interface{}, bool) {
	if o == nil || o.CurrentState == nil {
		return nil, false
	}
	return o.CurrentState, true
}

// HasCurrentState returns a boolean if a field has been set.
func (o *StateProcessingFunctionTest) HasCurrentState() bool {
	if o != nil && o.CurrentState != nil {
		return true
	}

	return false
}

// SetCurrentState gets a reference to the given map[string]interface{} and assigns it to the CurrentState field.
func (o *StateProcessingFunctionTest) SetCurrentState(v map[string]interface{}) {
	o.CurrentState = &v
}

// GetData returns the Data field value
func (o *StateProcessingFunctionTest) GetData() NewData {
	if o == nil  {
		var ret NewData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *StateProcessingFunctionTest) GetDataOk() (*NewData, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *StateProcessingFunctionTest) SetData(v NewData) {
	o.Data = v
}

// GetStateProcessingFunction returns the StateProcessingFunction field value
func (o *StateProcessingFunctionTest) GetStateProcessingFunction() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.StateProcessingFunction
}

// GetStateProcessingFunctionOk returns a tuple with the StateProcessingFunction field value
// and a boolean to check if the value has been set.
func (o *StateProcessingFunctionTest) GetStateProcessingFunctionOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StateProcessingFunction, true
}

// SetStateProcessingFunction sets field value
func (o *StateProcessingFunctionTest) SetStateProcessingFunction(v map[string]interface{}) {
	o.StateProcessingFunction = v
}

func (o StateProcessingFunctionTest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentState != nil {
		toSerialize["currentState"] = o.CurrentState
	}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["stateProcessingFunction"] = o.StateProcessingFunction
	}
	return json.Marshal(toSerialize)
}

type NullableStateProcessingFunctionTest struct {
	value *StateProcessingFunctionTest
	isSet bool
}

func (v NullableStateProcessingFunctionTest) Get() *StateProcessingFunctionTest {
	return v.value
}

func (v *NullableStateProcessingFunctionTest) Set(val *StateProcessingFunctionTest) {
	v.value = val
	v.isSet = true
}

func (v NullableStateProcessingFunctionTest) IsSet() bool {
	return v.isSet
}

func (v *NullableStateProcessingFunctionTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateProcessingFunctionTest(val *StateProcessingFunctionTest) *NullableStateProcessingFunctionTest {
	return &NullableStateProcessingFunctionTest{value: val, isSet: true}
}

func (v NullableStateProcessingFunctionTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateProcessingFunctionTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


