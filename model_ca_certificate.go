/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
	"time"
)

// CaCertificate struct for CaCertificate
type CaCertificate struct {
	Certificate *string `json:"certificate,omitempty"`
	Comment *string `json:"comment,omitempty"`
	Expires *time.Time `json:"expires,omitempty"`
	Id *string `json:"id,omitempty"`
}

// NewCaCertificate instantiates a new CaCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCaCertificate() *CaCertificate {
	this := CaCertificate{}
	return &this
}

// NewCaCertificateWithDefaults instantiates a new CaCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCaCertificateWithDefaults() *CaCertificate {
	this := CaCertificate{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *CaCertificate) GetCertificate() string {
	if o == nil || o.Certificate == nil {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaCertificate) GetCertificateOk() (*string, bool) {
	if o == nil || o.Certificate == nil {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *CaCertificate) HasCertificate() bool {
	if o != nil && o.Certificate != nil {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *CaCertificate) SetCertificate(v string) {
	o.Certificate = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CaCertificate) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaCertificate) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CaCertificate) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *CaCertificate) SetComment(v string) {
	o.Comment = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *CaCertificate) GetExpires() time.Time {
	if o == nil || o.Expires == nil {
		var ret time.Time
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaCertificate) GetExpiresOk() (*time.Time, bool) {
	if o == nil || o.Expires == nil {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *CaCertificate) HasExpires() bool {
	if o != nil && o.Expires != nil {
		return true
	}

	return false
}

// SetExpires gets a reference to the given time.Time and assigns it to the Expires field.
func (o *CaCertificate) SetExpires(v time.Time) {
	o.Expires = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CaCertificate) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CaCertificate) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CaCertificate) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CaCertificate) SetId(v string) {
	o.Id = &v
}

func (o CaCertificate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Certificate != nil {
		toSerialize["certificate"] = o.Certificate
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Expires != nil {
		toSerialize["expires"] = o.Expires
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableCaCertificate struct {
	value *CaCertificate
	isSet bool
}

func (v NullableCaCertificate) Get() *CaCertificate {
	return v.value
}

func (v *NullableCaCertificate) Set(val *CaCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableCaCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableCaCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCaCertificate(val *CaCertificate) *NullableCaCertificate {
	return &NullableCaCertificate{value: val, isSet: true}
}

func (v NullableCaCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCaCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


