/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ApiKey struct for ApiKey
type ApiKey struct {
	// identifier of real tenant in case of identity usurpation
	ActingTenantId *string `json:"actingTenantId,omitempty"`
	// identifier of real user in case of identity usurpation
	ActingUserId *string `json:"actingUserId,omitempty"`
	// Switch to activate/deactivate the API Key
	Active *bool `json:"active,omitempty"`
	ClientCert *ClientCertificatesConfiguration `json:"clientCert,omitempty"`
	// Date/time of creation (in ms)
	CreationTs *int64 `json:"creationTs,omitempty"`
	// Timestamp indicating the end date for the debug mode
	DebugModeEndTs *int64 `json:"debugModeEndTs,omitempty"`
	// Short description of the key
	Description *string `json:"description,omitempty"`
	Expired *bool `json:"expired,omitempty"`
	// Date/time of start of validity (in ms)
	From *int64 `json:"from,omitempty"`
	// API key unique identifier, randomly generated at creation
	Id *string `json:"id,omitempty"`
	// Title of the key
	Label *string `json:"label,omitempty"`
	// Date/time of last activity (in ms)
	LastActivity *int64 `json:"lastActivity,omitempty"`
	MasterKey *bool `json:"masterKey,omitempty"`
	// Nonce
	Nonce *string `json:"nonce,omitempty"`
	// identifier of the parent API key, can be null if API key is a master API key
	ParentId *string `json:"parentId,omitempty"`
	RateLimit *RateLimit `json:"rateLimit,omitempty"`
	// list of API key associated roles.
	Roles []string `json:"roles"`
	Scope *ScopeApplication `json:"scope,omitempty"`
	SessionKey *bool `json:"sessionKey,omitempty"`
	// Duration of validity since the last activity (in ms)
	SessionTTL *int64 `json:"sessionTTL,omitempty"`
	// identifier of tenant account this API key belongs to
	TenantId *string `json:"tenantId,omitempty"`
	//  Date/time of end of validity (in ms)
	To *int64 `json:"to,omitempty"`
	// identifier of the user account this API key belongs to (or null if not a user session API key)
	UserId *string `json:"userId,omitempty"`
	UsurpedKey *bool `json:"usurpedKey,omitempty"`
	// API key value (= the secret!)
	Value *string `json:"value,omitempty"`
}

// NewApiKey instantiates a new ApiKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiKey(roles []string, ) *ApiKey {
	this := ApiKey{}
	this.Roles = roles
	return &this
}

// NewApiKeyWithDefaults instantiates a new ApiKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiKeyWithDefaults() *ApiKey {
	this := ApiKey{}
	return &this
}

// GetActingTenantId returns the ActingTenantId field value if set, zero value otherwise.
func (o *ApiKey) GetActingTenantId() string {
	if o == nil || o.ActingTenantId == nil {
		var ret string
		return ret
	}
	return *o.ActingTenantId
}

// GetActingTenantIdOk returns a tuple with the ActingTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetActingTenantIdOk() (*string, bool) {
	if o == nil || o.ActingTenantId == nil {
		return nil, false
	}
	return o.ActingTenantId, true
}

// HasActingTenantId returns a boolean if a field has been set.
func (o *ApiKey) HasActingTenantId() bool {
	if o != nil && o.ActingTenantId != nil {
		return true
	}

	return false
}

// SetActingTenantId gets a reference to the given string and assigns it to the ActingTenantId field.
func (o *ApiKey) SetActingTenantId(v string) {
	o.ActingTenantId = &v
}

// GetActingUserId returns the ActingUserId field value if set, zero value otherwise.
func (o *ApiKey) GetActingUserId() string {
	if o == nil || o.ActingUserId == nil {
		var ret string
		return ret
	}
	return *o.ActingUserId
}

// GetActingUserIdOk returns a tuple with the ActingUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetActingUserIdOk() (*string, bool) {
	if o == nil || o.ActingUserId == nil {
		return nil, false
	}
	return o.ActingUserId, true
}

// HasActingUserId returns a boolean if a field has been set.
func (o *ApiKey) HasActingUserId() bool {
	if o != nil && o.ActingUserId != nil {
		return true
	}

	return false
}

// SetActingUserId gets a reference to the given string and assigns it to the ActingUserId field.
func (o *ApiKey) SetActingUserId(v string) {
	o.ActingUserId = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ApiKey) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ApiKey) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ApiKey) SetActive(v bool) {
	o.Active = &v
}

// GetClientCert returns the ClientCert field value if set, zero value otherwise.
func (o *ApiKey) GetClientCert() ClientCertificatesConfiguration {
	if o == nil || o.ClientCert == nil {
		var ret ClientCertificatesConfiguration
		return ret
	}
	return *o.ClientCert
}

// GetClientCertOk returns a tuple with the ClientCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetClientCertOk() (*ClientCertificatesConfiguration, bool) {
	if o == nil || o.ClientCert == nil {
		return nil, false
	}
	return o.ClientCert, true
}

// HasClientCert returns a boolean if a field has been set.
func (o *ApiKey) HasClientCert() bool {
	if o != nil && o.ClientCert != nil {
		return true
	}

	return false
}

// SetClientCert gets a reference to the given ClientCertificatesConfiguration and assigns it to the ClientCert field.
func (o *ApiKey) SetClientCert(v ClientCertificatesConfiguration) {
	o.ClientCert = &v
}

// GetCreationTs returns the CreationTs field value if set, zero value otherwise.
func (o *ApiKey) GetCreationTs() int64 {
	if o == nil || o.CreationTs == nil {
		var ret int64
		return ret
	}
	return *o.CreationTs
}

// GetCreationTsOk returns a tuple with the CreationTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetCreationTsOk() (*int64, bool) {
	if o == nil || o.CreationTs == nil {
		return nil, false
	}
	return o.CreationTs, true
}

// HasCreationTs returns a boolean if a field has been set.
func (o *ApiKey) HasCreationTs() bool {
	if o != nil && o.CreationTs != nil {
		return true
	}

	return false
}

// SetCreationTs gets a reference to the given int64 and assigns it to the CreationTs field.
func (o *ApiKey) SetCreationTs(v int64) {
	o.CreationTs = &v
}

// GetDebugModeEndTs returns the DebugModeEndTs field value if set, zero value otherwise.
func (o *ApiKey) GetDebugModeEndTs() int64 {
	if o == nil || o.DebugModeEndTs == nil {
		var ret int64
		return ret
	}
	return *o.DebugModeEndTs
}

// GetDebugModeEndTsOk returns a tuple with the DebugModeEndTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetDebugModeEndTsOk() (*int64, bool) {
	if o == nil || o.DebugModeEndTs == nil {
		return nil, false
	}
	return o.DebugModeEndTs, true
}

// HasDebugModeEndTs returns a boolean if a field has been set.
func (o *ApiKey) HasDebugModeEndTs() bool {
	if o != nil && o.DebugModeEndTs != nil {
		return true
	}

	return false
}

// SetDebugModeEndTs gets a reference to the given int64 and assigns it to the DebugModeEndTs field.
func (o *ApiKey) SetDebugModeEndTs(v int64) {
	o.DebugModeEndTs = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApiKey) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApiKey) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApiKey) SetDescription(v string) {
	o.Description = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *ApiKey) GetExpired() bool {
	if o == nil || o.Expired == nil {
		var ret bool
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetExpiredOk() (*bool, bool) {
	if o == nil || o.Expired == nil {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *ApiKey) HasExpired() bool {
	if o != nil && o.Expired != nil {
		return true
	}

	return false
}

// SetExpired gets a reference to the given bool and assigns it to the Expired field.
func (o *ApiKey) SetExpired(v bool) {
	o.Expired = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ApiKey) GetFrom() int64 {
	if o == nil || o.From == nil {
		var ret int64
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetFromOk() (*int64, bool) {
	if o == nil || o.From == nil {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ApiKey) HasFrom() bool {
	if o != nil && o.From != nil {
		return true
	}

	return false
}

// SetFrom gets a reference to the given int64 and assigns it to the From field.
func (o *ApiKey) SetFrom(v int64) {
	o.From = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiKey) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiKey) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiKey) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ApiKey) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ApiKey) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ApiKey) SetLabel(v string) {
	o.Label = &v
}

// GetLastActivity returns the LastActivity field value if set, zero value otherwise.
func (o *ApiKey) GetLastActivity() int64 {
	if o == nil || o.LastActivity == nil {
		var ret int64
		return ret
	}
	return *o.LastActivity
}

// GetLastActivityOk returns a tuple with the LastActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetLastActivityOk() (*int64, bool) {
	if o == nil || o.LastActivity == nil {
		return nil, false
	}
	return o.LastActivity, true
}

// HasLastActivity returns a boolean if a field has been set.
func (o *ApiKey) HasLastActivity() bool {
	if o != nil && o.LastActivity != nil {
		return true
	}

	return false
}

// SetLastActivity gets a reference to the given int64 and assigns it to the LastActivity field.
func (o *ApiKey) SetLastActivity(v int64) {
	o.LastActivity = &v
}

// GetMasterKey returns the MasterKey field value if set, zero value otherwise.
func (o *ApiKey) GetMasterKey() bool {
	if o == nil || o.MasterKey == nil {
		var ret bool
		return ret
	}
	return *o.MasterKey
}

// GetMasterKeyOk returns a tuple with the MasterKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetMasterKeyOk() (*bool, bool) {
	if o == nil || o.MasterKey == nil {
		return nil, false
	}
	return o.MasterKey, true
}

// HasMasterKey returns a boolean if a field has been set.
func (o *ApiKey) HasMasterKey() bool {
	if o != nil && o.MasterKey != nil {
		return true
	}

	return false
}

// SetMasterKey gets a reference to the given bool and assigns it to the MasterKey field.
func (o *ApiKey) SetMasterKey(v bool) {
	o.MasterKey = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *ApiKey) GetNonce() string {
	if o == nil || o.Nonce == nil {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetNonceOk() (*string, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *ApiKey) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *ApiKey) SetNonce(v string) {
	o.Nonce = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *ApiKey) GetParentId() string {
	if o == nil || o.ParentId == nil {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetParentIdOk() (*string, bool) {
	if o == nil || o.ParentId == nil {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *ApiKey) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *ApiKey) SetParentId(v string) {
	o.ParentId = &v
}

// GetRateLimit returns the RateLimit field value if set, zero value otherwise.
func (o *ApiKey) GetRateLimit() RateLimit {
	if o == nil || o.RateLimit == nil {
		var ret RateLimit
		return ret
	}
	return *o.RateLimit
}

// GetRateLimitOk returns a tuple with the RateLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetRateLimitOk() (*RateLimit, bool) {
	if o == nil || o.RateLimit == nil {
		return nil, false
	}
	return o.RateLimit, true
}

// HasRateLimit returns a boolean if a field has been set.
func (o *ApiKey) HasRateLimit() bool {
	if o != nil && o.RateLimit != nil {
		return true
	}

	return false
}

// SetRateLimit gets a reference to the given RateLimit and assigns it to the RateLimit field.
func (o *ApiKey) SetRateLimit(v RateLimit) {
	o.RateLimit = &v
}

// GetRoles returns the Roles field value
func (o *ApiKey) GetRoles() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *ApiKey) GetRolesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Roles, true
}

// SetRoles sets field value
func (o *ApiKey) SetRoles(v []string) {
	o.Roles = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ApiKey) GetScope() ScopeApplication {
	if o == nil || o.Scope == nil {
		var ret ScopeApplication
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetScopeOk() (*ScopeApplication, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *ApiKey) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given ScopeApplication and assigns it to the Scope field.
func (o *ApiKey) SetScope(v ScopeApplication) {
	o.Scope = &v
}

// GetSessionKey returns the SessionKey field value if set, zero value otherwise.
func (o *ApiKey) GetSessionKey() bool {
	if o == nil || o.SessionKey == nil {
		var ret bool
		return ret
	}
	return *o.SessionKey
}

// GetSessionKeyOk returns a tuple with the SessionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetSessionKeyOk() (*bool, bool) {
	if o == nil || o.SessionKey == nil {
		return nil, false
	}
	return o.SessionKey, true
}

// HasSessionKey returns a boolean if a field has been set.
func (o *ApiKey) HasSessionKey() bool {
	if o != nil && o.SessionKey != nil {
		return true
	}

	return false
}

// SetSessionKey gets a reference to the given bool and assigns it to the SessionKey field.
func (o *ApiKey) SetSessionKey(v bool) {
	o.SessionKey = &v
}

// GetSessionTTL returns the SessionTTL field value if set, zero value otherwise.
func (o *ApiKey) GetSessionTTL() int64 {
	if o == nil || o.SessionTTL == nil {
		var ret int64
		return ret
	}
	return *o.SessionTTL
}

// GetSessionTTLOk returns a tuple with the SessionTTL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetSessionTTLOk() (*int64, bool) {
	if o == nil || o.SessionTTL == nil {
		return nil, false
	}
	return o.SessionTTL, true
}

// HasSessionTTL returns a boolean if a field has been set.
func (o *ApiKey) HasSessionTTL() bool {
	if o != nil && o.SessionTTL != nil {
		return true
	}

	return false
}

// SetSessionTTL gets a reference to the given int64 and assigns it to the SessionTTL field.
func (o *ApiKey) SetSessionTTL(v int64) {
	o.SessionTTL = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *ApiKey) GetTenantId() string {
	if o == nil || o.TenantId == nil {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetTenantIdOk() (*string, bool) {
	if o == nil || o.TenantId == nil {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *ApiKey) HasTenantId() bool {
	if o != nil && o.TenantId != nil {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *ApiKey) SetTenantId(v string) {
	o.TenantId = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ApiKey) GetTo() int64 {
	if o == nil || o.To == nil {
		var ret int64
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetToOk() (*int64, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ApiKey) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given int64 and assigns it to the To field.
func (o *ApiKey) SetTo(v int64) {
	o.To = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ApiKey) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ApiKey) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ApiKey) SetUserId(v string) {
	o.UserId = &v
}

// GetUsurpedKey returns the UsurpedKey field value if set, zero value otherwise.
func (o *ApiKey) GetUsurpedKey() bool {
	if o == nil || o.UsurpedKey == nil {
		var ret bool
		return ret
	}
	return *o.UsurpedKey
}

// GetUsurpedKeyOk returns a tuple with the UsurpedKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetUsurpedKeyOk() (*bool, bool) {
	if o == nil || o.UsurpedKey == nil {
		return nil, false
	}
	return o.UsurpedKey, true
}

// HasUsurpedKey returns a boolean if a field has been set.
func (o *ApiKey) HasUsurpedKey() bool {
	if o != nil && o.UsurpedKey != nil {
		return true
	}

	return false
}

// SetUsurpedKey gets a reference to the given bool and assigns it to the UsurpedKey field.
func (o *ApiKey) SetUsurpedKey(v bool) {
	o.UsurpedKey = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ApiKey) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKey) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ApiKey) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ApiKey) SetValue(v string) {
	o.Value = &v
}

func (o ApiKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActingTenantId != nil {
		toSerialize["actingTenantId"] = o.ActingTenantId
	}
	if o.ActingUserId != nil {
		toSerialize["actingUserId"] = o.ActingUserId
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.ClientCert != nil {
		toSerialize["clientCert"] = o.ClientCert
	}
	if o.CreationTs != nil {
		toSerialize["creationTs"] = o.CreationTs
	}
	if o.DebugModeEndTs != nil {
		toSerialize["debugModeEndTs"] = o.DebugModeEndTs
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Expired != nil {
		toSerialize["expired"] = o.Expired
	}
	if o.From != nil {
		toSerialize["from"] = o.From
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.LastActivity != nil {
		toSerialize["lastActivity"] = o.LastActivity
	}
	if o.MasterKey != nil {
		toSerialize["masterKey"] = o.MasterKey
	}
	if o.Nonce != nil {
		toSerialize["nonce"] = o.Nonce
	}
	if o.ParentId != nil {
		toSerialize["parentId"] = o.ParentId
	}
	if o.RateLimit != nil {
		toSerialize["rateLimit"] = o.RateLimit
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.SessionKey != nil {
		toSerialize["sessionKey"] = o.SessionKey
	}
	if o.SessionTTL != nil {
		toSerialize["sessionTTL"] = o.SessionTTL
	}
	if o.TenantId != nil {
		toSerialize["tenantId"] = o.TenantId
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.UsurpedKey != nil {
		toSerialize["usurpedKey"] = o.UsurpedKey
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableApiKey struct {
	value *ApiKey
	isSet bool
}

func (v NullableApiKey) Get() *ApiKey {
	return v.value
}

func (v *NullableApiKey) Set(val *ApiKey) {
	v.value = val
	v.isSet = true
}

func (v NullableApiKey) IsSet() bool {
	return v.isSet
}

func (v *NullableApiKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiKey(val *ApiKey) *NullableApiKey {
	return &NullableApiKey{value: val, isSet: true}
}

func (v NullableApiKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


