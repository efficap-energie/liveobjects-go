/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApi service
type DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService service

type ApiCreateBusinessSettingsUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService
	xAPIKEY *string
	request *SMSConnectorBusinessSettingsCreationReqWeb
}

func (r ApiCreateBusinessSettingsUsingPOSTRequest) XAPIKEY(xAPIKEY string) ApiCreateBusinessSettingsUsingPOSTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiCreateBusinessSettingsUsingPOSTRequest) Request(request SMSConnectorBusinessSettingsCreationReqWeb) ApiCreateBusinessSettingsUsingPOSTRequest {
	r.request = &request
	return r
}

func (r ApiCreateBusinessSettingsUsingPOSTRequest) Execute() (ConnectorStatusResponse, *_nethttp.Response, error) {
	return r.ApiService.CreateBusinessSettingsUsingPOSTExecute(r)
}

/*
 * CreateBusinessSettingsUsingPOST Create a new business settings of SMS Connector (use Device management - Interfaces - V1 instead)
 * Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateBusinessSettingsUsingPOSTRequest
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) CreateBusinessSettingsUsingPOST(ctx _context.Context) ApiCreateBusinessSettingsUsingPOSTRequest {
	return ApiCreateBusinessSettingsUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ConnectorStatusResponse
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) CreateBusinessSettingsUsingPOSTExecute(r ApiCreateBusinessSettingsUsingPOSTRequest) (ConnectorStatusResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectorStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService.CreateBusinessSettingsUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/sms-connector/settings/business"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteBusinessSettingsByMsiSDNUsingDELETERequest struct {
	ctx _context.Context
	ApiService *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService
	xAPIKEY *string
	request *SMSConnectorBusinessSettingsDeleteMsisdnReqWeb
}

func (r ApiDeleteBusinessSettingsByMsiSDNUsingDELETERequest) XAPIKEY(xAPIKEY string) ApiDeleteBusinessSettingsByMsiSDNUsingDELETERequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiDeleteBusinessSettingsByMsiSDNUsingDELETERequest) Request(request SMSConnectorBusinessSettingsDeleteMsisdnReqWeb) ApiDeleteBusinessSettingsByMsiSDNUsingDELETERequest {
	r.request = &request
	return r
}

func (r ApiDeleteBusinessSettingsByMsiSDNUsingDELETERequest) Execute() (ConnectorStatusResponse, *_nethttp.Response, error) {
	return r.ApiService.DeleteBusinessSettingsByMsiSDNUsingDELETEExecute(r)
}

/*
 * DeleteBusinessSettingsByMsiSDNUsingDELETE Delete msisdn in business settings of SMS Connector
 * Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiDeleteBusinessSettingsByMsiSDNUsingDELETERequest
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) DeleteBusinessSettingsByMsiSDNUsingDELETE(ctx _context.Context) ApiDeleteBusinessSettingsByMsiSDNUsingDELETERequest {
	return ApiDeleteBusinessSettingsByMsiSDNUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ConnectorStatusResponse
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) DeleteBusinessSettingsByMsiSDNUsingDELETEExecute(r ApiDeleteBusinessSettingsByMsiSDNUsingDELETERequest) (ConnectorStatusResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectorStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService.DeleteBusinessSettingsByMsiSDNUsingDELETE")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/sms-connector/settings/business/msisdn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteBusinessSettingsForOneMsiSDNUsingDELETERequest struct {
	ctx _context.Context
	ApiService *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService
	serverPhoneNumber string
	msisdnNumber string
	xAPIKEY *string
}

func (r ApiDeleteBusinessSettingsForOneMsiSDNUsingDELETERequest) XAPIKEY(xAPIKEY string) ApiDeleteBusinessSettingsForOneMsiSDNUsingDELETERequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiDeleteBusinessSettingsForOneMsiSDNUsingDELETERequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteBusinessSettingsForOneMsiSDNUsingDELETEExecute(r)
}

/*
 * DeleteBusinessSettingsForOneMsiSDNUsingDELETE Delete one msisdn in business settings of SMS Connector
 * Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param serverPhoneNumber server phone number ex: \"20259\", // Must be defined in OfferSettings
 * @param msisdnNumber msisdn number ex: \"0606060606\"
 * @return ApiDeleteBusinessSettingsForOneMsiSDNUsingDELETERequest
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) DeleteBusinessSettingsForOneMsiSDNUsingDELETE(ctx _context.Context, serverPhoneNumber string, msisdnNumber string) ApiDeleteBusinessSettingsForOneMsiSDNUsingDELETERequest {
	return ApiDeleteBusinessSettingsForOneMsiSDNUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		serverPhoneNumber: serverPhoneNumber,
		msisdnNumber: msisdnNumber,
	}
}

/*
 * Execute executes the request
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) DeleteBusinessSettingsForOneMsiSDNUsingDELETEExecute(r ApiDeleteBusinessSettingsForOneMsiSDNUsingDELETERequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService.DeleteBusinessSettingsForOneMsiSDNUsingDELETE")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/sms-connector/settings/business/{serverPhoneNumber}/msisdn/{msisdnNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverPhoneNumber"+"}", _neturl.PathEscape(parameterToString(r.serverPhoneNumber, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"msisdnNumber"+"}", _neturl.PathEscape(parameterToString(r.msisdnNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetBusinessSettingsUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService
	serverPhoneNumber *string
	xAPIKEY *string
	decoderName *string
}

func (r ApiGetBusinessSettingsUsingGETRequest) ServerPhoneNumber(serverPhoneNumber string) ApiGetBusinessSettingsUsingGETRequest {
	r.serverPhoneNumber = &serverPhoneNumber
	return r
}
func (r ApiGetBusinessSettingsUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetBusinessSettingsUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiGetBusinessSettingsUsingGETRequest) DecoderName(decoderName string) ApiGetBusinessSettingsUsingGETRequest {
	r.decoderName = &decoderName
	return r
}

func (r ApiGetBusinessSettingsUsingGETRequest) Execute() (BusinessSettings, *_nethttp.Response, error) {
	return r.ApiService.GetBusinessSettingsUsingGETExecute(r)
}

/*
 * GetBusinessSettingsUsingGET Get a business settings of SMS Connector
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetBusinessSettingsUsingGETRequest
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) GetBusinessSettingsUsingGET(ctx _context.Context) ApiGetBusinessSettingsUsingGETRequest {
	return ApiGetBusinessSettingsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return BusinessSettings
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) GetBusinessSettingsUsingGETExecute(r ApiGetBusinessSettingsUsingGETRequest) (BusinessSettings, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BusinessSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService.GetBusinessSettingsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/sms-connector/settings/business"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.serverPhoneNumber == nil {
		return localVarReturnValue, nil, reportError("serverPhoneNumber is required and must be specified")
	}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	localVarQueryParams.Add("serverPhoneNumber", parameterToString(*r.serverPhoneNumber, ""))
	if r.decoderName != nil {
		localVarQueryParams.Add("decoderName", parameterToString(*r.decoderName, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMsisdnUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService
	serverPhoneNumber *string
	xAPIKEY *string
	decoderName *string
	size *int32
	page *int32
}

func (r ApiListMsisdnUsingGETRequest) ServerPhoneNumber(serverPhoneNumber string) ApiListMsisdnUsingGETRequest {
	r.serverPhoneNumber = &serverPhoneNumber
	return r
}
func (r ApiListMsisdnUsingGETRequest) XAPIKEY(xAPIKEY string) ApiListMsisdnUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiListMsisdnUsingGETRequest) DecoderName(decoderName string) ApiListMsisdnUsingGETRequest {
	r.decoderName = &decoderName
	return r
}
func (r ApiListMsisdnUsingGETRequest) Size(size int32) ApiListMsisdnUsingGETRequest {
	r.size = &size
	return r
}
func (r ApiListMsisdnUsingGETRequest) Page(page int32) ApiListMsisdnUsingGETRequest {
	r.page = &page
	return r
}

func (r ApiListMsisdnUsingGETRequest) Execute() (SMSConnectorMsisdnPageWeb, *_nethttp.Response, error) {
	return r.ApiService.ListMsisdnUsingGETExecute(r)
}

/*
 * ListMsisdnUsingGET List msisdn of business settings of SMS Connector
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListMsisdnUsingGETRequest
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) ListMsisdnUsingGET(ctx _context.Context) ApiListMsisdnUsingGETRequest {
	return ApiListMsisdnUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return SMSConnectorMsisdnPageWeb
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) ListMsisdnUsingGETExecute(r ApiListMsisdnUsingGETRequest) (SMSConnectorMsisdnPageWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SMSConnectorMsisdnPageWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService.ListMsisdnUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/sms-connector/settings/business/msisdn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.serverPhoneNumber == nil {
		return localVarReturnValue, nil, reportError("serverPhoneNumber is required and must be specified")
	}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	localVarQueryParams.Add("serverPhoneNumber", parameterToString(*r.serverPhoneNumber, ""))
	if r.decoderName != nil {
		localVarQueryParams.Add("decoderName", parameterToString(*r.decoderName, ""))
	}
	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSettingsUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService
	xAPIKEY *string
	size *int32
	page *int32
}

func (r ApiListSettingsUsingGETRequest) XAPIKEY(xAPIKEY string) ApiListSettingsUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiListSettingsUsingGETRequest) Size(size int32) ApiListSettingsUsingGETRequest {
	r.size = &size
	return r
}
func (r ApiListSettingsUsingGETRequest) Page(page int32) ApiListSettingsUsingGETRequest {
	r.page = &page
	return r
}

func (r ApiListSettingsUsingGETRequest) Execute() (SMSConnectorBusinessSettingsPageWeb, *_nethttp.Response, error) {
	return r.ApiService.ListSettingsUsingGETExecute(r)
}

/*
 * ListSettingsUsingGET List all the business settings of the SMSConnector for a tenant
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListSettingsUsingGETRequest
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) ListSettingsUsingGET(ctx _context.Context) ApiListSettingsUsingGETRequest {
	return ApiListSettingsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return SMSConnectorBusinessSettingsPageWeb
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) ListSettingsUsingGETExecute(r ApiListSettingsUsingGETRequest) (SMSConnectorBusinessSettingsPageWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SMSConnectorBusinessSettingsPageWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService.ListSettingsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/sms-connector/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateBusinessSettingsUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService
	serverPhoneNumber string
	xAPIKEY *string
	request *SMSConnectorBusinessSettingsUpdateReqWeb
}

func (r ApiUpdateBusinessSettingsUsingPOSTRequest) XAPIKEY(xAPIKEY string) ApiUpdateBusinessSettingsUsingPOSTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiUpdateBusinessSettingsUsingPOSTRequest) Request(request SMSConnectorBusinessSettingsUpdateReqWeb) ApiUpdateBusinessSettingsUsingPOSTRequest {
	r.request = &request
	return r
}

func (r ApiUpdateBusinessSettingsUsingPOSTRequest) Execute() (ConnectorStatusResponse, *_nethttp.Response, error) {
	return r.ApiService.UpdateBusinessSettingsUsingPOSTExecute(r)
}

/*
 * UpdateBusinessSettingsUsingPOST Update business settings of the SMSConnector
 * Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param serverPhoneNumber server phone number ex: \"20259\", // Must be defined in OfferSettings
 * @return ApiUpdateBusinessSettingsUsingPOSTRequest
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) UpdateBusinessSettingsUsingPOST(ctx _context.Context, serverPhoneNumber string) ApiUpdateBusinessSettingsUsingPOSTRequest {
	return ApiUpdateBusinessSettingsUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
		serverPhoneNumber: serverPhoneNumber,
	}
}

/*
 * Execute executes the request
 * @return ConnectorStatusResponse
 */
func (a *DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService) UpdateBusinessSettingsUsingPOSTExecute(r ApiUpdateBusinessSettingsUsingPOSTRequest) (ConnectorStatusResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectorStatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedSMSConnectorBusinessSettingsUseDeviceManagementConnectorNodesV1InsteadApiService.UpdateBusinessSettingsUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/sms-connector/settings/business/{serverPhoneNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverPhoneNumber"+"}", _neturl.PathEscape(parameterToString(r.serverPhoneNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
