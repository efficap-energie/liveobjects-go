/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// MatchingContext hold the Matching context : data, MatchingRule and timestamp of the match
type MatchingContext struct {
	Data NewData `json:"data"`
	MatchingRule MatchingRule `json:"matchingRule"`
	TenantId *string `json:"tenantId,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// NewMatchingContext instantiates a new MatchingContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchingContext(data NewData, matchingRule MatchingRule, ) *MatchingContext {
	this := MatchingContext{}
	this.Data = data
	this.MatchingRule = matchingRule
	return &this
}

// NewMatchingContextWithDefaults instantiates a new MatchingContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchingContextWithDefaults() *MatchingContext {
	this := MatchingContext{}
	return &this
}

// GetData returns the Data field value
func (o *MatchingContext) GetData() NewData {
	if o == nil  {
		var ret NewData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *MatchingContext) GetDataOk() (*NewData, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *MatchingContext) SetData(v NewData) {
	o.Data = v
}

// GetMatchingRule returns the MatchingRule field value
func (o *MatchingContext) GetMatchingRule() MatchingRule {
	if o == nil  {
		var ret MatchingRule
		return ret
	}

	return o.MatchingRule
}

// GetMatchingRuleOk returns a tuple with the MatchingRule field value
// and a boolean to check if the value has been set.
func (o *MatchingContext) GetMatchingRuleOk() (*MatchingRule, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MatchingRule, true
}

// SetMatchingRule sets field value
func (o *MatchingContext) SetMatchingRule(v MatchingRule) {
	o.MatchingRule = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *MatchingContext) GetTenantId() string {
	if o == nil || o.TenantId == nil {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchingContext) GetTenantIdOk() (*string, bool) {
	if o == nil || o.TenantId == nil {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *MatchingContext) HasTenantId() bool {
	if o != nil && o.TenantId != nil {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *MatchingContext) SetTenantId(v string) {
	o.TenantId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *MatchingContext) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchingContext) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MatchingContext) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *MatchingContext) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o MatchingContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["matchingRule"] = o.MatchingRule
	}
	if o.TenantId != nil {
		toSerialize["tenantId"] = o.TenantId
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableMatchingContext struct {
	value *MatchingContext
	isSet bool
}

func (v NullableMatchingContext) Get() *MatchingContext {
	return v.value
}

func (v *NullableMatchingContext) Set(val *MatchingContext) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchingContext) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchingContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchingContext(val *MatchingContext) *NullableMatchingContext {
	return &NullableMatchingContext{value: val, isSet: true}
}

func (v NullableMatchingContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchingContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


