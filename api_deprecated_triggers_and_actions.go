/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeprecatedTriggersAndActionsApiService DeprecatedTriggersAndActionsApi service
type DeprecatedTriggersAndActionsApiService service

type ApiCreateUsingPOST1Request struct {
	ctx _context.Context
	ApiService *DeprecatedTriggersAndActionsApiService
	xAPIKEY *string
	actionPolicy *ActionPolicyV0
}

func (r ApiCreateUsingPOST1Request) XAPIKEY(xAPIKEY string) ApiCreateUsingPOST1Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiCreateUsingPOST1Request) ActionPolicy(actionPolicy ActionPolicyV0) ApiCreateUsingPOST1Request {
	r.actionPolicy = &actionPolicy
	return r
}

func (r ApiCreateUsingPOST1Request) Execute() (ActionPolicyV0, *_nethttp.Response, error) {
	return r.ApiService.CreateUsingPOST1Execute(r)
}

/*
 * CreateUsingPOST1 Create an ActionPolicy
 * The field `id` must not be provided, it will be automatically generated by the service as an UUID.<br><br>Usage of this API will be reported in your access log under 'routing' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateUsingPOST1Request
 */
func (a *DeprecatedTriggersAndActionsApiService) CreateUsingPOST1(ctx _context.Context) ApiCreateUsingPOST1Request {
	return ApiCreateUsingPOST1Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ActionPolicyV0
 */
func (a *DeprecatedTriggersAndActionsApiService) CreateUsingPOST1Execute(r ApiCreateUsingPOST1Request) (ActionPolicyV0, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ActionPolicyV0
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedTriggersAndActionsApiService.CreateUsingPOST1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/event2action/actionPolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.actionPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUsingDELETE12Request struct {
	ctx _context.Context
	ApiService *DeprecatedTriggersAndActionsApiService
	policyId string
	xAPIKEY *string
}

func (r ApiDeleteUsingDELETE12Request) XAPIKEY(xAPIKEY string) ApiDeleteUsingDELETE12Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiDeleteUsingDELETE12Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteUsingDELETE12Execute(r)
}

/*
 * DeleteUsingDELETE12 Delete an ActionPolicy
 * Usage of this API will be reported in your access log under 'routing' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param policyId id of the action to delete
 * @return ApiDeleteUsingDELETE12Request
 */
func (a *DeprecatedTriggersAndActionsApiService) DeleteUsingDELETE12(ctx _context.Context, policyId string) ApiDeleteUsingDELETE12Request {
	return ApiDeleteUsingDELETE12Request{
		ApiService: a,
		ctx: ctx,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 */
func (a *DeprecatedTriggersAndActionsApiService) DeleteUsingDELETE12Execute(r ApiDeleteUsingDELETE12Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedTriggersAndActionsApiService.DeleteUsingDELETE12")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/event2action/actionPolicies/{policyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListUsingGET14Request struct {
	ctx _context.Context
	ApiService *DeprecatedTriggersAndActionsApiService
	xAPIKEY *string
	triggerType *string
	size *int32
	page *int32
}

func (r ApiListUsingGET14Request) XAPIKEY(xAPIKEY string) ApiListUsingGET14Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiListUsingGET14Request) TriggerType(triggerType string) ApiListUsingGET14Request {
	r.triggerType = &triggerType
	return r
}
func (r ApiListUsingGET14Request) Size(size int32) ApiListUsingGET14Request {
	r.size = &size
	return r
}
func (r ApiListUsingGET14Request) Page(page int32) ApiListUsingGET14Request {
	r.page = &page
	return r
}

func (r ApiListUsingGET14Request) Execute() (PageableActionPolicyV0, *_nethttp.Response, error) {
	return r.ApiService.ListUsingGET14Execute(r)
}

/*
 * ListUsingGET14 List ActionPolicies
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListUsingGET14Request
 */
func (a *DeprecatedTriggersAndActionsApiService) ListUsingGET14(ctx _context.Context) ApiListUsingGET14Request {
	return ApiListUsingGET14Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PageableActionPolicyV0
 */
func (a *DeprecatedTriggersAndActionsApiService) ListUsingGET14Execute(r ApiListUsingGET14Request) (PageableActionPolicyV0, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageableActionPolicyV0
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedTriggersAndActionsApiService.ListUsingGET14")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/event2action/actionPolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.triggerType != nil {
		localVarQueryParams.Add("triggerType", parameterToString(*r.triggerType, ""))
	}
	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveUsingGET1Request struct {
	ctx _context.Context
	ApiService *DeprecatedTriggersAndActionsApiService
	policyId string
	xAPIKEY *string
}

func (r ApiRetrieveUsingGET1Request) XAPIKEY(xAPIKEY string) ApiRetrieveUsingGET1Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiRetrieveUsingGET1Request) Execute() (ActionPolicyV0, *_nethttp.Response, error) {
	return r.ApiService.RetrieveUsingGET1Execute(r)
}

/*
 * RetrieveUsingGET1 Retrieve an ActionPolicy
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param policyId id of the action to retrieve
 * @return ApiRetrieveUsingGET1Request
 */
func (a *DeprecatedTriggersAndActionsApiService) RetrieveUsingGET1(ctx _context.Context, policyId string) ApiRetrieveUsingGET1Request {
	return ApiRetrieveUsingGET1Request{
		ApiService: a,
		ctx: ctx,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 * @return ActionPolicyV0
 */
func (a *DeprecatedTriggersAndActionsApiService) RetrieveUsingGET1Execute(r ApiRetrieveUsingGET1Request) (ActionPolicyV0, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ActionPolicyV0
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedTriggersAndActionsApiService.RetrieveUsingGET1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/event2action/actionPolicies/{policyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpsertUsingPUTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedTriggersAndActionsApiService
	policyId string
	xAPIKEY *string
	actionPolicy *ActionPolicyV0
}

func (r ApiUpsertUsingPUTRequest) XAPIKEY(xAPIKEY string) ApiUpsertUsingPUTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiUpsertUsingPUTRequest) ActionPolicy(actionPolicy ActionPolicyV0) ApiUpsertUsingPUTRequest {
	r.actionPolicy = &actionPolicy
	return r
}

func (r ApiUpsertUsingPUTRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UpsertUsingPUTExecute(r)
}

/*
 * UpsertUsingPUT Create or update an ActionPolicy
 * The `id` field is mandatory in the path but is optional in the payload. In a case where an `id` is specified in the payload it must match the `id` specified in the path. Otherwise an HTTP 400 will be issued.<br><br>Usage of this API will be reported in your access log under 'routing' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param policyId id of the action to save
 * @return ApiUpsertUsingPUTRequest
 */
func (a *DeprecatedTriggersAndActionsApiService) UpsertUsingPUT(ctx _context.Context, policyId string) ApiUpsertUsingPUTRequest {
	return ApiUpsertUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 */
func (a *DeprecatedTriggersAndActionsApiService) UpsertUsingPUTExecute(r ApiUpsertUsingPUTRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedTriggersAndActionsApiService.UpsertUsingPUT")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/event2action/actionPolicies/{policyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.actionPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
