/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// DataBulkItemWeb Unitary data item in a bulk.
type DataBulkItemWeb struct {
	Location *Location `json:"location,omitempty"`
	Metadata *Metadata `json:"metadata,omitempty"`
	// Model of the injected data. Data with the same model must have coherent types in each value fields. This field is required to perform an advanced search on the data. Can not contains space or dot characters.
	Model *string `json:"model,omitempty"`
	// StreamId in which the data will be added. Should not contains following character or space : ' \\ \" ; { } ( )
	StreamId *string `json:"streamId,omitempty"`
	// Easy way to 'tag' the data in order to ease up advanced search through all streams and models
	Tags *[]string `json:"tags,omitempty"`
	// ISO 8601 date time
	Timestamp *string `json:"timestamp,omitempty"`
	// Must be a JsonObject (primitive objects like string or int are not allowed). It can not contain field names starting with '$' character or containing dot '.' character and its size should not exceed 1 MiB. To use decoding capability, 'value.payload' field must be use to set encoded content as String (in case of binary content, HexBinary String representation of this content)
	Value map[string]interface{} `json:"value"`
}

// NewDataBulkItemWeb instantiates a new DataBulkItemWeb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataBulkItemWeb(value map[string]interface{}, ) *DataBulkItemWeb {
	this := DataBulkItemWeb{}
	this.Value = value
	return &this
}

// NewDataBulkItemWebWithDefaults instantiates a new DataBulkItemWeb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataBulkItemWebWithDefaults() *DataBulkItemWeb {
	this := DataBulkItemWeb{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *DataBulkItemWeb) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataBulkItemWeb) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *DataBulkItemWeb) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *DataBulkItemWeb) SetLocation(v Location) {
	o.Location = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DataBulkItemWeb) GetMetadata() Metadata {
	if o == nil || o.Metadata == nil {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataBulkItemWeb) GetMetadataOk() (*Metadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DataBulkItemWeb) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *DataBulkItemWeb) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *DataBulkItemWeb) GetModel() string {
	if o == nil || o.Model == nil {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataBulkItemWeb) GetModelOk() (*string, bool) {
	if o == nil || o.Model == nil {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *DataBulkItemWeb) HasModel() bool {
	if o != nil && o.Model != nil {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *DataBulkItemWeb) SetModel(v string) {
	o.Model = &v
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *DataBulkItemWeb) GetStreamId() string {
	if o == nil || o.StreamId == nil {
		var ret string
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataBulkItemWeb) GetStreamIdOk() (*string, bool) {
	if o == nil || o.StreamId == nil {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *DataBulkItemWeb) HasStreamId() bool {
	if o != nil && o.StreamId != nil {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given string and assigns it to the StreamId field.
func (o *DataBulkItemWeb) SetStreamId(v string) {
	o.StreamId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DataBulkItemWeb) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataBulkItemWeb) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DataBulkItemWeb) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DataBulkItemWeb) SetTags(v []string) {
	o.Tags = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *DataBulkItemWeb) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataBulkItemWeb) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *DataBulkItemWeb) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *DataBulkItemWeb) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetValue returns the Value field value
func (o *DataBulkItemWeb) GetValue() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DataBulkItemWeb) GetValueOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DataBulkItemWeb) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o DataBulkItemWeb) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Model != nil {
		toSerialize["model"] = o.Model
	}
	if o.StreamId != nil {
		toSerialize["streamId"] = o.StreamId
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableDataBulkItemWeb struct {
	value *DataBulkItemWeb
	isSet bool
}

func (v NullableDataBulkItemWeb) Get() *DataBulkItemWeb {
	return v.value
}

func (v *NullableDataBulkItemWeb) Set(val *DataBulkItemWeb) {
	v.value = val
	v.isSet = true
}

func (v NullableDataBulkItemWeb) IsSet() bool {
	return v.isSet
}

func (v *NullableDataBulkItemWeb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataBulkItemWeb(val *DataBulkItemWeb) *NullableDataBulkItemWeb {
	return &NullableDataBulkItemWeb{value: val, isSet: true}
}

func (v NullableDataBulkItemWeb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataBulkItemWeb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


