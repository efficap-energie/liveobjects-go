/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApi service
type DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService service

type ApiCreateAssetUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService
	xAPIKEY *string
	body *AssetCreateReqWeb
}

func (r ApiCreateAssetUsingPOSTRequest) XAPIKEY(xAPIKEY string) ApiCreateAssetUsingPOSTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiCreateAssetUsingPOSTRequest) Body(body AssetCreateReqWeb) ApiCreateAssetUsingPOSTRequest {
	r.body = &body
	return r
}

func (r ApiCreateAssetUsingPOSTRequest) Execute() (Asset, *_nethttp.Response, error) {
	return r.ApiService.CreateAssetUsingPOSTExecute(r)
}

/*
 * CreateAssetUsingPOST Create a device
 * Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateAssetUsingPOSTRequest
 */
func (a *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService) CreateAssetUsingPOST(ctx _context.Context) ApiCreateAssetUsingPOSTRequest {
	return ApiCreateAssetUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Asset
 */
func (a *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService) CreateAssetUsingPOSTExecute(r ApiCreateAssetUsingPOSTRequest) (Asset, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Asset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService.CreateAssetUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/assets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDeviceStatusUsingDELETERequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService
	assetNamespace string
	assetId string
	xAPIKEY *string
}

func (r ApiDeleteDeviceStatusUsingDELETERequest) XAPIKEY(xAPIKEY string) ApiDeleteDeviceStatusUsingDELETERequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiDeleteDeviceStatusUsingDELETERequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteDeviceStatusUsingDELETEExecute(r)
}

/*
 * DeleteDeviceStatusUsingDELETE Delete a device
 * Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetNamespace targeted for deletion asset namespace. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId targeted for deletion asset identifier. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @return ApiDeleteDeviceStatusUsingDELETERequest
 */
func (a *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService) DeleteDeviceStatusUsingDELETE(ctx _context.Context, assetNamespace string, assetId string) ApiDeleteDeviceStatusUsingDELETERequest {
	return ApiDeleteDeviceStatusUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		assetNamespace: assetNamespace,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 */
func (a *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService) DeleteDeviceStatusUsingDELETEExecute(r ApiDeleteDeviceStatusUsingDELETERequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService.DeleteDeviceStatusUsingDELETE")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/assets/{assetNamespace}/{assetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"assetNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAssetStatusUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService
	assetNamespace string
	assetId string
	xAPIKEY *string
}

func (r ApiGetAssetStatusUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetAssetStatusUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetAssetStatusUsingGETRequest) Execute() (Asset, *_nethttp.Response, error) {
	return r.ApiService.GetAssetStatusUsingGETExecute(r)
}

/*
 * GetAssetStatusUsingGET Get a device status
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetNamespace requested asset namespace. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId requested asset identifier. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @return ApiGetAssetStatusUsingGETRequest
 */
func (a *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService) GetAssetStatusUsingGET(ctx _context.Context, assetNamespace string, assetId string) ApiGetAssetStatusUsingGETRequest {
	return ApiGetAssetStatusUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		assetNamespace: assetNamespace,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 * @return Asset
 */
func (a *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService) GetAssetStatusUsingGETExecute(r ApiGetAssetStatusUsingGETRequest) (Asset, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Asset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService.GetAssetStatusUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/assets/{assetNamespace}/{assetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"assetNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAssetNamespacesUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService
	xAPIKEY *string
}

func (r ApiListAssetNamespacesUsingGETRequest) XAPIKEY(xAPIKEY string) ApiListAssetNamespacesUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiListAssetNamespacesUsingGETRequest) Execute() ([]string, *_nethttp.Response, error) {
	return r.ApiService.ListAssetNamespacesUsingGETExecute(r)
}

/*
 * ListAssetNamespacesUsingGET Enumerates the used asset namespaces
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListAssetNamespacesUsingGETRequest
 */
func (a *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService) ListAssetNamespacesUsingGET(ctx _context.Context) ApiListAssetNamespacesUsingGETRequest {
	return ApiListAssetNamespacesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []string
 */
func (a *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService) ListAssetNamespacesUsingGETExecute(r ApiListAssetNamespacesUsingGETRequest) ([]string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService.ListAssetNamespacesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/inventory/namespaces"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAssetsUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService
	xAPIKEY *string
	size *int64
	page *int64
	sort *[]string
	namespace *string
	groupPath *string
	groupId *string
	id *string
	connected *bool
	name *string
	tags *[]string
	propertyFilterName *string
}

func (r ApiListAssetsUsingGETRequest) XAPIKEY(xAPIKEY string) ApiListAssetsUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiListAssetsUsingGETRequest) Size(size int64) ApiListAssetsUsingGETRequest {
	r.size = &size
	return r
}
func (r ApiListAssetsUsingGETRequest) Page(page int64) ApiListAssetsUsingGETRequest {
	r.page = &page
	return r
}
func (r ApiListAssetsUsingGETRequest) Sort(sort []string) ApiListAssetsUsingGETRequest {
	r.sort = &sort
	return r
}
func (r ApiListAssetsUsingGETRequest) Namespace(namespace string) ApiListAssetsUsingGETRequest {
	r.namespace = &namespace
	return r
}
func (r ApiListAssetsUsingGETRequest) GroupPath(groupPath string) ApiListAssetsUsingGETRequest {
	r.groupPath = &groupPath
	return r
}
func (r ApiListAssetsUsingGETRequest) GroupId(groupId string) ApiListAssetsUsingGETRequest {
	r.groupId = &groupId
	return r
}
func (r ApiListAssetsUsingGETRequest) Id(id string) ApiListAssetsUsingGETRequest {
	r.id = &id
	return r
}
func (r ApiListAssetsUsingGETRequest) Connected(connected bool) ApiListAssetsUsingGETRequest {
	r.connected = &connected
	return r
}
func (r ApiListAssetsUsingGETRequest) Name(name string) ApiListAssetsUsingGETRequest {
	r.name = &name
	return r
}
func (r ApiListAssetsUsingGETRequest) Tags(tags []string) ApiListAssetsUsingGETRequest {
	r.tags = &tags
	return r
}
func (r ApiListAssetsUsingGETRequest) PropertyFilterName(propertyFilterName string) ApiListAssetsUsingGETRequest {
	r.propertyFilterName = &propertyFilterName
	return r
}

func (r ApiListAssetsUsingGETRequest) Execute() (PageableAsset, *_nethttp.Response, error) {
	return r.ApiService.ListAssetsUsingGETExecute(r)
}

/*
 * ListAssetsUsingGET List registered assets status
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListAssetsUsingGETRequest
 */
func (a *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService) ListAssetsUsingGET(ctx _context.Context) ApiListAssetsUsingGETRequest {
	return ApiListAssetsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PageableAsset
 */
func (a *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService) ListAssetsUsingGETExecute(r ApiListAssetsUsingGETRequest) (PageableAsset, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageableAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService.ListAssetsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/assets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("sort", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("sort", parameterToString(t, "multi"))
		}
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.groupPath != nil {
		localVarQueryParams.Add("groupPath", parameterToString(*r.groupPath, ""))
	}
	if r.groupId != nil {
		localVarQueryParams.Add("groupId", parameterToString(*r.groupId, ""))
	}
	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.connected != nil {
		localVarQueryParams.Add("connected", parameterToString(*r.connected, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	if r.propertyFilterName != nil {
		localVarQueryParams.Add("property.{filterName}", parameterToString(*r.propertyFilterName, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAssetUsingPUTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService
	assetNamespace string
	assetId string
	xAPIKEY *string
	body *AssetUpdateReqWeb
}

func (r ApiUpdateAssetUsingPUTRequest) XAPIKEY(xAPIKEY string) ApiUpdateAssetUsingPUTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiUpdateAssetUsingPUTRequest) Body(body AssetUpdateReqWeb) ApiUpdateAssetUsingPUTRequest {
	r.body = &body
	return r
}

func (r ApiUpdateAssetUsingPUTRequest) Execute() (Asset, *_nethttp.Response, error) {
	return r.ApiService.UpdateAssetUsingPUTExecute(r)
}

/*
 * UpdateAssetUsingPUT Update a device
 * Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetNamespace namespace targeted to update assets. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId asset identifier to update. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @return ApiUpdateAssetUsingPUTRequest
 */
func (a *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService) UpdateAssetUsingPUT(ctx _context.Context, assetNamespace string, assetId string) ApiUpdateAssetUsingPUTRequest {
	return ApiUpdateAssetUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		assetNamespace: assetNamespace,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 * @return Asset
 */
func (a *DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService) UpdateAssetUsingPUTExecute(r ApiUpdateAssetUsingPUTRequest) (Asset, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Asset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementInventoryV0UseDeviceManagementInventoryV1InsteadApiService.UpdateAssetUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/assets/{assetNamespace}/{assetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"assetNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
