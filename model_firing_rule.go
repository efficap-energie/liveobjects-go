/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// FiringRule defines if and how the matched data from MatchingRules will fire an event. You can restrict it for instance to trigger maximum 1 event per hour, or only once until you use the FiringGuard API to re-allow it. Associated to aggregationKeys, it will apply the firing type (eg 1 per hour) based on the value of these keys (eg 'streamId').
type FiringRule struct {
	// the list of jsonPath in the Data that will define on which group of data this FiringRule should be set. For instance 'streamId', 'metadata.source', 'value.type'.
	AggregationKeys *[]string `json:"aggregationKeys,omitempty"`
	// activate or not the FiringRule. Default is false.
	Enabled *bool `json:"enabled,omitempty"`
	// define the type of firing mechanism : ONCE, SLEEP, or ALWAYS
	FiringType string `json:"firingType"`
	// id of the FiringRule. Should be null when used for POST.
	Id *string `json:"id,omitempty"`
	// the list of MatchingRule ids that will be handeld by this FiringRule.
	MatchingRuleIds *[]string `json:"matchingRuleIds,omitempty"`
	// name of the FiringRule. Must be unique.
	Name string `json:"name"`
	// sleep duration of the FiringRule. Is defined as a ISO-8601 Period string, restricted to days, hours, minutes and seconds. 1 day will always be equivalent to 24H, regardless of daylight saving time. eg. : 'P1D', 'PT30M'. Must be set only for 'SLEEP' FiringType.
	SleepDuration *string `json:"sleepDuration,omitempty"`
}

// NewFiringRule instantiates a new FiringRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiringRule(firingType string, name string, ) *FiringRule {
	this := FiringRule{}
	this.FiringType = firingType
	this.Name = name
	return &this
}

// NewFiringRuleWithDefaults instantiates a new FiringRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiringRuleWithDefaults() *FiringRule {
	this := FiringRule{}
	return &this
}

// GetAggregationKeys returns the AggregationKeys field value if set, zero value otherwise.
func (o *FiringRule) GetAggregationKeys() []string {
	if o == nil || o.AggregationKeys == nil {
		var ret []string
		return ret
	}
	return *o.AggregationKeys
}

// GetAggregationKeysOk returns a tuple with the AggregationKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiringRule) GetAggregationKeysOk() (*[]string, bool) {
	if o == nil || o.AggregationKeys == nil {
		return nil, false
	}
	return o.AggregationKeys, true
}

// HasAggregationKeys returns a boolean if a field has been set.
func (o *FiringRule) HasAggregationKeys() bool {
	if o != nil && o.AggregationKeys != nil {
		return true
	}

	return false
}

// SetAggregationKeys gets a reference to the given []string and assigns it to the AggregationKeys field.
func (o *FiringRule) SetAggregationKeys(v []string) {
	o.AggregationKeys = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FiringRule) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiringRule) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FiringRule) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FiringRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFiringType returns the FiringType field value
func (o *FiringRule) GetFiringType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.FiringType
}

// GetFiringTypeOk returns a tuple with the FiringType field value
// and a boolean to check if the value has been set.
func (o *FiringRule) GetFiringTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FiringType, true
}

// SetFiringType sets field value
func (o *FiringRule) SetFiringType(v string) {
	o.FiringType = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FiringRule) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiringRule) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FiringRule) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FiringRule) SetId(v string) {
	o.Id = &v
}

// GetMatchingRuleIds returns the MatchingRuleIds field value if set, zero value otherwise.
func (o *FiringRule) GetMatchingRuleIds() []string {
	if o == nil || o.MatchingRuleIds == nil {
		var ret []string
		return ret
	}
	return *o.MatchingRuleIds
}

// GetMatchingRuleIdsOk returns a tuple with the MatchingRuleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiringRule) GetMatchingRuleIdsOk() (*[]string, bool) {
	if o == nil || o.MatchingRuleIds == nil {
		return nil, false
	}
	return o.MatchingRuleIds, true
}

// HasMatchingRuleIds returns a boolean if a field has been set.
func (o *FiringRule) HasMatchingRuleIds() bool {
	if o != nil && o.MatchingRuleIds != nil {
		return true
	}

	return false
}

// SetMatchingRuleIds gets a reference to the given []string and assigns it to the MatchingRuleIds field.
func (o *FiringRule) SetMatchingRuleIds(v []string) {
	o.MatchingRuleIds = &v
}

// GetName returns the Name field value
func (o *FiringRule) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FiringRule) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FiringRule) SetName(v string) {
	o.Name = v
}

// GetSleepDuration returns the SleepDuration field value if set, zero value otherwise.
func (o *FiringRule) GetSleepDuration() string {
	if o == nil || o.SleepDuration == nil {
		var ret string
		return ret
	}
	return *o.SleepDuration
}

// GetSleepDurationOk returns a tuple with the SleepDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiringRule) GetSleepDurationOk() (*string, bool) {
	if o == nil || o.SleepDuration == nil {
		return nil, false
	}
	return o.SleepDuration, true
}

// HasSleepDuration returns a boolean if a field has been set.
func (o *FiringRule) HasSleepDuration() bool {
	if o != nil && o.SleepDuration != nil {
		return true
	}

	return false
}

// SetSleepDuration gets a reference to the given string and assigns it to the SleepDuration field.
func (o *FiringRule) SetSleepDuration(v string) {
	o.SleepDuration = &v
}

func (o FiringRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AggregationKeys != nil {
		toSerialize["aggregationKeys"] = o.AggregationKeys
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["firingType"] = o.FiringType
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.MatchingRuleIds != nil {
		toSerialize["matchingRuleIds"] = o.MatchingRuleIds
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.SleepDuration != nil {
		toSerialize["sleepDuration"] = o.SleepDuration
	}
	return json.Marshal(toSerialize)
}

type NullableFiringRule struct {
	value *FiringRule
	isSet bool
}

func (v NullableFiringRule) Get() *FiringRule {
	return v.value
}

func (v *NullableFiringRule) Set(val *FiringRule) {
	v.value = val
	v.isSet = true
}

func (v NullableFiringRule) IsSet() bool {
	return v.isSet
}

func (v *NullableFiringRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiringRule(val *FiringRule) *NullableFiringRule {
	return &NullableFiringRule{value: val, isSet: true}
}

func (v NullableFiringRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiringRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


