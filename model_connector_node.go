/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ConnectorNode Full details about a connector node (=device interface)
type ConnectorNode struct {
	// Connector ID
	Connector *string `json:"connector,omitempty"`
	// Connector node ID
	NodeId *string `json:"nodeId,omitempty"`
	// Device identifier (URN)
	DeviceId *string `json:"deviceId,omitempty"`
	// Indicates whether the interface is enabled
	Enabled *bool `json:"enabled,omitempty"`
	// Interface status
	Status *string `json:"status,omitempty"`
	// Base definition
	Definition *map[string]interface{} `json:"definition,omitempty"`
	// Last contact date
	LastContact *string `json:"lastContact,omitempty"`
	// Interface activity
	Activity *map[string]interface{} `json:"activity,omitempty"`
	// Date/time of the device creation
	Created *string `json:"created,omitempty"`
	// Date/time of the device update
	Updated *string `json:"updated,omitempty"`
}

// NewConnectorNode instantiates a new ConnectorNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorNode() *ConnectorNode {
	this := ConnectorNode{}
	return &this
}

// NewConnectorNodeWithDefaults instantiates a new ConnectorNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorNodeWithDefaults() *ConnectorNode {
	this := ConnectorNode{}
	return &this
}

// GetConnector returns the Connector field value if set, zero value otherwise.
func (o *ConnectorNode) GetConnector() string {
	if o == nil || o.Connector == nil {
		var ret string
		return ret
	}
	return *o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNode) GetConnectorOk() (*string, bool) {
	if o == nil || o.Connector == nil {
		return nil, false
	}
	return o.Connector, true
}

// HasConnector returns a boolean if a field has been set.
func (o *ConnectorNode) HasConnector() bool {
	if o != nil && o.Connector != nil {
		return true
	}

	return false
}

// SetConnector gets a reference to the given string and assigns it to the Connector field.
func (o *ConnectorNode) SetConnector(v string) {
	o.Connector = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *ConnectorNode) GetNodeId() string {
	if o == nil || o.NodeId == nil {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNode) GetNodeIdOk() (*string, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *ConnectorNode) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *ConnectorNode) SetNodeId(v string) {
	o.NodeId = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *ConnectorNode) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNode) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *ConnectorNode) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *ConnectorNode) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ConnectorNode) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNode) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ConnectorNode) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ConnectorNode) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConnectorNode) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNode) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConnectorNode) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConnectorNode) SetStatus(v string) {
	o.Status = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *ConnectorNode) GetDefinition() map[string]interface{} {
	if o == nil || o.Definition == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNode) GetDefinitionOk() (*map[string]interface{}, bool) {
	if o == nil || o.Definition == nil {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *ConnectorNode) HasDefinition() bool {
	if o != nil && o.Definition != nil {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given map[string]interface{} and assigns it to the Definition field.
func (o *ConnectorNode) SetDefinition(v map[string]interface{}) {
	o.Definition = &v
}

// GetLastContact returns the LastContact field value if set, zero value otherwise.
func (o *ConnectorNode) GetLastContact() string {
	if o == nil || o.LastContact == nil {
		var ret string
		return ret
	}
	return *o.LastContact
}

// GetLastContactOk returns a tuple with the LastContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNode) GetLastContactOk() (*string, bool) {
	if o == nil || o.LastContact == nil {
		return nil, false
	}
	return o.LastContact, true
}

// HasLastContact returns a boolean if a field has been set.
func (o *ConnectorNode) HasLastContact() bool {
	if o != nil && o.LastContact != nil {
		return true
	}

	return false
}

// SetLastContact gets a reference to the given string and assigns it to the LastContact field.
func (o *ConnectorNode) SetLastContact(v string) {
	o.LastContact = &v
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *ConnectorNode) GetActivity() map[string]interface{} {
	if o == nil || o.Activity == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNode) GetActivityOk() (*map[string]interface{}, bool) {
	if o == nil || o.Activity == nil {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *ConnectorNode) HasActivity() bool {
	if o != nil && o.Activity != nil {
		return true
	}

	return false
}

// SetActivity gets a reference to the given map[string]interface{} and assigns it to the Activity field.
func (o *ConnectorNode) SetActivity(v map[string]interface{}) {
	o.Activity = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ConnectorNode) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNode) GetCreatedOk() (*string, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ConnectorNode) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ConnectorNode) SetCreated(v string) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ConnectorNode) GetUpdated() string {
	if o == nil || o.Updated == nil {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNode) GetUpdatedOk() (*string, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ConnectorNode) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *ConnectorNode) SetUpdated(v string) {
	o.Updated = &v
}

func (o ConnectorNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Connector != nil {
		toSerialize["connector"] = o.Connector
	}
	if o.NodeId != nil {
		toSerialize["nodeId"] = o.NodeId
	}
	if o.DeviceId != nil {
		toSerialize["deviceId"] = o.DeviceId
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Definition != nil {
		toSerialize["definition"] = o.Definition
	}
	if o.LastContact != nil {
		toSerialize["lastContact"] = o.LastContact
	}
	if o.Activity != nil {
		toSerialize["activity"] = o.Activity
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorNode struct {
	value *ConnectorNode
	isSet bool
}

func (v NullableConnectorNode) Get() *ConnectorNode {
	return v.value
}

func (v *NullableConnectorNode) Set(val *ConnectorNode) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorNode) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorNode(val *ConnectorNode) *NullableConnectorNode {
	return &NullableConnectorNode{value: val, isSet: true}
}

func (v NullableConnectorNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


