/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// SMSConnectorSettings body of sms connector business settings
type SMSConnectorSettings struct {
	// decoders use to translate messages received
	Decoders []string `json:"decoders"`
	// indicate if setting is enabled or not
	Enabled bool `json:"enabled"`
	Limits *Thresholds `json:"limits,omitempty"`
	// platform phone number use as source of message
	ServerPhoneNumber string `json:"serverPhoneNumber"`
}

// NewSMSConnectorSettings instantiates a new SMSConnectorSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMSConnectorSettings(decoders []string, enabled bool, serverPhoneNumber string, ) *SMSConnectorSettings {
	this := SMSConnectorSettings{}
	this.Decoders = decoders
	this.Enabled = enabled
	this.ServerPhoneNumber = serverPhoneNumber
	return &this
}

// NewSMSConnectorSettingsWithDefaults instantiates a new SMSConnectorSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMSConnectorSettingsWithDefaults() *SMSConnectorSettings {
	this := SMSConnectorSettings{}
	return &this
}

// GetDecoders returns the Decoders field value
func (o *SMSConnectorSettings) GetDecoders() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Decoders
}

// GetDecodersOk returns a tuple with the Decoders field value
// and a boolean to check if the value has been set.
func (o *SMSConnectorSettings) GetDecodersOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Decoders, true
}

// SetDecoders sets field value
func (o *SMSConnectorSettings) SetDecoders(v []string) {
	o.Decoders = v
}

// GetEnabled returns the Enabled field value
func (o *SMSConnectorSettings) GetEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SMSConnectorSettings) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SMSConnectorSettings) SetEnabled(v bool) {
	o.Enabled = v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *SMSConnectorSettings) GetLimits() Thresholds {
	if o == nil || o.Limits == nil {
		var ret Thresholds
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSConnectorSettings) GetLimitsOk() (*Thresholds, bool) {
	if o == nil || o.Limits == nil {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *SMSConnectorSettings) HasLimits() bool {
	if o != nil && o.Limits != nil {
		return true
	}

	return false
}

// SetLimits gets a reference to the given Thresholds and assigns it to the Limits field.
func (o *SMSConnectorSettings) SetLimits(v Thresholds) {
	o.Limits = &v
}

// GetServerPhoneNumber returns the ServerPhoneNumber field value
func (o *SMSConnectorSettings) GetServerPhoneNumber() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ServerPhoneNumber
}

// GetServerPhoneNumberOk returns a tuple with the ServerPhoneNumber field value
// and a boolean to check if the value has been set.
func (o *SMSConnectorSettings) GetServerPhoneNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ServerPhoneNumber, true
}

// SetServerPhoneNumber sets field value
func (o *SMSConnectorSettings) SetServerPhoneNumber(v string) {
	o.ServerPhoneNumber = v
}

func (o SMSConnectorSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["decoders"] = o.Decoders
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Limits != nil {
		toSerialize["limits"] = o.Limits
	}
	if true {
		toSerialize["serverPhoneNumber"] = o.ServerPhoneNumber
	}
	return json.Marshal(toSerialize)
}

type NullableSMSConnectorSettings struct {
	value *SMSConnectorSettings
	isSet bool
}

func (v NullableSMSConnectorSettings) Get() *SMSConnectorSettings {
	return v.value
}

func (v *NullableSMSConnectorSettings) Set(val *SMSConnectorSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSMSConnectorSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSMSConnectorSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMSConnectorSettings(val *SMSConnectorSettings) *NullableSMSConnectorSettings {
	return &NullableSMSConnectorSettings{value: val, isSet: true}
}

func (v NullableSMSConnectorSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMSConnectorSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


