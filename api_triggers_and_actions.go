/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// TriggersAndActionsApiService TriggersAndActionsApi service
type TriggersAndActionsApiService service

type ApiCreateUsingPOST2Request struct {
	ctx _context.Context
	ApiService *TriggersAndActionsApiService
	xAPIKEY *string
	actionPolicy *ActionPolicy
}

func (r ApiCreateUsingPOST2Request) XAPIKEY(xAPIKEY string) ApiCreateUsingPOST2Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiCreateUsingPOST2Request) ActionPolicy(actionPolicy ActionPolicy) ApiCreateUsingPOST2Request {
	r.actionPolicy = &actionPolicy
	return r
}

func (r ApiCreateUsingPOST2Request) Execute() (ActionPolicy, *_nethttp.Response, error) {
	return r.ApiService.CreateUsingPOST2Execute(r)
}

/*
 * CreateUsingPOST2 Create an ActionPolicy
 * The field `id` must not be provided, it will be automatically generated by the service as an UUID.<br/>These triggers and actions endpoints are related to the routing & alarming notification feature.<br/>Please see the dedicated sections in our developer guide for more details.<br><br>Usage of this API will be reported in your access log under 'routing' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateUsingPOST2Request
 */
func (a *TriggersAndActionsApiService) CreateUsingPOST2(ctx _context.Context) ApiCreateUsingPOST2Request {
	return ApiCreateUsingPOST2Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ActionPolicy
 */
func (a *TriggersAndActionsApiService) CreateUsingPOST2Execute(r ApiCreateUsingPOST2Request) (ActionPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ActionPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggersAndActionsApiService.CreateUsingPOST2")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/event2action/actionPolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.actionPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUsingDELETE13Request struct {
	ctx _context.Context
	ApiService *TriggersAndActionsApiService
	policyId string
	xAPIKEY *string
}

func (r ApiDeleteUsingDELETE13Request) XAPIKEY(xAPIKEY string) ApiDeleteUsingDELETE13Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiDeleteUsingDELETE13Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteUsingDELETE13Execute(r)
}

/*
 * DeleteUsingDELETE13 Delete an ActionPolicy
 * Usage of this API will be reported in your access log under 'routing' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param policyId id of the ActionPolicy to delete
 * @return ApiDeleteUsingDELETE13Request
 */
func (a *TriggersAndActionsApiService) DeleteUsingDELETE13(ctx _context.Context, policyId string) ApiDeleteUsingDELETE13Request {
	return ApiDeleteUsingDELETE13Request{
		ApiService: a,
		ctx: ctx,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 */
func (a *TriggersAndActionsApiService) DeleteUsingDELETE13Execute(r ApiDeleteUsingDELETE13Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggersAndActionsApiService.DeleteUsingDELETE13")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/event2action/actionPolicies/{policyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListUsingGET15Request struct {
	ctx _context.Context
	ApiService *TriggersAndActionsApiService
	xAPIKEY *string
	triggerType *string
}

func (r ApiListUsingGET15Request) XAPIKEY(xAPIKEY string) ApiListUsingGET15Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiListUsingGET15Request) TriggerType(triggerType string) ApiListUsingGET15Request {
	r.triggerType = &triggerType
	return r
}

func (r ApiListUsingGET15Request) Execute() ([]ActionPolicy, *_nethttp.Response, error) {
	return r.ApiService.ListUsingGET15Execute(r)
}

/*
 * ListUsingGET15 List ActionPolicies
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListUsingGET15Request
 */
func (a *TriggersAndActionsApiService) ListUsingGET15(ctx _context.Context) ApiListUsingGET15Request {
	return ApiListUsingGET15Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []ActionPolicy
 */
func (a *TriggersAndActionsApiService) ListUsingGET15Execute(r ApiListUsingGET15Request) ([]ActionPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []ActionPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggersAndActionsApiService.ListUsingGET15")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/event2action/actionPolicies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.triggerType != nil {
		localVarQueryParams.Add("triggerType", parameterToString(*r.triggerType, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveUsingGET2Request struct {
	ctx _context.Context
	ApiService *TriggersAndActionsApiService
	policyId string
	xAPIKEY *string
}

func (r ApiRetrieveUsingGET2Request) XAPIKEY(xAPIKEY string) ApiRetrieveUsingGET2Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiRetrieveUsingGET2Request) Execute() (ActionPolicy, *_nethttp.Response, error) {
	return r.ApiService.RetrieveUsingGET2Execute(r)
}

/*
 * RetrieveUsingGET2 Retrieve an ActionPolicy
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param policyId id of the ActionPolicy to retrieve
 * @return ApiRetrieveUsingGET2Request
 */
func (a *TriggersAndActionsApiService) RetrieveUsingGET2(ctx _context.Context, policyId string) ApiRetrieveUsingGET2Request {
	return ApiRetrieveUsingGET2Request{
		ApiService: a,
		ctx: ctx,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 * @return ActionPolicy
 */
func (a *TriggersAndActionsApiService) RetrieveUsingGET2Execute(r ApiRetrieveUsingGET2Request) (ActionPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ActionPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggersAndActionsApiService.RetrieveUsingGET2")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/event2action/actionPolicies/{policyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpsertUsingPUT1Request struct {
	ctx _context.Context
	ApiService *TriggersAndActionsApiService
	policyId string
	xAPIKEY *string
	actionPolicy *ActionPolicy
}

func (r ApiUpsertUsingPUT1Request) XAPIKEY(xAPIKEY string) ApiUpsertUsingPUT1Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiUpsertUsingPUT1Request) ActionPolicy(actionPolicy ActionPolicy) ApiUpsertUsingPUT1Request {
	r.actionPolicy = &actionPolicy
	return r
}

func (r ApiUpsertUsingPUT1Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UpsertUsingPUT1Execute(r)
}

/*
 * UpsertUsingPUT1 Create or update an ActionPolicy
 * The `id` field is mandatory in the path but is optional in the payload. In a case where an `id` is specified in the payload it must match the `id` specified in the path. Otherwise an HTTP 400 will be issued.<br><br>Usage of this API will be reported in your access log under 'routing' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param policyId id of the ActionPolicy to save
 * @return ApiUpsertUsingPUT1Request
 */
func (a *TriggersAndActionsApiService) UpsertUsingPUT1(ctx _context.Context, policyId string) ApiUpsertUsingPUT1Request {
	return ApiUpsertUsingPUT1Request{
		ApiService: a,
		ctx: ctx,
		policyId: policyId,
	}
}

/*
 * Execute executes the request
 */
func (a *TriggersAndActionsApiService) UpsertUsingPUT1Execute(r ApiUpsertUsingPUT1Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggersAndActionsApiService.UpsertUsingPUT1")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/event2action/actionPolicies/{policyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"policyId"+"}", _neturl.PathEscape(parameterToString(r.policyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.actionPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
