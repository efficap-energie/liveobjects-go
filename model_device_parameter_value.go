/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// DeviceParameterValue struct for DeviceParameterValue
type DeviceParameterValue struct {
	// configuration parameter value type (INT32, UINT32, FLOAT, STRING or BINARY)
	Type *string `json:"type,omitempty"`
	// configuration parameter value (number for INT32/UINT32 type, string for STRING type,float for FLOAT type, base64-encoded string for BINARY type)
	Value *map[string]interface{} `json:"value,omitempty"`
	// configuration parameter value associated date/time (ISO 8601)
	Timestamp *string `json:"timestamp,omitempty"`
}

// NewDeviceParameterValueWithDefaults instantiates a new DeviceParameterValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceParameterValueWithDefaults() *DeviceParameterValue {
	this := DeviceParameterValue{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DeviceParameterValue) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceParameterValue) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeviceParameterValue) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DeviceParameterValue) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DeviceParameterValue) GetValue() map[string]interface{} {
	if o == nil || o.Value == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceParameterValue) GetValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DeviceParameterValue) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *DeviceParameterValue) SetValue(v map[string]interface{}) {
	o.Value = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *DeviceParameterValue) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceParameterValue) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *DeviceParameterValue) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *DeviceParameterValue) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o DeviceParameterValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceParameterValue struct {
	value *DeviceParameterValue
	isSet bool
}

func (v NullableDeviceParameterValue) Get() *DeviceParameterValue {
	return v.value
}

func (v *NullableDeviceParameterValue) Set(val *DeviceParameterValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceParameterValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceParameterValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceParameterValue(val *DeviceParameterValue) *NullableDeviceParameterValue {
	return &NullableDeviceParameterValue{value: val, isSet: true}
}

func (v NullableDeviceParameterValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceParameterValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
