/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// InterfaceCapabilities Full details about an interface capabilities
type InterfaceCapabilities struct {
	Command *InterfaceCapability `json:"command,omitempty"`
	Configuration *InterfaceCapability `json:"configuration,omitempty"`
	Resource *InterfaceCapability `json:"resource,omitempty"`
}

// NewInterfaceCapabilities instantiates a new InterfaceCapabilities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceCapabilities() *InterfaceCapabilities {
	this := InterfaceCapabilities{}
	return &this
}

// NewInterfaceCapabilitiesWithDefaults instantiates a new InterfaceCapabilities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceCapabilitiesWithDefaults() *InterfaceCapabilities {
	this := InterfaceCapabilities{}
	return &this
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *InterfaceCapabilities) GetCommand() InterfaceCapability {
	if o == nil || o.Command == nil {
		var ret InterfaceCapability
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCapabilities) GetCommandOk() (*InterfaceCapability, bool) {
	if o == nil || o.Command == nil {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *InterfaceCapabilities) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given InterfaceCapability and assigns it to the Command field.
func (o *InterfaceCapabilities) SetCommand(v InterfaceCapability) {
	o.Command = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *InterfaceCapabilities) GetConfiguration() InterfaceCapability {
	if o == nil || o.Configuration == nil {
		var ret InterfaceCapability
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCapabilities) GetConfigurationOk() (*InterfaceCapability, bool) {
	if o == nil || o.Configuration == nil {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *InterfaceCapabilities) HasConfiguration() bool {
	if o != nil && o.Configuration != nil {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given InterfaceCapability and assigns it to the Configuration field.
func (o *InterfaceCapabilities) SetConfiguration(v InterfaceCapability) {
	o.Configuration = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *InterfaceCapabilities) GetResource() InterfaceCapability {
	if o == nil || o.Resource == nil {
		var ret InterfaceCapability
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceCapabilities) GetResourceOk() (*InterfaceCapability, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *InterfaceCapabilities) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given InterfaceCapability and assigns it to the Resource field.
func (o *InterfaceCapabilities) SetResource(v InterfaceCapability) {
	o.Resource = &v
}

func (o InterfaceCapabilities) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if o.Configuration != nil {
		toSerialize["configuration"] = o.Configuration
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	return json.Marshal(toSerialize)
}

type NullableInterfaceCapabilities struct {
	value *InterfaceCapabilities
	isSet bool
}

func (v NullableInterfaceCapabilities) Get() *InterfaceCapabilities {
	return v.value
}

func (v *NullableInterfaceCapabilities) Set(val *InterfaceCapabilities) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceCapabilities) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceCapabilities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceCapabilities(val *InterfaceCapabilities) *NullableInterfaceCapabilities {
	return &NullableInterfaceCapabilities{value: val, isSet: true}
}

func (v NullableInterfaceCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceCapabilities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


