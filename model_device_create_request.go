/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// DeviceCreateRequest new device to register in inventory
type DeviceCreateRequest struct {
	// device unique identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
	Id string `json:"id"`
	// human-readable device name. Expected string (max 255 characters)
	Name *string `json:"name,omitempty"`
	// human-readable device description. Expected string (max 500 characters)
	Description *string `json:"description,omitempty"`
	// default data streamId. Expected not empty string. Following character are forbidden <code>\"'\\\"\\\\;{}() \"</code> (max 255 characters)
	DefaultDataStreamId *string `json:"defaultDataStreamId,omitempty"`
	// set of tags associated with the new device. Max number of tags depends of your offer settings. Tag value max length is 32.
	Tags *[]string `json:"tags,omitempty"`
	// map of key/value string pairs detailing properties of the device. Max number of properties depends of your offer settings. A property name must not include following characters <code>$.</code> and max length is 128. Invalid property names are : 'class', '_class'. Property value max length is 256.
	Properties *map[string]string `json:"properties,omitempty"`
	// list of device network interfaces
	Interfaces *[]NewDeviceInterface `json:"interfaces,omitempty"`
	Group *DeviceGroup `json:"group,omitempty"`
}

// NewDeviceCreateRequest instantiates a new DeviceCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceCreateRequest(id string, ) *DeviceCreateRequest {
	this := DeviceCreateRequest{}
	this.Id = id
	return &this
}

// NewDeviceCreateRequestWithDefaults instantiates a new DeviceCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceCreateRequestWithDefaults() *DeviceCreateRequest {
	this := DeviceCreateRequest{}
	return &this
}

// GetId returns the Id field value
func (o *DeviceCreateRequest) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeviceCreateRequest) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeviceCreateRequest) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeviceCreateRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCreateRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeviceCreateRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeviceCreateRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DeviceCreateRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCreateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DeviceCreateRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DeviceCreateRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDefaultDataStreamId returns the DefaultDataStreamId field value if set, zero value otherwise.
func (o *DeviceCreateRequest) GetDefaultDataStreamId() string {
	if o == nil || o.DefaultDataStreamId == nil {
		var ret string
		return ret
	}
	return *o.DefaultDataStreamId
}

// GetDefaultDataStreamIdOk returns a tuple with the DefaultDataStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCreateRequest) GetDefaultDataStreamIdOk() (*string, bool) {
	if o == nil || o.DefaultDataStreamId == nil {
		return nil, false
	}
	return o.DefaultDataStreamId, true
}

// HasDefaultDataStreamId returns a boolean if a field has been set.
func (o *DeviceCreateRequest) HasDefaultDataStreamId() bool {
	if o != nil && o.DefaultDataStreamId != nil {
		return true
	}

	return false
}

// SetDefaultDataStreamId gets a reference to the given string and assigns it to the DefaultDataStreamId field.
func (o *DeviceCreateRequest) SetDefaultDataStreamId(v string) {
	o.DefaultDataStreamId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DeviceCreateRequest) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCreateRequest) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DeviceCreateRequest) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DeviceCreateRequest) SetTags(v []string) {
	o.Tags = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DeviceCreateRequest) GetProperties() map[string]string {
	if o == nil || o.Properties == nil {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCreateRequest) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DeviceCreateRequest) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *DeviceCreateRequest) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *DeviceCreateRequest) GetInterfaces() []NewDeviceInterface {
	if o == nil || o.Interfaces == nil {
		var ret []NewDeviceInterface
		return ret
	}
	return *o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCreateRequest) GetInterfacesOk() (*[]NewDeviceInterface, bool) {
	if o == nil || o.Interfaces == nil {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *DeviceCreateRequest) HasInterfaces() bool {
	if o != nil && o.Interfaces != nil {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []NewDeviceInterface and assigns it to the Interfaces field.
func (o *DeviceCreateRequest) SetInterfaces(v []NewDeviceInterface) {
	o.Interfaces = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *DeviceCreateRequest) GetGroup() DeviceGroup {
	if o == nil || o.Group == nil {
		var ret DeviceGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceCreateRequest) GetGroupOk() (*DeviceGroup, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *DeviceCreateRequest) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given DeviceGroup and assigns it to the Group field.
func (o *DeviceCreateRequest) SetGroup(v DeviceGroup) {
	o.Group = &v
}

func (o DeviceCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DefaultDataStreamId != nil {
		toSerialize["defaultDataStreamId"] = o.DefaultDataStreamId
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Interfaces != nil {
		toSerialize["interfaces"] = o.Interfaces
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceCreateRequest struct {
	value *DeviceCreateRequest
	isSet bool
}

func (v NullableDeviceCreateRequest) Get() *DeviceCreateRequest {
	return v.value
}

func (v *NullableDeviceCreateRequest) Set(val *DeviceCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCreateRequest(val *DeviceCreateRequest) *NullableDeviceCreateRequest {
	return &NullableDeviceCreateRequest{value: val, isSet: true}
}

func (v NullableDeviceCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


