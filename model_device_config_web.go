/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// DeviceConfigWeb struct for DeviceConfigWeb
type DeviceConfigWeb struct {
	// device configuration
	Parameters *map[string]DeviceParameterWeb `json:"parameters,omitempty"`
	// topic where configuration change/sync events must be published to
	NotifyTo *string `json:"notifyTo,omitempty"`
}

// NewDeviceConfigWeb instantiates a new DeviceConfigWeb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceConfigWeb() *DeviceConfigWeb {
	this := DeviceConfigWeb{}
	return &this
}

// NewDeviceConfigWebWithDefaults instantiates a new DeviceConfigWeb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceConfigWebWithDefaults() *DeviceConfigWeb {
	this := DeviceConfigWeb{}
	return &this
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *DeviceConfigWeb) GetParameters() map[string]DeviceParameterWeb {
	if o == nil || o.Parameters == nil {
		var ret map[string]DeviceParameterWeb
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigWeb) GetParametersOk() (*map[string]DeviceParameterWeb, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *DeviceConfigWeb) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]DeviceParameterWeb and assigns it to the Parameters field.
func (o *DeviceConfigWeb) SetParameters(v map[string]DeviceParameterWeb) {
	o.Parameters = &v
}

// GetNotifyTo returns the NotifyTo field value if set, zero value otherwise.
func (o *DeviceConfigWeb) GetNotifyTo() string {
	if o == nil || o.NotifyTo == nil {
		var ret string
		return ret
	}
	return *o.NotifyTo
}

// GetNotifyToOk returns a tuple with the NotifyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigWeb) GetNotifyToOk() (*string, bool) {
	if o == nil || o.NotifyTo == nil {
		return nil, false
	}
	return o.NotifyTo, true
}

// HasNotifyTo returns a boolean if a field has been set.
func (o *DeviceConfigWeb) HasNotifyTo() bool {
	if o != nil && o.NotifyTo != nil {
		return true
	}

	return false
}

// SetNotifyTo gets a reference to the given string and assigns it to the NotifyTo field.
func (o *DeviceConfigWeb) SetNotifyTo(v string) {
	o.NotifyTo = &v
}

func (o DeviceConfigWeb) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.NotifyTo != nil {
		toSerialize["notifyTo"] = o.NotifyTo
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceConfigWeb struct {
	value *DeviceConfigWeb
	isSet bool
}

func (v NullableDeviceConfigWeb) Get() *DeviceConfigWeb {
	return v.value
}

func (v *NullableDeviceConfigWeb) Set(val *DeviceConfigWeb) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceConfigWeb) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceConfigWeb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceConfigWeb(val *DeviceConfigWeb) *NullableDeviceConfigWeb {
	return &NullableDeviceConfigWeb{value: val, isSet: true}
}

func (v NullableDeviceConfigWeb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceConfigWeb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


