/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// EventProcessingStateProcessingApiService EventProcessingStateProcessingApi service
type EventProcessingStateProcessingApiService service

type ApiDeleteUsingDELETE19Request struct {
	ctx _context.Context
	ApiService *EventProcessingStateProcessingApiService
	stateProcessingRuleId string
	xAPIKEY *string
}

func (r ApiDeleteUsingDELETE19Request) XAPIKEY(xAPIKEY string) ApiDeleteUsingDELETE19Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiDeleteUsingDELETE19Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteUsingDELETE19Execute(r)
}

/*
 * DeleteUsingDELETE19 Delete a StateProcessingRule
 * Usage of this API will be reported in your access log under 'alarming' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param stateProcessingRuleId id of the StateProcessingRule to delete
 * @return ApiDeleteUsingDELETE19Request
 */
func (a *EventProcessingStateProcessingApiService) DeleteUsingDELETE19(ctx _context.Context, stateProcessingRuleId string) ApiDeleteUsingDELETE19Request {
	return ApiDeleteUsingDELETE19Request{
		ApiService: a,
		ctx: ctx,
		stateProcessingRuleId: stateProcessingRuleId,
	}
}

/*
 * Execute executes the request
 */
func (a *EventProcessingStateProcessingApiService) DeleteUsingDELETE19Execute(r ApiDeleteUsingDELETE19Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingStateProcessingApiService.DeleteUsingDELETE19")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/stateprocessing-rule/{stateProcessingRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"stateProcessingRuleId"+"}", _neturl.PathEscape(parameterToString(r.stateProcessingRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetUsingGET18Request struct {
	ctx _context.Context
	ApiService *EventProcessingStateProcessingApiService
	stateProcessingRuleId string
	xAPIKEY *string
}

func (r ApiGetUsingGET18Request) XAPIKEY(xAPIKEY string) ApiGetUsingGET18Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetUsingGET18Request) Execute() (StateProcessingRule, *_nethttp.Response, error) {
	return r.ApiService.GetUsingGET18Execute(r)
}

/*
 * GetUsingGET18 Retrieve a StateProcessingRule
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param stateProcessingRuleId id of the StateProcessingRule to retrieve
 * @return ApiGetUsingGET18Request
 */
func (a *EventProcessingStateProcessingApiService) GetUsingGET18(ctx _context.Context, stateProcessingRuleId string) ApiGetUsingGET18Request {
	return ApiGetUsingGET18Request{
		ApiService: a,
		ctx: ctx,
		stateProcessingRuleId: stateProcessingRuleId,
	}
}

/*
 * Execute executes the request
 * @return StateProcessingRule
 */
func (a *EventProcessingStateProcessingApiService) GetUsingGET18Execute(r ApiGetUsingGET18Request) (StateProcessingRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  StateProcessingRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingStateProcessingApiService.GetUsingGET18")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/stateprocessing-rule/{stateProcessingRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"stateProcessingRuleId"+"}", _neturl.PathEscape(parameterToString(r.stateProcessingRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUsingGET21Request struct {
	ctx _context.Context
	ApiService *EventProcessingStateProcessingApiService
	xAPIKEY *string
	name *string
}

func (r ApiListUsingGET21Request) XAPIKEY(xAPIKEY string) ApiListUsingGET21Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiListUsingGET21Request) Name(name string) ApiListUsingGET21Request {
	r.name = &name
	return r
}

func (r ApiListUsingGET21Request) Execute() ([]StateProcessingRule, *_nethttp.Response, error) {
	return r.ApiService.ListUsingGET21Execute(r)
}

/*
 * ListUsingGET21 Retrieve the list of all the StateProcessingRules or get a StateProcessingRule by its name
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListUsingGET21Request
 */
func (a *EventProcessingStateProcessingApiService) ListUsingGET21(ctx _context.Context) ApiListUsingGET21Request {
	return ApiListUsingGET21Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []StateProcessingRule
 */
func (a *EventProcessingStateProcessingApiService) ListUsingGET21Execute(r ApiListUsingGET21Request) ([]StateProcessingRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []StateProcessingRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingStateProcessingApiService.ListUsingGET21")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/stateprocessing-rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostUsingPOST16Request struct {
	ctx _context.Context
	ApiService *EventProcessingStateProcessingApiService
	xAPIKEY *string
	stateProcessingRule *StateProcessingRule
}

func (r ApiPostUsingPOST16Request) XAPIKEY(xAPIKEY string) ApiPostUsingPOST16Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiPostUsingPOST16Request) StateProcessingRule(stateProcessingRule StateProcessingRule) ApiPostUsingPOST16Request {
	r.stateProcessingRule = &stateProcessingRule
	return r
}

func (r ApiPostUsingPOST16Request) Execute() (StateProcessingRule, *_nethttp.Response, error) {
	return r.ApiService.PostUsingPOST16Execute(r)
}

/*
 * PostUsingPOST16 Create a StateProcessingRule
 * Total number of StateProcessingRule is limited. Contact the commercial team or see developer guide to get more information.<br><br>Usage of this API will be reported in your access log under 'alarming' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPostUsingPOST16Request
 */
func (a *EventProcessingStateProcessingApiService) PostUsingPOST16(ctx _context.Context) ApiPostUsingPOST16Request {
	return ApiPostUsingPOST16Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return StateProcessingRule
 */
func (a *EventProcessingStateProcessingApiService) PostUsingPOST16Execute(r ApiPostUsingPOST16Request) (StateProcessingRule, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  StateProcessingRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingStateProcessingApiService.PostUsingPOST16")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/stateprocessing-rule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.stateProcessingRule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTestUsingPOST5Request struct {
	ctx _context.Context
	ApiService *EventProcessingStateProcessingApiService
	xAPIKEY *string
	testRequest *StateProcessingFunctionTest
}

func (r ApiTestUsingPOST5Request) XAPIKEY(xAPIKEY string) ApiTestUsingPOST5Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiTestUsingPOST5Request) TestRequest(testRequest StateProcessingFunctionTest) ApiTestUsingPOST5Request {
	r.testRequest = &testRequest
	return r
}

func (r ApiTestUsingPOST5Request) Execute() (StateProcessingFunctionTestResult, *_nethttp.Response, error) {
	return r.ApiService.TestUsingPOST5Execute(r)
}

/*
 * TestUsingPOST5 test a  State Processing function
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiTestUsingPOST5Request
 */
func (a *EventProcessingStateProcessingApiService) TestUsingPOST5(ctx _context.Context) ApiTestUsingPOST5Request {
	return ApiTestUsingPOST5Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return StateProcessingFunctionTestResult
 */
func (a *EventProcessingStateProcessingApiService) TestUsingPOST5Execute(r ApiTestUsingPOST5Request) (StateProcessingFunctionTestResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  StateProcessingFunctionTestResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingStateProcessingApiService.TestUsingPOST5")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/stateprocessing-rule/test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.testRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateUsingPUT10Request struct {
	ctx _context.Context
	ApiService *EventProcessingStateProcessingApiService
	stateProcessingRuleId string
	xAPIKEY *string
	stateProcessingRule *StateProcessingRule
}

func (r ApiUpdateUsingPUT10Request) XAPIKEY(xAPIKEY string) ApiUpdateUsingPUT10Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiUpdateUsingPUT10Request) StateProcessingRule(stateProcessingRule StateProcessingRule) ApiUpdateUsingPUT10Request {
	r.stateProcessingRule = &stateProcessingRule
	return r
}

func (r ApiUpdateUsingPUT10Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UpdateUsingPUT10Execute(r)
}

/*
 * UpdateUsingPUT10 Update a StateProcessingRule
 * Usage of this API will be reported in your access log under 'alarming' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param stateProcessingRuleId id of the StateProcessingRule to update
 * @return ApiUpdateUsingPUT10Request
 */
func (a *EventProcessingStateProcessingApiService) UpdateUsingPUT10(ctx _context.Context, stateProcessingRuleId string) ApiUpdateUsingPUT10Request {
	return ApiUpdateUsingPUT10Request{
		ApiService: a,
		ctx: ctx,
		stateProcessingRuleId: stateProcessingRuleId,
	}
}

/*
 * Execute executes the request
 */
func (a *EventProcessingStateProcessingApiService) UpdateUsingPUT10Execute(r ApiUpdateUsingPUT10Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventProcessingStateProcessingApiService.UpdateUsingPUT10")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/eventprocessing/stateprocessing-rule/{stateProcessingRuleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"stateProcessingRuleId"+"}", _neturl.PathEscape(parameterToString(r.stateProcessingRuleId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.stateProcessingRule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
