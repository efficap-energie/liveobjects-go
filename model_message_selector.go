/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// MessageSelector struct for MessageSelector
type MessageSelector struct {
	Filter *MessageSelectorFilter `json:"filter,omitempty"`
	// Specifies the source of the message that will trigger an action
	Origin string `json:"origin"`
}

// NewMessageSelector instantiates a new MessageSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageSelector(origin string, ) *MessageSelector {
	this := MessageSelector{}
	this.Origin = origin
	return &this
}

// NewMessageSelectorWithDefaults instantiates a new MessageSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageSelectorWithDefaults() *MessageSelector {
	this := MessageSelector{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *MessageSelector) GetFilter() MessageSelectorFilter {
	if o == nil || o.Filter == nil {
		var ret MessageSelectorFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageSelector) GetFilterOk() (*MessageSelectorFilter, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *MessageSelector) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given MessageSelectorFilter and assigns it to the Filter field.
func (o *MessageSelector) SetFilter(v MessageSelectorFilter) {
	o.Filter = &v
}

// GetOrigin returns the Origin field value
func (o *MessageSelector) GetOrigin() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *MessageSelector) GetOriginOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *MessageSelector) SetOrigin(v string) {
	o.Origin = v
}

func (o MessageSelector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if true {
		toSerialize["origin"] = o.Origin
	}
	return json.Marshal(toSerialize)
}

type NullableMessageSelector struct {
	value *MessageSelector
	isSet bool
}

func (v NullableMessageSelector) Get() *MessageSelector {
	return v.value
}

func (v *NullableMessageSelector) Set(val *MessageSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageSelector(val *MessageSelector) *NullableMessageSelector {
	return &NullableMessageSelector{value: val, isSet: true}
}

func (v NullableMessageSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


