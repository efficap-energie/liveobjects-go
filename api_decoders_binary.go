/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// DecodersBinaryApiService DecodersBinaryApi service
type DecodersBinaryApiService service

type ApiActivateUsingPUT8Request struct {
	ctx _context.Context
	ApiService *DecodersBinaryApiService
	decoderId string
	xAPIKEY *string
	enabled *bool
}

func (r ApiActivateUsingPUT8Request) XAPIKEY(xAPIKEY string) ApiActivateUsingPUT8Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiActivateUsingPUT8Request) Enabled(enabled bool) ApiActivateUsingPUT8Request {
	r.enabled = &enabled
	return r
}

func (r ApiActivateUsingPUT8Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ActivateUsingPUT8Execute(r)
}

/*
 * ActivateUsingPUT8 Activate or deactivate a decoder
 * Usage of this API will be reported in your access log under 'data_decoder' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param decoderId id of the binary decoder to activate or deactivate
 * @return ApiActivateUsingPUT8Request
 */
func (a *DecodersBinaryApiService) ActivateUsingPUT8(ctx _context.Context, decoderId string) ApiActivateUsingPUT8Request {
	return ApiActivateUsingPUT8Request{
		ApiService: a,
		ctx: ctx,
		decoderId: decoderId,
	}
}

/*
 * Execute executes the request
 */
func (a *DecodersBinaryApiService) ActivateUsingPUT8Execute(r ApiActivateUsingPUT8Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersBinaryApiService.ActivateUsingPUT8")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/binary/{decoderId}/enabled"
	localVarPath = strings.Replace(localVarPath, "{"+"decoderId"+"}", _neturl.PathEscape(parameterToString(r.decoderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.enabled
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteUsingDELETE8Request struct {
	ctx _context.Context
	ApiService *DecodersBinaryApiService
	decoderId string
	xAPIKEY *string
}

func (r ApiDeleteUsingDELETE8Request) XAPIKEY(xAPIKEY string) ApiDeleteUsingDELETE8Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiDeleteUsingDELETE8Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteUsingDELETE8Execute(r)
}

/*
 * DeleteUsingDELETE8 Delete a binary decoder
 * Usage of this API will be reported in your access log under 'data_decoder' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param decoderId id of the binary decoder to delete
 * @return ApiDeleteUsingDELETE8Request
 */
func (a *DecodersBinaryApiService) DeleteUsingDELETE8(ctx _context.Context, decoderId string) ApiDeleteUsingDELETE8Request {
	return ApiDeleteUsingDELETE8Request{
		ApiService: a,
		ctx: ctx,
		decoderId: decoderId,
	}
}

/*
 * Execute executes the request
 */
func (a *DecodersBinaryApiService) DeleteUsingDELETE8Execute(r ApiDeleteUsingDELETE8Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersBinaryApiService.DeleteUsingDELETE8")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/binary/{decoderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"decoderId"+"}", _neturl.PathEscape(parameterToString(r.decoderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetUsingGET10Request struct {
	ctx _context.Context
	ApiService *DecodersBinaryApiService
	decoderId string
	xAPIKEY *string
}

func (r ApiGetUsingGET10Request) XAPIKEY(xAPIKEY string) ApiGetUsingGET10Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetUsingGET10Request) Execute() (BinaryPayloadDescription, *_nethttp.Response, error) {
	return r.ApiService.GetUsingGET10Execute(r)
}

/*
 * GetUsingGET10 Retrieve a binary decoder
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param decoderId id of the binary decoder to retrieve
 * @return ApiGetUsingGET10Request
 */
func (a *DecodersBinaryApiService) GetUsingGET10(ctx _context.Context, decoderId string) ApiGetUsingGET10Request {
	return ApiGetUsingGET10Request{
		ApiService: a,
		ctx: ctx,
		decoderId: decoderId,
	}
}

/*
 * Execute executes the request
 * @return BinaryPayloadDescription
 */
func (a *DecodersBinaryApiService) GetUsingGET10Execute(r ApiGetUsingGET10Request) (BinaryPayloadDescription, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BinaryPayloadDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersBinaryApiService.GetUsingGET10")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/binary/{decoderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"decoderId"+"}", _neturl.PathEscape(parameterToString(r.decoderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUsingGET10Request struct {
	ctx _context.Context
	ApiService *DecodersBinaryApiService
	xAPIKEY *string
	tags *[]string
}

func (r ApiListUsingGET10Request) XAPIKEY(xAPIKEY string) ApiListUsingGET10Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiListUsingGET10Request) Tags(tags []string) ApiListUsingGET10Request {
	r.tags = &tags
	return r
}

func (r ApiListUsingGET10Request) Execute() ([]BinaryPayloadDescription, *_nethttp.Response, error) {
	return r.ApiService.ListUsingGET10Execute(r)
}

/*
 * ListUsingGET10 Retrieve the list of binary decoders
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListUsingGET10Request
 */
func (a *DecodersBinaryApiService) ListUsingGET10(ctx _context.Context) ApiListUsingGET10Request {
	return ApiListUsingGET10Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []BinaryPayloadDescription
 */
func (a *DecodersBinaryApiService) ListUsingGET10Execute(r ApiListUsingGET10Request) ([]BinaryPayloadDescription, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []BinaryPayloadDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersBinaryApiService.ListUsingGET10")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/binary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostUsingPOST10Request struct {
	ctx _context.Context
	ApiService *DecodersBinaryApiService
	xAPIKEY *string
	binaryPayloadDescription *BinaryPayloadDescription
}

func (r ApiPostUsingPOST10Request) XAPIKEY(xAPIKEY string) ApiPostUsingPOST10Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiPostUsingPOST10Request) BinaryPayloadDescription(binaryPayloadDescription BinaryPayloadDescription) ApiPostUsingPOST10Request {
	r.binaryPayloadDescription = &binaryPayloadDescription
	return r
}

func (r ApiPostUsingPOST10Request) Execute() (BinaryPayloadDescription, *_nethttp.Response, error) {
	return r.ApiService.PostUsingPOST10Execute(r)
}

/*
 * PostUsingPOST10 Create a binary decoder
 * The number of binary decoders is limited to 100.<br><br>Usage of this API will be reported in your access log under 'data_decoder' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPostUsingPOST10Request
 */
func (a *DecodersBinaryApiService) PostUsingPOST10(ctx _context.Context) ApiPostUsingPOST10Request {
	return ApiPostUsingPOST10Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return BinaryPayloadDescription
 */
func (a *DecodersBinaryApiService) PostUsingPOST10Execute(r ApiPostUsingPOST10Request) (BinaryPayloadDescription, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BinaryPayloadDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersBinaryApiService.PostUsingPOST10")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/binary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.binaryPayloadDescription
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutUsingPUT2Request struct {
	ctx _context.Context
	ApiService *DecodersBinaryApiService
	decoderId string
	xAPIKEY *string
	binaryPayloadDescription *BinaryPayloadDescription
}

func (r ApiPutUsingPUT2Request) XAPIKEY(xAPIKEY string) ApiPutUsingPUT2Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiPutUsingPUT2Request) BinaryPayloadDescription(binaryPayloadDescription BinaryPayloadDescription) ApiPutUsingPUT2Request {
	r.binaryPayloadDescription = &binaryPayloadDescription
	return r
}

func (r ApiPutUsingPUT2Request) Execute() (BinaryPayloadDescription, *_nethttp.Response, error) {
	return r.ApiService.PutUsingPUT2Execute(r)
}

/*
 * PutUsingPUT2 Update a binary decoder
 * Usage of this API will be reported in your access log under 'data_decoder' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param decoderId id of the binary decoder to update
 * @return ApiPutUsingPUT2Request
 */
func (a *DecodersBinaryApiService) PutUsingPUT2(ctx _context.Context, decoderId string) ApiPutUsingPUT2Request {
	return ApiPutUsingPUT2Request{
		ApiService: a,
		ctx: ctx,
		decoderId: decoderId,
	}
}

/*
 * Execute executes the request
 * @return BinaryPayloadDescription
 */
func (a *DecodersBinaryApiService) PutUsingPUT2Execute(r ApiPutUsingPUT2Request) (BinaryPayloadDescription, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BinaryPayloadDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersBinaryApiService.PutUsingPUT2")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/binary/{decoderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"decoderId"+"}", _neturl.PathEscape(parameterToString(r.decoderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.binaryPayloadDescription
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTestUsingPOST2Request struct {
	ctx _context.Context
	ApiService *DecodersBinaryApiService
	xAPIKEY *string
	dataDecodingTestRequest *BinaryPayloadDescriptionTestRequest
}

func (r ApiTestUsingPOST2Request) XAPIKEY(xAPIKEY string) ApiTestUsingPOST2Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiTestUsingPOST2Request) DataDecodingTestRequest(dataDecodingTestRequest BinaryPayloadDescriptionTestRequest) ApiTestUsingPOST2Request {
	r.dataDecodingTestRequest = &dataDecodingTestRequest
	return r
}

func (r ApiTestUsingPOST2Request) Execute() (PayloadDescriptionTestResult, *_nethttp.Response, error) {
	return r.ApiService.TestUsingPOST2Execute(r)
}

/*
 * TestUsingPOST2 Test a binary decoder format with an encoded payload
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiTestUsingPOST2Request
 */
func (a *DecodersBinaryApiService) TestUsingPOST2(ctx _context.Context) ApiTestUsingPOST2Request {
	return ApiTestUsingPOST2Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PayloadDescriptionTestResult
 */
func (a *DecodersBinaryApiService) TestUsingPOST2Execute(r ApiTestUsingPOST2Request) (PayloadDescriptionTestResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PayloadDescriptionTestResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersBinaryApiService.TestUsingPOST2")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/binary/test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.dataDecodingTestRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
