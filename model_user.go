/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// User body of user data
type User struct {
	// user email
	Email string `json:"email"`
	ExternalIdentity *ExternalIdentity `json:"externalIdentity,omitempty"`
	// identifier of user
	Id string `json:"id"`
	// user last authentication timestamp in ms
	LastAuthentication *int64 `json:"lastAuthentication,omitempty"`
	// user login
	Login string `json:"login"`
	// user is the tenant's main user
	MainUser *bool `json:"mainUser,omitempty"`
	// user portal data
	PortalData *map[string]interface{} `json:"portalData,omitempty"`
	// list of user associated roles.
	Roles []string `json:"roles"`
	// user state : disabled, enabled or suspended
	State string `json:"state"`
	// identifier of tenant account this user will belong to
	TenantId string `json:"tenantId"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(email string, id string, login string, roles []string, state string, tenantId string, ) *User {
	this := User{}
	this.Email = email
	this.Id = id
	this.Login = login
	this.Roles = roles
	this.State = state
	this.TenantId = tenantId
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetEmail returns the Email field value
func (o *User) GetEmail() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *User) SetEmail(v string) {
	o.Email = v
}

// GetExternalIdentity returns the ExternalIdentity field value if set, zero value otherwise.
func (o *User) GetExternalIdentity() ExternalIdentity {
	if o == nil || o.ExternalIdentity == nil {
		var ret ExternalIdentity
		return ret
	}
	return *o.ExternalIdentity
}

// GetExternalIdentityOk returns a tuple with the ExternalIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetExternalIdentityOk() (*ExternalIdentity, bool) {
	if o == nil || o.ExternalIdentity == nil {
		return nil, false
	}
	return o.ExternalIdentity, true
}

// HasExternalIdentity returns a boolean if a field has been set.
func (o *User) HasExternalIdentity() bool {
	if o != nil && o.ExternalIdentity != nil {
		return true
	}

	return false
}

// SetExternalIdentity gets a reference to the given ExternalIdentity and assigns it to the ExternalIdentity field.
func (o *User) SetExternalIdentity(v ExternalIdentity) {
	o.ExternalIdentity = &v
}

// GetId returns the Id field value
func (o *User) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v string) {
	o.Id = v
}

// GetLastAuthentication returns the LastAuthentication field value if set, zero value otherwise.
func (o *User) GetLastAuthentication() int64 {
	if o == nil || o.LastAuthentication == nil {
		var ret int64
		return ret
	}
	return *o.LastAuthentication
}

// GetLastAuthenticationOk returns a tuple with the LastAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastAuthenticationOk() (*int64, bool) {
	if o == nil || o.LastAuthentication == nil {
		return nil, false
	}
	return o.LastAuthentication, true
}

// HasLastAuthentication returns a boolean if a field has been set.
func (o *User) HasLastAuthentication() bool {
	if o != nil && o.LastAuthentication != nil {
		return true
	}

	return false
}

// SetLastAuthentication gets a reference to the given int64 and assigns it to the LastAuthentication field.
func (o *User) SetLastAuthentication(v int64) {
	o.LastAuthentication = &v
}

// GetLogin returns the Login field value
func (o *User) GetLogin() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Login
}

// GetLoginOk returns a tuple with the Login field value
// and a boolean to check if the value has been set.
func (o *User) GetLoginOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Login, true
}

// SetLogin sets field value
func (o *User) SetLogin(v string) {
	o.Login = v
}

// GetMainUser returns the MainUser field value if set, zero value otherwise.
func (o *User) GetMainUser() bool {
	if o == nil || o.MainUser == nil {
		var ret bool
		return ret
	}
	return *o.MainUser
}

// GetMainUserOk returns a tuple with the MainUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetMainUserOk() (*bool, bool) {
	if o == nil || o.MainUser == nil {
		return nil, false
	}
	return o.MainUser, true
}

// HasMainUser returns a boolean if a field has been set.
func (o *User) HasMainUser() bool {
	if o != nil && o.MainUser != nil {
		return true
	}

	return false
}

// SetMainUser gets a reference to the given bool and assigns it to the MainUser field.
func (o *User) SetMainUser(v bool) {
	o.MainUser = &v
}

// GetPortalData returns the PortalData field value if set, zero value otherwise.
func (o *User) GetPortalData() map[string]interface{} {
	if o == nil || o.PortalData == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.PortalData
}

// GetPortalDataOk returns a tuple with the PortalData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPortalDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.PortalData == nil {
		return nil, false
	}
	return o.PortalData, true
}

// HasPortalData returns a boolean if a field has been set.
func (o *User) HasPortalData() bool {
	if o != nil && o.PortalData != nil {
		return true
	}

	return false
}

// SetPortalData gets a reference to the given map[string]interface{} and assigns it to the PortalData field.
func (o *User) SetPortalData(v map[string]interface{}) {
	o.PortalData = &v
}

// GetRoles returns the Roles field value
func (o *User) GetRoles() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *User) GetRolesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Roles, true
}

// SetRoles sets field value
func (o *User) SetRoles(v []string) {
	o.Roles = v
}

// GetState returns the State field value
func (o *User) GetState() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *User) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *User) SetState(v string) {
	o.State = v
}

// GetTenantId returns the TenantId field value
func (o *User) GetTenantId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *User) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *User) SetTenantId(v string) {
	o.TenantId = v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.ExternalIdentity != nil {
		toSerialize["externalIdentity"] = o.ExternalIdentity
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.LastAuthentication != nil {
		toSerialize["lastAuthentication"] = o.LastAuthentication
	}
	if true {
		toSerialize["login"] = o.Login
	}
	if o.MainUser != nil {
		toSerialize["mainUser"] = o.MainUser
	}
	if o.PortalData != nil {
		toSerialize["portalData"] = o.PortalData
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["tenantId"] = o.TenantId
	}
	return json.Marshal(toSerialize)
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


