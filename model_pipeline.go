/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// Pipeline DataMessage Pipeline definition
type Pipeline struct {
	// pipeline's creation date (ISO-8601). Should be null for post and update action.
	Created *string `json:"created,omitempty"`
	// pipeline description (length limit : 2000).
	Description *string `json:"description,omitempty"`
	// pipeline activation. Default is false.
	Enabled bool `json:"enabled"`
	Filter *PipelineFilter `json:"filter,omitempty"`
	// id of the pipeline. Should be null when used for POST. Required for update.
	Id *string `json:"id,omitempty"`
	// pipeline name (length limit : 1000).
	Name string `json:"name"`
	// pipeline's priority level. When several pipelines match the input filter, then the priority is given to the pipeline with lowest priorityLevel. If several pipelines match filter and the share the same priorityLevel, then the oldest pipeline is chosen (based on 'created' field).
	PriorityLevel int64 `json:"priorityLevel"`
	// list of steps of the pipelines. Should contain at least 1 step. Available steps are defined in developer's guide.
	Steps []PipelineStep `json:"steps"`
}

// NewPipeline instantiates a new Pipeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipeline(enabled bool, name string, priorityLevel int64, steps []PipelineStep, ) *Pipeline {
	this := Pipeline{}
	this.Enabled = enabled
	this.Name = name
	this.PriorityLevel = priorityLevel
	this.Steps = steps
	return &this
}

// NewPipelineWithDefaults instantiates a new Pipeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineWithDefaults() *Pipeline {
	this := Pipeline{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Pipeline) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pipeline) GetCreatedOk() (*string, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Pipeline) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *Pipeline) SetCreated(v string) {
	o.Created = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Pipeline) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pipeline) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Pipeline) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Pipeline) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *Pipeline) GetEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Pipeline) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *Pipeline) SetEnabled(v bool) {
	o.Enabled = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *Pipeline) GetFilter() PipelineFilter {
	if o == nil || o.Filter == nil {
		var ret PipelineFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pipeline) GetFilterOk() (*PipelineFilter, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *Pipeline) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given PipelineFilter and assigns it to the Filter field.
func (o *Pipeline) SetFilter(v PipelineFilter) {
	o.Filter = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Pipeline) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pipeline) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Pipeline) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Pipeline) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Pipeline) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Pipeline) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Pipeline) SetName(v string) {
	o.Name = v
}

// GetPriorityLevel returns the PriorityLevel field value
func (o *Pipeline) GetPriorityLevel() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.PriorityLevel
}

// GetPriorityLevelOk returns a tuple with the PriorityLevel field value
// and a boolean to check if the value has been set.
func (o *Pipeline) GetPriorityLevelOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PriorityLevel, true
}

// SetPriorityLevel sets field value
func (o *Pipeline) SetPriorityLevel(v int64) {
	o.PriorityLevel = v
}

// GetSteps returns the Steps field value
func (o *Pipeline) GetSteps() []PipelineStep {
	if o == nil  {
		var ret []PipelineStep
		return ret
	}

	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value
// and a boolean to check if the value has been set.
func (o *Pipeline) GetStepsOk() (*[]PipelineStep, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Steps, true
}

// SetSteps sets field value
func (o *Pipeline) SetSteps(v []PipelineStep) {
	o.Steps = v
}

func (o Pipeline) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["priorityLevel"] = o.PriorityLevel
	}
	if true {
		toSerialize["steps"] = o.Steps
	}
	return json.Marshal(toSerialize)
}

type NullablePipeline struct {
	value *Pipeline
	isSet bool
}

func (v NullablePipeline) Get() *Pipeline {
	return v.value
}

func (v *NullablePipeline) Set(val *Pipeline) {
	v.value = val
	v.isSet = true
}

func (v NullablePipeline) IsSet() bool {
	return v.isSet
}

func (v *NullablePipeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipeline(val *Pipeline) *NullablePipeline {
	return &NullablePipeline{value: val, isSet: true}
}

func (v NullablePipeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


