/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ActionTriggersV0 struct for ActionTriggersV0
type ActionTriggersV0 struct {
	// A list of state processing, firing or activity processing rule ids that will trigger an action - incompatible with messageSelector
	EventRuleIds *[]string `json:"eventRuleIds,omitempty"`
	MessageSelector *MessageSelector `json:"messageSelector,omitempty"`
}

// NewActionTriggersV0 instantiates a new ActionTriggersV0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionTriggersV0() *ActionTriggersV0 {
	this := ActionTriggersV0{}
	return &this
}

// NewActionTriggersV0WithDefaults instantiates a new ActionTriggersV0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionTriggersV0WithDefaults() *ActionTriggersV0 {
	this := ActionTriggersV0{}
	return &this
}

// GetEventRuleIds returns the EventRuleIds field value if set, zero value otherwise.
func (o *ActionTriggersV0) GetEventRuleIds() []string {
	if o == nil || o.EventRuleIds == nil {
		var ret []string
		return ret
	}
	return *o.EventRuleIds
}

// GetEventRuleIdsOk returns a tuple with the EventRuleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTriggersV0) GetEventRuleIdsOk() (*[]string, bool) {
	if o == nil || o.EventRuleIds == nil {
		return nil, false
	}
	return o.EventRuleIds, true
}

// HasEventRuleIds returns a boolean if a field has been set.
func (o *ActionTriggersV0) HasEventRuleIds() bool {
	if o != nil && o.EventRuleIds != nil {
		return true
	}

	return false
}

// SetEventRuleIds gets a reference to the given []string and assigns it to the EventRuleIds field.
func (o *ActionTriggersV0) SetEventRuleIds(v []string) {
	o.EventRuleIds = &v
}

// GetMessageSelector returns the MessageSelector field value if set, zero value otherwise.
func (o *ActionTriggersV0) GetMessageSelector() MessageSelector {
	if o == nil || o.MessageSelector == nil {
		var ret MessageSelector
		return ret
	}
	return *o.MessageSelector
}

// GetMessageSelectorOk returns a tuple with the MessageSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionTriggersV0) GetMessageSelectorOk() (*MessageSelector, bool) {
	if o == nil || o.MessageSelector == nil {
		return nil, false
	}
	return o.MessageSelector, true
}

// HasMessageSelector returns a boolean if a field has been set.
func (o *ActionTriggersV0) HasMessageSelector() bool {
	if o != nil && o.MessageSelector != nil {
		return true
	}

	return false
}

// SetMessageSelector gets a reference to the given MessageSelector and assigns it to the MessageSelector field.
func (o *ActionTriggersV0) SetMessageSelector(v MessageSelector) {
	o.MessageSelector = &v
}

func (o ActionTriggersV0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventRuleIds != nil {
		toSerialize["eventRuleIds"] = o.EventRuleIds
	}
	if o.MessageSelector != nil {
		toSerialize["messageSelector"] = o.MessageSelector
	}
	return json.Marshal(toSerialize)
}

type NullableActionTriggersV0 struct {
	value *ActionTriggersV0
	isSet bool
}

func (v NullableActionTriggersV0) Get() *ActionTriggersV0 {
	return v.value
}

func (v *NullableActionTriggersV0) Set(val *ActionTriggersV0) {
	v.value = val
	v.isSet = true
}

func (v NullableActionTriggersV0) IsSet() bool {
	return v.isSet
}

func (v *NullableActionTriggersV0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionTriggersV0(val *ActionTriggersV0) *NullableActionTriggersV0 {
	return &NullableActionTriggersV0{value: val, isSet: true}
}

func (v NullableActionTriggersV0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionTriggersV0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


