/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// DataMatchTest struct for DataMatchTest
type DataMatchTest struct {
	// data to test the dataPredicate with
	Data map[string]interface{} `json:"data"`
	// the jsonLogic that will be used to evaluate the data
	DataPredicate map[string]interface{} `json:"dataPredicate"`
}

// NewDataMatchTest instantiates a new DataMatchTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataMatchTest(data map[string]interface{}, dataPredicate map[string]interface{}, ) *DataMatchTest {
	this := DataMatchTest{}
	this.Data = data
	this.DataPredicate = dataPredicate
	return &this
}

// NewDataMatchTestWithDefaults instantiates a new DataMatchTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataMatchTestWithDefaults() *DataMatchTest {
	this := DataMatchTest{}
	return &this
}

// GetData returns the Data field value
func (o *DataMatchTest) GetData() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DataMatchTest) GetDataOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *DataMatchTest) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetDataPredicate returns the DataPredicate field value
func (o *DataMatchTest) GetDataPredicate() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.DataPredicate
}

// GetDataPredicateOk returns a tuple with the DataPredicate field value
// and a boolean to check if the value has been set.
func (o *DataMatchTest) GetDataPredicateOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DataPredicate, true
}

// SetDataPredicate sets field value
func (o *DataMatchTest) SetDataPredicate(v map[string]interface{}) {
	o.DataPredicate = v
}

func (o DataMatchTest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["dataPredicate"] = o.DataPredicate
	}
	return json.Marshal(toSerialize)
}

type NullableDataMatchTest struct {
	value *DataMatchTest
	isSet bool
}

func (v NullableDataMatchTest) Get() *DataMatchTest {
	return v.value
}

func (v *NullableDataMatchTest) Set(val *DataMatchTest) {
	v.value = val
	v.isSet = true
}

func (v NullableDataMatchTest) IsSet() bool {
	return v.isSet
}

func (v *NullableDataMatchTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataMatchTest(val *DataMatchTest) *NullableDataMatchTest {
	return &NullableDataMatchTest{value: val, isSet: true}
}

func (v NullableDataMatchTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataMatchTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


