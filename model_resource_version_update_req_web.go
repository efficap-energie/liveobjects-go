/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ResourceVersionUpdateReqWeb body of resource version update request
type ResourceVersionUpdateReqWeb struct {
	// set of the versions from which a resource update to the version can be done. Max number of versions is 100. A version max length is 255. 
	CompatibleVersions *[]string `json:"compatibleVersions,omitempty"`
	// the version's description. Expected string (max 255 characters)
	Description *string `json:"description,omitempty"`
}

// NewResourceVersionUpdateReqWeb instantiates a new ResourceVersionUpdateReqWeb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceVersionUpdateReqWeb() *ResourceVersionUpdateReqWeb {
	this := ResourceVersionUpdateReqWeb{}
	return &this
}

// NewResourceVersionUpdateReqWebWithDefaults instantiates a new ResourceVersionUpdateReqWeb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceVersionUpdateReqWebWithDefaults() *ResourceVersionUpdateReqWeb {
	this := ResourceVersionUpdateReqWeb{}
	return &this
}

// GetCompatibleVersions returns the CompatibleVersions field value if set, zero value otherwise.
func (o *ResourceVersionUpdateReqWeb) GetCompatibleVersions() []string {
	if o == nil || o.CompatibleVersions == nil {
		var ret []string
		return ret
	}
	return *o.CompatibleVersions
}

// GetCompatibleVersionsOk returns a tuple with the CompatibleVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceVersionUpdateReqWeb) GetCompatibleVersionsOk() (*[]string, bool) {
	if o == nil || o.CompatibleVersions == nil {
		return nil, false
	}
	return o.CompatibleVersions, true
}

// HasCompatibleVersions returns a boolean if a field has been set.
func (o *ResourceVersionUpdateReqWeb) HasCompatibleVersions() bool {
	if o != nil && o.CompatibleVersions != nil {
		return true
	}

	return false
}

// SetCompatibleVersions gets a reference to the given []string and assigns it to the CompatibleVersions field.
func (o *ResourceVersionUpdateReqWeb) SetCompatibleVersions(v []string) {
	o.CompatibleVersions = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ResourceVersionUpdateReqWeb) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceVersionUpdateReqWeb) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ResourceVersionUpdateReqWeb) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ResourceVersionUpdateReqWeb) SetDescription(v string) {
	o.Description = &v
}

func (o ResourceVersionUpdateReqWeb) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompatibleVersions != nil {
		toSerialize["compatibleVersions"] = o.CompatibleVersions
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableResourceVersionUpdateReqWeb struct {
	value *ResourceVersionUpdateReqWeb
	isSet bool
}

func (v NullableResourceVersionUpdateReqWeb) Get() *ResourceVersionUpdateReqWeb {
	return v.value
}

func (v *NullableResourceVersionUpdateReqWeb) Set(val *ResourceVersionUpdateReqWeb) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceVersionUpdateReqWeb) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceVersionUpdateReqWeb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceVersionUpdateReqWeb(val *ResourceVersionUpdateReqWeb) *NullableResourceVersionUpdateReqWeb {
	return &NullableResourceVersionUpdateReqWeb{value: val, isSet: true}
}

func (v NullableResourceVersionUpdateReqWeb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceVersionUpdateReqWeb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


