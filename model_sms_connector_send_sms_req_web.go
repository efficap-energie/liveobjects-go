/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// SMSConnectorSendSMSReqWeb struct for SMSConnectorSendSMSReqWeb
type SMSConnectorSendSMSReqWeb struct {
	// (deprecated) please use hexPayload
	Base64Payload *string `json:"base64Payload,omitempty"`
	// payload as Hexadecimal PDU Message Entry (GSM 03.40) ex: \"000100009100000E74747A0E4ACF416110BD3CA703\". If used, don't set textPayload and base64Payload.
	HexPayload *string `json:"hexPayload,omitempty"`
	// device's SIM Card identifier(s) ex: [\"33666666667\"]. Must be registered in the business settings prior to send SMS only Orange France MSISDNs are supported for now
	Msisdns []string `json:"msisdns"`
	// server phone number ex: \"20258\". Must be defined in OfferSettings.
	ServerPhoneNumber string `json:"serverPhoneNumber"`
	// payload as text ex: \"this is a test\". If used, don't set hexPayload and base64Payload.
	TextPayload *string `json:"textPayload,omitempty"`
}

// NewSMSConnectorSendSMSReqWeb instantiates a new SMSConnectorSendSMSReqWeb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMSConnectorSendSMSReqWeb(msisdns []string, serverPhoneNumber string, ) *SMSConnectorSendSMSReqWeb {
	this := SMSConnectorSendSMSReqWeb{}
	this.Msisdns = msisdns
	this.ServerPhoneNumber = serverPhoneNumber
	return &this
}

// NewSMSConnectorSendSMSReqWebWithDefaults instantiates a new SMSConnectorSendSMSReqWeb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMSConnectorSendSMSReqWebWithDefaults() *SMSConnectorSendSMSReqWeb {
	this := SMSConnectorSendSMSReqWeb{}
	return &this
}

// GetBase64Payload returns the Base64Payload field value if set, zero value otherwise.
func (o *SMSConnectorSendSMSReqWeb) GetBase64Payload() string {
	if o == nil || o.Base64Payload == nil {
		var ret string
		return ret
	}
	return *o.Base64Payload
}

// GetBase64PayloadOk returns a tuple with the Base64Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSConnectorSendSMSReqWeb) GetBase64PayloadOk() (*string, bool) {
	if o == nil || o.Base64Payload == nil {
		return nil, false
	}
	return o.Base64Payload, true
}

// HasBase64Payload returns a boolean if a field has been set.
func (o *SMSConnectorSendSMSReqWeb) HasBase64Payload() bool {
	if o != nil && o.Base64Payload != nil {
		return true
	}

	return false
}

// SetBase64Payload gets a reference to the given string and assigns it to the Base64Payload field.
func (o *SMSConnectorSendSMSReqWeb) SetBase64Payload(v string) {
	o.Base64Payload = &v
}

// GetHexPayload returns the HexPayload field value if set, zero value otherwise.
func (o *SMSConnectorSendSMSReqWeb) GetHexPayload() string {
	if o == nil || o.HexPayload == nil {
		var ret string
		return ret
	}
	return *o.HexPayload
}

// GetHexPayloadOk returns a tuple with the HexPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSConnectorSendSMSReqWeb) GetHexPayloadOk() (*string, bool) {
	if o == nil || o.HexPayload == nil {
		return nil, false
	}
	return o.HexPayload, true
}

// HasHexPayload returns a boolean if a field has been set.
func (o *SMSConnectorSendSMSReqWeb) HasHexPayload() bool {
	if o != nil && o.HexPayload != nil {
		return true
	}

	return false
}

// SetHexPayload gets a reference to the given string and assigns it to the HexPayload field.
func (o *SMSConnectorSendSMSReqWeb) SetHexPayload(v string) {
	o.HexPayload = &v
}

// GetMsisdns returns the Msisdns field value
func (o *SMSConnectorSendSMSReqWeb) GetMsisdns() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Msisdns
}

// GetMsisdnsOk returns a tuple with the Msisdns field value
// and a boolean to check if the value has been set.
func (o *SMSConnectorSendSMSReqWeb) GetMsisdnsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Msisdns, true
}

// SetMsisdns sets field value
func (o *SMSConnectorSendSMSReqWeb) SetMsisdns(v []string) {
	o.Msisdns = v
}

// GetServerPhoneNumber returns the ServerPhoneNumber field value
func (o *SMSConnectorSendSMSReqWeb) GetServerPhoneNumber() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ServerPhoneNumber
}

// GetServerPhoneNumberOk returns a tuple with the ServerPhoneNumber field value
// and a boolean to check if the value has been set.
func (o *SMSConnectorSendSMSReqWeb) GetServerPhoneNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ServerPhoneNumber, true
}

// SetServerPhoneNumber sets field value
func (o *SMSConnectorSendSMSReqWeb) SetServerPhoneNumber(v string) {
	o.ServerPhoneNumber = v
}

// GetTextPayload returns the TextPayload field value if set, zero value otherwise.
func (o *SMSConnectorSendSMSReqWeb) GetTextPayload() string {
	if o == nil || o.TextPayload == nil {
		var ret string
		return ret
	}
	return *o.TextPayload
}

// GetTextPayloadOk returns a tuple with the TextPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSConnectorSendSMSReqWeb) GetTextPayloadOk() (*string, bool) {
	if o == nil || o.TextPayload == nil {
		return nil, false
	}
	return o.TextPayload, true
}

// HasTextPayload returns a boolean if a field has been set.
func (o *SMSConnectorSendSMSReqWeb) HasTextPayload() bool {
	if o != nil && o.TextPayload != nil {
		return true
	}

	return false
}

// SetTextPayload gets a reference to the given string and assigns it to the TextPayload field.
func (o *SMSConnectorSendSMSReqWeb) SetTextPayload(v string) {
	o.TextPayload = &v
}

func (o SMSConnectorSendSMSReqWeb) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Base64Payload != nil {
		toSerialize["base64Payload"] = o.Base64Payload
	}
	if o.HexPayload != nil {
		toSerialize["hexPayload"] = o.HexPayload
	}
	if true {
		toSerialize["msisdns"] = o.Msisdns
	}
	if true {
		toSerialize["serverPhoneNumber"] = o.ServerPhoneNumber
	}
	if o.TextPayload != nil {
		toSerialize["textPayload"] = o.TextPayload
	}
	return json.Marshal(toSerialize)
}

type NullableSMSConnectorSendSMSReqWeb struct {
	value *SMSConnectorSendSMSReqWeb
	isSet bool
}

func (v NullableSMSConnectorSendSMSReqWeb) Get() *SMSConnectorSendSMSReqWeb {
	return v.value
}

func (v *NullableSMSConnectorSendSMSReqWeb) Set(val *SMSConnectorSendSMSReqWeb) {
	v.value = val
	v.isSet = true
}

func (v NullableSMSConnectorSendSMSReqWeb) IsSet() bool {
	return v.isSet
}

func (v *NullableSMSConnectorSendSMSReqWeb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMSConnectorSendSMSReqWeb(val *SMSConnectorSendSMSReqWeb) *NullableSMSConnectorSendSMSReqWeb {
	return &NullableSMSConnectorSendSMSReqWeb{value: val, isSet: true}
}

func (v NullableSMSConnectorSendSMSReqWeb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMSConnectorSendSMSReqWeb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


