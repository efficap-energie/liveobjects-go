/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ActivityRule defines the targets and the triggering behavior to watch for silent devices
type ActivityRule struct {
	// activate or not the ActivityRule. Default is false.
	Enabled *bool `json:"enabled,omitempty"`
	// id of the ActivityRule. Should be null when used for POST.
	Id *string `json:"id,omitempty"`
	// user-defined name for the rule, must be unique and not empty.
	Name string `json:"name"`
	SilentPolicy SilentPolicy `json:"silentPolicy"`
	// list of tags that will be set on alarms triggered by this rule. e.g. 'level:HIGH'
	Tags *[]string `json:"tags,omitempty"`
	Targets Targets `json:"targets"`
}

// NewActivityRule instantiates a new ActivityRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityRule(name string, silentPolicy SilentPolicy, targets Targets, ) *ActivityRule {
	this := ActivityRule{}
	this.Name = name
	this.SilentPolicy = silentPolicy
	this.Targets = targets
	return &this
}

// NewActivityRuleWithDefaults instantiates a new ActivityRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityRuleWithDefaults() *ActivityRule {
	this := ActivityRule{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ActivityRule) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityRule) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ActivityRule) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ActivityRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActivityRule) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityRule) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActivityRule) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActivityRule) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ActivityRule) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ActivityRule) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ActivityRule) SetName(v string) {
	o.Name = v
}

// GetSilentPolicy returns the SilentPolicy field value
func (o *ActivityRule) GetSilentPolicy() SilentPolicy {
	if o == nil  {
		var ret SilentPolicy
		return ret
	}

	return o.SilentPolicy
}

// GetSilentPolicyOk returns a tuple with the SilentPolicy field value
// and a boolean to check if the value has been set.
func (o *ActivityRule) GetSilentPolicyOk() (*SilentPolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SilentPolicy, true
}

// SetSilentPolicy sets field value
func (o *ActivityRule) SetSilentPolicy(v SilentPolicy) {
	o.SilentPolicy = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ActivityRule) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityRule) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ActivityRule) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ActivityRule) SetTags(v []string) {
	o.Tags = &v
}

// GetTargets returns the Targets field value
func (o *ActivityRule) GetTargets() Targets {
	if o == nil  {
		var ret Targets
		return ret
	}

	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value
// and a boolean to check if the value has been set.
func (o *ActivityRule) GetTargetsOk() (*Targets, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Targets, true
}

// SetTargets sets field value
func (o *ActivityRule) SetTargets(v Targets) {
	o.Targets = v
}

func (o ActivityRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["silentPolicy"] = o.SilentPolicy
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["targets"] = o.Targets
	}
	return json.Marshal(toSerialize)
}

type NullableActivityRule struct {
	value *ActivityRule
	isSet bool
}

func (v NullableActivityRule) Get() *ActivityRule {
	return v.value
}

func (v *NullableActivityRule) Set(val *ActivityRule) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityRule) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityRule(val *ActivityRule) *NullableActivityRule {
	return &NullableActivityRule{value: val, isSet: true}
}

func (v NullableActivityRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


