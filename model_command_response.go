/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// CommandResponse struct for CommandResponse
type CommandResponse struct {
	// command response value (protocol/connector-dependant)
	Value map[string]interface{} `json:"value"`
}

// NewCommandResponse instantiates a new CommandResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommandResponse(value map[string]interface{}, ) *CommandResponse {
	this := CommandResponse{}
	this.Value = value
	return &this
}

// NewCommandResponseWithDefaults instantiates a new CommandResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandResponseWithDefaults() *CommandResponse {
	this := CommandResponse{}
	return &this
}

// GetValue returns the Value field value
func (o *CommandResponse) GetValue() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CommandResponse) GetValueOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CommandResponse) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o CommandResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableCommandResponse struct {
	value *CommandResponse
	isSet bool
}

func (v NullableCommandResponse) Get() *CommandResponse {
	return v.value
}

func (v *NullableCommandResponse) Set(val *CommandResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandResponse(val *CommandResponse) *NullableCommandResponse {
	return &NullableCommandResponse{value: val, isSet: true}
}

func (v NullableCommandResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


