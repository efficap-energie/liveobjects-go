/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// DecodersCSVApiService DecodersCSVApi service
type DecodersCSVApiService service

type ApiActivateUsingPUT9Request struct {
	ctx _context.Context
	ApiService *DecodersCSVApiService
	decoderId string
	xAPIKEY *string
	enabled *bool
}

func (r ApiActivateUsingPUT9Request) XAPIKEY(xAPIKEY string) ApiActivateUsingPUT9Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiActivateUsingPUT9Request) Enabled(enabled bool) ApiActivateUsingPUT9Request {
	r.enabled = &enabled
	return r
}

func (r ApiActivateUsingPUT9Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ActivateUsingPUT9Execute(r)
}

/*
 * ActivateUsingPUT9 Activate or deactivate a decoder
 * Usage of this API will be reported in your access log under 'data_decoder' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param decoderId id of the csv decoder to activate or deactivate
 * @return ApiActivateUsingPUT9Request
 */
func (a *DecodersCSVApiService) ActivateUsingPUT9(ctx _context.Context, decoderId string) ApiActivateUsingPUT9Request {
	return ApiActivateUsingPUT9Request{
		ApiService: a,
		ctx: ctx,
		decoderId: decoderId,
	}
}

/*
 * Execute executes the request
 */
func (a *DecodersCSVApiService) ActivateUsingPUT9Execute(r ApiActivateUsingPUT9Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersCSVApiService.ActivateUsingPUT9")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/csv/{decoderId}/enabled"
	localVarPath = strings.Replace(localVarPath, "{"+"decoderId"+"}", _neturl.PathEscape(parameterToString(r.decoderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.enabled
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteUsingDELETE10Request struct {
	ctx _context.Context
	ApiService *DecodersCSVApiService
	decoderId string
	xAPIKEY *string
}

func (r ApiDeleteUsingDELETE10Request) XAPIKEY(xAPIKEY string) ApiDeleteUsingDELETE10Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiDeleteUsingDELETE10Request) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteUsingDELETE10Execute(r)
}

/*
 * DeleteUsingDELETE10 Delete a csv decoder
 * Usage of this API will be reported in your access log under 'data_decoder' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param decoderId id of the csv decoder to delete
 * @return ApiDeleteUsingDELETE10Request
 */
func (a *DecodersCSVApiService) DeleteUsingDELETE10(ctx _context.Context, decoderId string) ApiDeleteUsingDELETE10Request {
	return ApiDeleteUsingDELETE10Request{
		ApiService: a,
		ctx: ctx,
		decoderId: decoderId,
	}
}

/*
 * Execute executes the request
 */
func (a *DecodersCSVApiService) DeleteUsingDELETE10Execute(r ApiDeleteUsingDELETE10Request) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersCSVApiService.DeleteUsingDELETE10")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/csv/{decoderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"decoderId"+"}", _neturl.PathEscape(parameterToString(r.decoderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetUsingGET11Request struct {
	ctx _context.Context
	ApiService *DecodersCSVApiService
	decoderId string
	xAPIKEY *string
}

func (r ApiGetUsingGET11Request) XAPIKEY(xAPIKEY string) ApiGetUsingGET11Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetUsingGET11Request) Execute() (CsvPayloadDescription, *_nethttp.Response, error) {
	return r.ApiService.GetUsingGET11Execute(r)
}

/*
 * GetUsingGET11 Retrieve a csv decoder
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param decoderId id of the csv decoder to retrieve
 * @return ApiGetUsingGET11Request
 */
func (a *DecodersCSVApiService) GetUsingGET11(ctx _context.Context, decoderId string) ApiGetUsingGET11Request {
	return ApiGetUsingGET11Request{
		ApiService: a,
		ctx: ctx,
		decoderId: decoderId,
	}
}

/*
 * Execute executes the request
 * @return CsvPayloadDescription
 */
func (a *DecodersCSVApiService) GetUsingGET11Execute(r ApiGetUsingGET11Request) (CsvPayloadDescription, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CsvPayloadDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersCSVApiService.GetUsingGET11")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/csv/{decoderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"decoderId"+"}", _neturl.PathEscape(parameterToString(r.decoderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUsingGET12Request struct {
	ctx _context.Context
	ApiService *DecodersCSVApiService
	xAPIKEY *string
	tags *[]string
}

func (r ApiListUsingGET12Request) XAPIKEY(xAPIKEY string) ApiListUsingGET12Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiListUsingGET12Request) Tags(tags []string) ApiListUsingGET12Request {
	r.tags = &tags
	return r
}

func (r ApiListUsingGET12Request) Execute() ([]CsvPayloadDescription, *_nethttp.Response, error) {
	return r.ApiService.ListUsingGET12Execute(r)
}

/*
 * ListUsingGET12 Retrieve the list of csv decoders filtered by tags
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListUsingGET12Request
 */
func (a *DecodersCSVApiService) ListUsingGET12(ctx _context.Context) ApiListUsingGET12Request {
	return ApiListUsingGET12Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []CsvPayloadDescription
 */
func (a *DecodersCSVApiService) ListUsingGET12Execute(r ApiListUsingGET12Request) ([]CsvPayloadDescription, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []CsvPayloadDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersCSVApiService.ListUsingGET12")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostUsingPOST11Request struct {
	ctx _context.Context
	ApiService *DecodersCSVApiService
	xAPIKEY *string
	csvPayloadDescription *CsvPayloadDescription
}

func (r ApiPostUsingPOST11Request) XAPIKEY(xAPIKEY string) ApiPostUsingPOST11Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiPostUsingPOST11Request) CsvPayloadDescription(csvPayloadDescription CsvPayloadDescription) ApiPostUsingPOST11Request {
	r.csvPayloadDescription = &csvPayloadDescription
	return r
}

func (r ApiPostUsingPOST11Request) Execute() (CsvPayloadDescription, *_nethttp.Response, error) {
	return r.ApiService.PostUsingPOST11Execute(r)
}

/*
 * PostUsingPOST11 Create a csv decoder
 * The number of csv decoders is limited to 100.<br><br>Usage of this API will be reported in your access log under 'data_decoder' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPostUsingPOST11Request
 */
func (a *DecodersCSVApiService) PostUsingPOST11(ctx _context.Context) ApiPostUsingPOST11Request {
	return ApiPostUsingPOST11Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CsvPayloadDescription
 */
func (a *DecodersCSVApiService) PostUsingPOST11Execute(r ApiPostUsingPOST11Request) (CsvPayloadDescription, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CsvPayloadDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersCSVApiService.PostUsingPOST11")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.csvPayloadDescription
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutUsingPUT3Request struct {
	ctx _context.Context
	ApiService *DecodersCSVApiService
	decoderId string
	xAPIKEY *string
	csvPayloadDescription *CsvPayloadDescription
}

func (r ApiPutUsingPUT3Request) XAPIKEY(xAPIKEY string) ApiPutUsingPUT3Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiPutUsingPUT3Request) CsvPayloadDescription(csvPayloadDescription CsvPayloadDescription) ApiPutUsingPUT3Request {
	r.csvPayloadDescription = &csvPayloadDescription
	return r
}

func (r ApiPutUsingPUT3Request) Execute() (CsvPayloadDescription, *_nethttp.Response, error) {
	return r.ApiService.PutUsingPUT3Execute(r)
}

/*
 * PutUsingPUT3 Update a csv decoder
 * Usage of this API will be reported in your access log under 'data_decoder' category.<br><br>Restricted to API keys with at least one of the following roles : DATA_PROCESSING_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param decoderId id of the csv decoder to update
 * @return ApiPutUsingPUT3Request
 */
func (a *DecodersCSVApiService) PutUsingPUT3(ctx _context.Context, decoderId string) ApiPutUsingPUT3Request {
	return ApiPutUsingPUT3Request{
		ApiService: a,
		ctx: ctx,
		decoderId: decoderId,
	}
}

/*
 * Execute executes the request
 * @return CsvPayloadDescription
 */
func (a *DecodersCSVApiService) PutUsingPUT3Execute(r ApiPutUsingPUT3Request) (CsvPayloadDescription, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CsvPayloadDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersCSVApiService.PutUsingPUT3")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/csv/{decoderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"decoderId"+"}", _neturl.PathEscape(parameterToString(r.decoderId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.csvPayloadDescription
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTestUsingPOST3Request struct {
	ctx _context.Context
	ApiService *DecodersCSVApiService
	xAPIKEY *string
	dataDecodingTestRequest *CsvPayloadDescriptionTestRequest
}

func (r ApiTestUsingPOST3Request) XAPIKEY(xAPIKEY string) ApiTestUsingPOST3Request {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiTestUsingPOST3Request) DataDecodingTestRequest(dataDecodingTestRequest CsvPayloadDescriptionTestRequest) ApiTestUsingPOST3Request {
	r.dataDecodingTestRequest = &dataDecodingTestRequest
	return r
}

func (r ApiTestUsingPOST3Request) Execute() (PayloadDescriptionTestResult, *_nethttp.Response, error) {
	return r.ApiService.TestUsingPOST3Execute(r)
}

/*
 * TestUsingPOST3 Test a csv decoder format with an encoded payload
 * Restricted to API keys with at least one of the following roles : DATA_PROCESSING_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiTestUsingPOST3Request
 */
func (a *DecodersCSVApiService) TestUsingPOST3(ctx _context.Context) ApiTestUsingPOST3Request {
	return ApiTestUsingPOST3Request{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PayloadDescriptionTestResult
 */
func (a *DecodersCSVApiService) TestUsingPOST3Execute(r ApiTestUsingPOST3Request) (PayloadDescriptionTestResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PayloadDescriptionTestResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DecodersCSVApiService.TestUsingPOST3")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/decoders/csv/test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.dataDecodingTestRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
