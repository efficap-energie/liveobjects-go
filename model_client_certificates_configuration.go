/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ClientCertificatesConfiguration struct for ClientCertificatesConfiguration
type ClientCertificatesConfiguration struct {
	// List of Ca Certificate Ids used to authenticate devices. Expected array of string (max 100 elements, value max 255 characters)
	CaCertIds *[]string `json:"caCertIds,omitempty"`
	// Indicates if the client must use TLS client cert authentication
	Required *bool `json:"required,omitempty"`
}

// NewClientCertificatesConfiguration instantiates a new ClientCertificatesConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientCertificatesConfiguration() *ClientCertificatesConfiguration {
	this := ClientCertificatesConfiguration{}
	return &this
}

// NewClientCertificatesConfigurationWithDefaults instantiates a new ClientCertificatesConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientCertificatesConfigurationWithDefaults() *ClientCertificatesConfiguration {
	this := ClientCertificatesConfiguration{}
	return &this
}

// GetCaCertIds returns the CaCertIds field value if set, zero value otherwise.
func (o *ClientCertificatesConfiguration) GetCaCertIds() []string {
	if o == nil || o.CaCertIds == nil {
		var ret []string
		return ret
	}
	return *o.CaCertIds
}

// GetCaCertIdsOk returns a tuple with the CaCertIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientCertificatesConfiguration) GetCaCertIdsOk() (*[]string, bool) {
	if o == nil || o.CaCertIds == nil {
		return nil, false
	}
	return o.CaCertIds, true
}

// HasCaCertIds returns a boolean if a field has been set.
func (o *ClientCertificatesConfiguration) HasCaCertIds() bool {
	if o != nil && o.CaCertIds != nil {
		return true
	}

	return false
}

// SetCaCertIds gets a reference to the given []string and assigns it to the CaCertIds field.
func (o *ClientCertificatesConfiguration) SetCaCertIds(v []string) {
	o.CaCertIds = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ClientCertificatesConfiguration) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientCertificatesConfiguration) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ClientCertificatesConfiguration) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ClientCertificatesConfiguration) SetRequired(v bool) {
	o.Required = &v
}

func (o ClientCertificatesConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CaCertIds != nil {
		toSerialize["caCertIds"] = o.CaCertIds
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	return json.Marshal(toSerialize)
}

type NullableClientCertificatesConfiguration struct {
	value *ClientCertificatesConfiguration
	isSet bool
}

func (v NullableClientCertificatesConfiguration) Get() *ClientCertificatesConfiguration {
	return v.value
}

func (v *NullableClientCertificatesConfiguration) Set(val *ClientCertificatesConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableClientCertificatesConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableClientCertificatesConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientCertificatesConfiguration(val *ClientCertificatesConfiguration) *NullableClientCertificatesConfiguration {
	return &NullableClientCertificatesConfiguration{value: val, isSet: true}
}

func (v NullableClientCertificatesConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientCertificatesConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


