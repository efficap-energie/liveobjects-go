/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// SMSConnectorBusinessSettingsUpdateReqWeb SMS Connector Business Settings in Update Request
type SMSConnectorBusinessSettingsUpdateReqWeb struct {
	// decoder name ex: \"decoderName\"
	DecoderName *string `json:"decoderName,omitempty"`
	// device's SIM Card identifier ex: \"33666666667\"
	Msisdns *[]Msisdns `json:"msisdns,omitempty"`
	// new decoder name ex: \"newDecoderName\"
	NewDecoderName *string `json:"newDecoderName,omitempty"`
}

// NewSMSConnectorBusinessSettingsUpdateReqWeb instantiates a new SMSConnectorBusinessSettingsUpdateReqWeb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMSConnectorBusinessSettingsUpdateReqWeb() *SMSConnectorBusinessSettingsUpdateReqWeb {
	this := SMSConnectorBusinessSettingsUpdateReqWeb{}
	return &this
}

// NewSMSConnectorBusinessSettingsUpdateReqWebWithDefaults instantiates a new SMSConnectorBusinessSettingsUpdateReqWeb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMSConnectorBusinessSettingsUpdateReqWebWithDefaults() *SMSConnectorBusinessSettingsUpdateReqWeb {
	this := SMSConnectorBusinessSettingsUpdateReqWeb{}
	return &this
}

// GetDecoderName returns the DecoderName field value if set, zero value otherwise.
func (o *SMSConnectorBusinessSettingsUpdateReqWeb) GetDecoderName() string {
	if o == nil || o.DecoderName == nil {
		var ret string
		return ret
	}
	return *o.DecoderName
}

// GetDecoderNameOk returns a tuple with the DecoderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSConnectorBusinessSettingsUpdateReqWeb) GetDecoderNameOk() (*string, bool) {
	if o == nil || o.DecoderName == nil {
		return nil, false
	}
	return o.DecoderName, true
}

// HasDecoderName returns a boolean if a field has been set.
func (o *SMSConnectorBusinessSettingsUpdateReqWeb) HasDecoderName() bool {
	if o != nil && o.DecoderName != nil {
		return true
	}

	return false
}

// SetDecoderName gets a reference to the given string and assigns it to the DecoderName field.
func (o *SMSConnectorBusinessSettingsUpdateReqWeb) SetDecoderName(v string) {
	o.DecoderName = &v
}

// GetMsisdns returns the Msisdns field value if set, zero value otherwise.
func (o *SMSConnectorBusinessSettingsUpdateReqWeb) GetMsisdns() []Msisdns {
	if o == nil || o.Msisdns == nil {
		var ret []Msisdns
		return ret
	}
	return *o.Msisdns
}

// GetMsisdnsOk returns a tuple with the Msisdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSConnectorBusinessSettingsUpdateReqWeb) GetMsisdnsOk() (*[]Msisdns, bool) {
	if o == nil || o.Msisdns == nil {
		return nil, false
	}
	return o.Msisdns, true
}

// HasMsisdns returns a boolean if a field has been set.
func (o *SMSConnectorBusinessSettingsUpdateReqWeb) HasMsisdns() bool {
	if o != nil && o.Msisdns != nil {
		return true
	}

	return false
}

// SetMsisdns gets a reference to the given []Msisdns and assigns it to the Msisdns field.
func (o *SMSConnectorBusinessSettingsUpdateReqWeb) SetMsisdns(v []Msisdns) {
	o.Msisdns = &v
}

// GetNewDecoderName returns the NewDecoderName field value if set, zero value otherwise.
func (o *SMSConnectorBusinessSettingsUpdateReqWeb) GetNewDecoderName() string {
	if o == nil || o.NewDecoderName == nil {
		var ret string
		return ret
	}
	return *o.NewDecoderName
}

// GetNewDecoderNameOk returns a tuple with the NewDecoderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SMSConnectorBusinessSettingsUpdateReqWeb) GetNewDecoderNameOk() (*string, bool) {
	if o == nil || o.NewDecoderName == nil {
		return nil, false
	}
	return o.NewDecoderName, true
}

// HasNewDecoderName returns a boolean if a field has been set.
func (o *SMSConnectorBusinessSettingsUpdateReqWeb) HasNewDecoderName() bool {
	if o != nil && o.NewDecoderName != nil {
		return true
	}

	return false
}

// SetNewDecoderName gets a reference to the given string and assigns it to the NewDecoderName field.
func (o *SMSConnectorBusinessSettingsUpdateReqWeb) SetNewDecoderName(v string) {
	o.NewDecoderName = &v
}

func (o SMSConnectorBusinessSettingsUpdateReqWeb) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DecoderName != nil {
		toSerialize["decoderName"] = o.DecoderName
	}
	if o.Msisdns != nil {
		toSerialize["msisdns"] = o.Msisdns
	}
	if o.NewDecoderName != nil {
		toSerialize["newDecoderName"] = o.NewDecoderName
	}
	return json.Marshal(toSerialize)
}

type NullableSMSConnectorBusinessSettingsUpdateReqWeb struct {
	value *SMSConnectorBusinessSettingsUpdateReqWeb
	isSet bool
}

func (v NullableSMSConnectorBusinessSettingsUpdateReqWeb) Get() *SMSConnectorBusinessSettingsUpdateReqWeb {
	return v.value
}

func (v *NullableSMSConnectorBusinessSettingsUpdateReqWeb) Set(val *SMSConnectorBusinessSettingsUpdateReqWeb) {
	v.value = val
	v.isSet = true
}

func (v NullableSMSConnectorBusinessSettingsUpdateReqWeb) IsSet() bool {
	return v.isSet
}

func (v *NullableSMSConnectorBusinessSettingsUpdateReqWeb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMSConnectorBusinessSettingsUpdateReqWeb(val *SMSConnectorBusinessSettingsUpdateReqWeb) *NullableSMSConnectorBusinessSettingsUpdateReqWeb {
	return &NullableSMSConnectorBusinessSettingsUpdateReqWeb{value: val, isSet: true}
}

func (v NullableSMSConnectorBusinessSettingsUpdateReqWeb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMSConnectorBusinessSettingsUpdateReqWeb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


