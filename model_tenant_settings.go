/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// TenantSettings struct for TenantSettings
type TenantSettings struct {
	Settings *map[string]SettingsSection `json:"settings,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
}

// NewTenantSettings instantiates a new TenantSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantSettings() *TenantSettings {
	this := TenantSettings{}
	return &this
}

// NewTenantSettingsWithDefaults instantiates a new TenantSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantSettingsWithDefaults() *TenantSettings {
	this := TenantSettings{}
	return &this
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *TenantSettings) GetSettings() map[string]SettingsSection {
	if o == nil || o.Settings == nil {
		var ret map[string]SettingsSection
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantSettings) GetSettingsOk() (*map[string]SettingsSection, bool) {
	if o == nil || o.Settings == nil {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *TenantSettings) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]SettingsSection and assigns it to the Settings field.
func (o *TenantSettings) SetSettings(v map[string]SettingsSection) {
	o.Settings = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *TenantSettings) GetTenantId() string {
	if o == nil || o.TenantId == nil {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantSettings) GetTenantIdOk() (*string, bool) {
	if o == nil || o.TenantId == nil {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *TenantSettings) HasTenantId() bool {
	if o != nil && o.TenantId != nil {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *TenantSettings) SetTenantId(v string) {
	o.TenantId = &v
}

func (o TenantSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	if o.TenantId != nil {
		toSerialize["tenantId"] = o.TenantId
	}
	return json.Marshal(toSerialize)
}

type NullableTenantSettings struct {
	value *TenantSettings
	isSet bool
}

func (v NullableTenantSettings) Get() *TenantSettings {
	return v.value
}

func (v *NullableTenantSettings) Set(val *TenantSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantSettings(val *TenantSettings) *NullableTenantSettings {
	return &NullableTenantSettings{value: val, isSet: true}
}

func (v NullableTenantSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


