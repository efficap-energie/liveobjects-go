/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementInterfacesV1ApiService DeviceManagementInterfacesV1Api service
type DeviceManagementInterfacesV1ApiService service

type ApiAddInterfaceToDeviceUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementInterfacesV1ApiService
	deviceId string
	xAPIKEY *string
	newDeviceInterface *NewDeviceInterface
}

func (r ApiAddInterfaceToDeviceUsingPOSTRequest) XAPIKEY(xAPIKEY string) ApiAddInterfaceToDeviceUsingPOSTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiAddInterfaceToDeviceUsingPOSTRequest) NewDeviceInterface(newDeviceInterface NewDeviceInterface) ApiAddInterfaceToDeviceUsingPOSTRequest {
	r.newDeviceInterface = &newDeviceInterface
	return r
}

func (r ApiAddInterfaceToDeviceUsingPOSTRequest) Execute() (DeviceInterface, *_nethttp.Response, error) {
	return r.ApiService.AddInterfaceToDeviceUsingPOSTExecute(r)
}

/*
 * AddInterfaceToDeviceUsingPOST Add an interface to a registered device
 * <p>The <strong>definition</strong> depends on connector.</p><p><span style="text-decoration: underline;">Lora definition</span>:</p><ul><li>"devEUI": interface EUI</li><li>"appEUI": appEUI of the interface</li><li>"appKey": appKey of the interface</li><li>"activationType": supported value: "OTAA"</li><li>"profile": profile of the interface</li><li>"encoding": (Optional) encoding used in message's payload (use /decoders APIs to define your own decoder)</li><li>"connectivityOptions": connectivity options used for the interface </li><ul><li>"tdoa": true/false </li><li>"ackUl": true/false</li></ul><li>"connectivityPlan": connectivity plan to use for the interface. Should be used preferably at connectivityOptions but at least one of two shall be defined.</li></ul><p><span style="text-decoration: underline;">SMS definition</span>:</p><ul><li>"msisdn": interface msisdn</li><li>"serverPhoneNumber": (Optional) server phone number</li><li>"encoding": (Optional) name of the decoder that will be used to decode received SMS</li></ul><p><span style="text-decoration: underline;">MQTT definition</span>:</p><ul><li>"clientId": interface client ID</li><li>"encoding": (Optional) encoding used in message's payload (use /decoders APIs to define your own decoder)</li></ul><p><span style="text-decoration: underline;">X-CONNECTOR definition</span>:</p><ul><li>"nodeId": id used by the external connector to identify the communicating device (e.g. PUB connector/v1/nodes/{nodeId}/status)</li><li>"encoding": (Optional) encoding used in message's payload (use /decoders APIs to define your own decoder)</li></ul><br><br>Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @return ApiAddInterfaceToDeviceUsingPOSTRequest
 */
func (a *DeviceManagementInterfacesV1ApiService) AddInterfaceToDeviceUsingPOST(ctx _context.Context, deviceId string) ApiAddInterfaceToDeviceUsingPOSTRequest {
	return ApiAddInterfaceToDeviceUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
	}
}

/*
 * Execute executes the request
 * @return DeviceInterface
 */
func (a *DeviceManagementInterfacesV1ApiService) AddInterfaceToDeviceUsingPOSTExecute(r ApiAddInterfaceToDeviceUsingPOSTRequest) (DeviceInterface, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DeviceInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementInterfacesV1ApiService.AddInterfaceToDeviceUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}/interfaces"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.newDeviceInterface
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteInterfaceUsingDELETERequest struct {
	ctx _context.Context
	ApiService *DeviceManagementInterfacesV1ApiService
	deviceId string
	interfaceId string
	xAPIKEY *string
}

func (r ApiDeleteInterfaceUsingDELETERequest) XAPIKEY(xAPIKEY string) ApiDeleteInterfaceUsingDELETERequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiDeleteInterfaceUsingDELETERequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteInterfaceUsingDELETEExecute(r)
}

/*
 * DeleteInterfaceUsingDELETE Delete an interface
 * Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @param interfaceId Must be {connector}:{nodeId}.
 * @return ApiDeleteInterfaceUsingDELETERequest
 */
func (a *DeviceManagementInterfacesV1ApiService) DeleteInterfaceUsingDELETE(ctx _context.Context, deviceId string, interfaceId string) ApiDeleteInterfaceUsingDELETERequest {
	return ApiDeleteInterfaceUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
		interfaceId: interfaceId,
	}
}

/*
 * Execute executes the request
 */
func (a *DeviceManagementInterfacesV1ApiService) DeleteInterfaceUsingDELETEExecute(r ApiDeleteInterfaceUsingDELETERequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementInterfacesV1ApiService.DeleteInterfaceUsingDELETE")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}/interfaces/{interfaceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", _neturl.PathEscape(parameterToString(r.interfaceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetInterfaceForADeviceUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementInterfacesV1ApiService
	deviceId string
	interfaceId string
	xAPIKEY *string
}

func (r ApiGetInterfaceForADeviceUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetInterfaceForADeviceUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetInterfaceForADeviceUsingGETRequest) Execute() (DeviceInterface, *_nethttp.Response, error) {
	return r.ApiService.GetInterfaceForADeviceUsingGETExecute(r)
}

/*
 * GetInterfaceForADeviceUsingGET Get a specific interface for a registered device
 * <p>The <strong>definition</strong> depends on connector.</p><p><span style="text-decoration: underline;">Lora definition</span>:</p><ul><li>"devEUI": interface EUI</li><li>"appEUI": appEUI of the interface</li><li>"appKey": appKey of the interface</li><li>"activationType": supported value: "OTAA"</li><li>"profile": profile of the interface</li><li>"encoding": (Optional) encoding used in message's payload (use /decoders APIs to define your own decoder)</li><li>"connectivityOptions": connectivity options used for the interface </li><ul><li>"tdoa": true/false </li><li>"ackUl": true/false</li></ul><li>"connectivityPlan": connectivity plan to use for the interface. Should be used preferably at connectivityOptions but at least one of two shall be defined.</li></ul><p><span style="text-decoration: underline;">SMS definition</span>:</p><ul><li>"msisdn": interface msisdn</li><li>"serverPhoneNumber": (Optional) server phone number</li><li>"encoding": (Optional) name of the decoder that will be used to decode received SMS</li></ul><p><span style="text-decoration: underline;">MQTT definition</span>:</p><ul><li>"clientId": interface client ID</li><li>"encoding": (Optional) encoding used in message's payload (use /decoders APIs to define your own decoder)</li></ul><p><span style="text-decoration: underline;">X-CONNECTOR definition</span>:</p><ul><li>"nodeId": id used by the external connector to identify the communicating device (e.g. PUB connector/v1/nodes/{nodeId}/status)</li><li>"encoding": (Optional) encoding used in message's payload (use /decoders APIs to define your own decoder)</li></ul><br /><p>The <strong>activity</strong> depends on connector.</p><p><span style="text-decoration: underline;">Lora activity</span>:</p><ul><li>"lastActivationTs": (Optional) last activation date of the interface</li><li>"lastDeactivationTs": (Optional) last deactivation date of the interface</li><li>"lastSignalLevel": (Optional) last signal level</li><li>"lastBatteryLevel": (Optional) last battery level</li><li>"lastDlFcnt": (Optional) last downlink frame counter</li><li>"lastUlFcnt": (Optional) last uplink frame counter</li></ul><p><span style="text-decoration: underline;">SMS activity</span>:</p><ul><li>"lastUplink": (Optional) last uplink date of the interface</li><ul><li>"timestamp": date of the activity</li><li>"serverPhoneNumber": server phone number used</li></ul><li>"lastDownlink": (Optional) last downlink date of the connector node</li><ul><li>"timestamp": date of the activity</li><li>"serverPhoneNumber": server phone number used</li></ul></ul><p><span style="text-decoration: underline;">MQTT activity</span>:</p><ul><li>"apiKeyId": api key ID used</li><li>"mqttVersion": mqtt version used</li><li>"mqttUsername": mqtt username used</li><li>"mqttTimeout": mqtt timeout</li><li>"remoteAddress"</li><li>"lastSessionStartTime"</li><li>"lastSessionEndTime"</li></ul><br><br>Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @param interfaceId Must be {connector}:{nodeId}
 * @return ApiGetInterfaceForADeviceUsingGETRequest
 */
func (a *DeviceManagementInterfacesV1ApiService) GetInterfaceForADeviceUsingGET(ctx _context.Context, deviceId string, interfaceId string) ApiGetInterfaceForADeviceUsingGETRequest {
	return ApiGetInterfaceForADeviceUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
		interfaceId: interfaceId,
	}
}

/*
 * Execute executes the request
 * @return DeviceInterface
 */
func (a *DeviceManagementInterfacesV1ApiService) GetInterfaceForADeviceUsingGETExecute(r ApiGetInterfaceForADeviceUsingGETRequest) (DeviceInterface, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DeviceInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementInterfacesV1ApiService.GetInterfaceForADeviceUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}/interfaces/{interfaceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", _neturl.PathEscape(parameterToString(r.interfaceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInterfacesForADeviceUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementInterfacesV1ApiService
	deviceId string
	xAPIKEY *string
}

func (r ApiListInterfacesForADeviceUsingGETRequest) XAPIKEY(xAPIKEY string) ApiListInterfacesForADeviceUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiListInterfacesForADeviceUsingGETRequest) Execute() ([]DeviceInterface, *_nethttp.Response, error) {
	return r.ApiService.ListInterfacesForADeviceUsingGETExecute(r)
}

/*
 * ListInterfacesForADeviceUsingGET Get the interface list for a registered device
 * <p>The <strong>definition</strong> depends on connector.</p><p><span style="text-decoration: underline;">Lora definition</span>:</p><ul><li>"devEUI": interface EUI</li><li>"appEUI": appEUI of the interface</li><li>"appKey": appKey of the interface</li><li>"activationType": supported value: "OTAA"</li><li>"profile": profile of the interface</li><li>"encoding": (Optional) encoding used in message's payload (use /decoders APIs to define your own decoder)</li><li>"connectivityOptions": connectivity options used for the interface </li><ul><li>"tdoa": true/false </li><li>"ackUl": true/false</li></ul><li>"connectivityPlan": connectivity plan to use for the interface. Should be used preferably at connectivityOptions but at least one of two shall be defined.</li></ul><p><span style="text-decoration: underline;">SMS definition</span>:</p><ul><li>"msisdn": interface msisdn</li><li>"serverPhoneNumber": (Optional) server phone number</li><li>"encoding": (Optional) name of the decoder that will be used to decode received SMS</li></ul><p><span style="text-decoration: underline;">MQTT definition</span>:</p><ul><li>"clientId": interface client ID</li><li>"encoding": (Optional) encoding used in message's payload (use /decoders APIs to define your own decoder)</li></ul><p><span style="text-decoration: underline;">X-CONNECTOR definition</span>:</p><ul><li>"nodeId": id used by the external connector to identify the communicating device (e.g. PUB connector/v1/nodes/{nodeId}/status)</li><li>"encoding": (Optional) encoding used in message's payload (use /decoders APIs to define your own decoder)</li></ul><br /><p>The <strong>activity</strong> depends on connector.</p><p><span style="text-decoration: underline;">Lora activity</span>:</p><ul><li>"lastActivationTs": (Optional) last activation date of the interface</li><li>"lastDeactivationTs": (Optional) last deactivation date of the interface</li><li>"lastSignalLevel": (Optional) last signal level</li><li>"lastBatteryLevel": (Optional) last battery level</li><li>"lastDlFcnt": (Optional) last downlink frame counter</li><li>"lastUlFcnt": (Optional) last uplink frame counter</li></ul><p><span style="text-decoration: underline;">SMS activity</span>:</p><ul><li>"lastUplink": (Optional) last uplink date of the interface</li><ul><li>"timestamp": date of the activity</li><li>"serverPhoneNumber": server phone number used</li></ul><li>"lastDownlink": (Optional) last downlink date of the connector node</li><ul><li>"timestamp": date of the activity</li><li>"serverPhoneNumber": server phone number used</li></ul></ul><p><span style="text-decoration: underline;">MQTT activity</span>:</p><ul><li>"apiKeyId": api key ID used</li><li>"mqttVersion": mqtt version used</li><li>"mqttUsername": mqtt username used</li><li>"mqttTimeout": mqtt timeout</li><li>"remoteAddress"</li><li>"lastSessionStartTime"</li><li>"lastSessionEndTime"</li></ul><br><br>Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @return ApiListInterfacesForADeviceUsingGETRequest
 */
func (a *DeviceManagementInterfacesV1ApiService) ListInterfacesForADeviceUsingGET(ctx _context.Context, deviceId string) ApiListInterfacesForADeviceUsingGETRequest {
	return ApiListInterfacesForADeviceUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
	}
}

/*
 * Execute executes the request
 * @return []DeviceInterface
 */
func (a *DeviceManagementInterfacesV1ApiService) ListInterfacesForADeviceUsingGETExecute(r ApiListInterfacesForADeviceUsingGETRequest) ([]DeviceInterface, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []DeviceInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementInterfacesV1ApiService.ListInterfacesForADeviceUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}/interfaces"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateInterfaceUsingPATCHRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementInterfacesV1ApiService
	deviceId string
	interfaceId string
	xAPIKEY *string
	body *UpdateInterfaceReqWeb
}

func (r ApiUpdateInterfaceUsingPATCHRequest) XAPIKEY(xAPIKEY string) ApiUpdateInterfaceUsingPATCHRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiUpdateInterfaceUsingPATCHRequest) Body(body UpdateInterfaceReqWeb) ApiUpdateInterfaceUsingPATCHRequest {
	r.body = &body
	return r
}

func (r ApiUpdateInterfaceUsingPATCHRequest) Execute() (DeviceInterface, *_nethttp.Response, error) {
	return r.ApiService.UpdateInterfaceUsingPATCHExecute(r)
}

/*
 * UpdateInterfaceUsingPATCH Update an interface
 * <p>The <strong>definition</strong> depends on connector.</p><p><span style="text-decoration: underline;">Lora definition</span>:</p><ul><li>"devEUI": interface EUI</li><li>"appEUI": appEUI of the interface</li><li>"appKey": appKey of the interface</li><li>"activationType": supported value: "OTAA"</li><li>"profile": profile of the interface</li><li>"encoding": (Optional) encoding used in message's payload (use /decoders APIs to define your own decoder)</li><li>"connectivityOptions": connectivity options used for the interface </li><ul><li>"tdoa": true/false </li><li>"ackUl": true/false</li></ul><li>"connectivityPlan": connectivity plan to use for the interface. Should be used preferably at connectivityOptions but at least one of two shall be defined.</li></ul><p><span style="text-decoration: underline;">SMS definition</span>:</p><ul><li>"msisdn": interface msisdn</li><li>"serverPhoneNumber": (Optional) server phone number</li><li>"encoding": (Optional) name of the decoder that will be used to decode received SMS</li></ul><p><span style="text-decoration: underline;">MQTT definition</span>:</p><ul><li>"clientId": interface client ID</li><li>"encoding": (Optional) encoding used in message's payload (use /decoders APIs to define your own decoder)</li></ul><p><span style="text-decoration: underline;">X-CONNECTOR definition</span>:</p><ul><li>"nodeId": id used by the external connector to identify the communicating device (e.g. PUB connector/v1/nodes/{nodeId}/status)</li><li>"encoding": (Optional) encoding used in message's payload (use /decoders APIs to define your own decoder)</li></ul><br><br>Usage of this API will be reported in your access log under 'device_inventory' category.<br><br>Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param deviceId device identifier. A Live Objects URN 'urn:lo:nsid:{namespace}:{id}' must respect the following regular expression <code>^urn:lo:nsid:([\\w\\-_]{1,128}):([\\w\\-_:]{1,128})$</code> (max 269 characters)
 * @param interfaceId Must be {connector}:{nodeId}
 * @return ApiUpdateInterfaceUsingPATCHRequest
 */
func (a *DeviceManagementInterfacesV1ApiService) UpdateInterfaceUsingPATCH(ctx _context.Context, deviceId string, interfaceId string) ApiUpdateInterfaceUsingPATCHRequest {
	return ApiUpdateInterfaceUsingPATCHRequest{
		ApiService: a,
		ctx: ctx,
		deviceId: deviceId,
		interfaceId: interfaceId,
	}
}

/*
 * Execute executes the request
 * @return DeviceInterface
 */
func (a *DeviceManagementInterfacesV1ApiService) UpdateInterfaceUsingPATCHExecute(r ApiUpdateInterfaceUsingPATCHRequest) (DeviceInterface, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DeviceInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementInterfacesV1ApiService.UpdateInterfaceUsingPATCH")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/deviceMgt/devices/{deviceId}/interfaces/{interfaceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceId"+"}", _neturl.PathEscape(parameterToString(r.deviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", _neturl.PathEscape(parameterToString(r.interfaceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
