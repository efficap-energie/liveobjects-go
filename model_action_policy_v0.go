/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// ActionPolicyV0 Object describing the relationship between triggers (message or events)  and actions (email, sms, fifo push or http push)
type ActionPolicyV0 struct {
	Actions *Actions `json:"actions,omitempty"`
	// Enable or disable this action policy
	Enabled *bool `json:"enabled,omitempty"`
	Id *string `json:"id,omitempty"`
	// The user-defined name of the action policy
	Name *string `json:"name,omitempty"`
	Triggers *ActionTriggersV0 `json:"triggers,omitempty"`
}

// NewActionPolicyV0 instantiates a new ActionPolicyV0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionPolicyV0() *ActionPolicyV0 {
	this := ActionPolicyV0{}
	return &this
}

// NewActionPolicyV0WithDefaults instantiates a new ActionPolicyV0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionPolicyV0WithDefaults() *ActionPolicyV0 {
	this := ActionPolicyV0{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *ActionPolicyV0) GetActions() Actions {
	if o == nil || o.Actions == nil {
		var ret Actions
		return ret
	}
	return *o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionPolicyV0) GetActionsOk() (*Actions, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *ActionPolicyV0) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given Actions and assigns it to the Actions field.
func (o *ActionPolicyV0) SetActions(v Actions) {
	o.Actions = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ActionPolicyV0) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionPolicyV0) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ActionPolicyV0) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ActionPolicyV0) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActionPolicyV0) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionPolicyV0) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActionPolicyV0) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActionPolicyV0) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActionPolicyV0) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionPolicyV0) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActionPolicyV0) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ActionPolicyV0) SetName(v string) {
	o.Name = &v
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *ActionPolicyV0) GetTriggers() ActionTriggersV0 {
	if o == nil || o.Triggers == nil {
		var ret ActionTriggersV0
		return ret
	}
	return *o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionPolicyV0) GetTriggersOk() (*ActionTriggersV0, bool) {
	if o == nil || o.Triggers == nil {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *ActionPolicyV0) HasTriggers() bool {
	if o != nil && o.Triggers != nil {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given ActionTriggersV0 and assigns it to the Triggers field.
func (o *ActionPolicyV0) SetTriggers(v ActionTriggersV0) {
	o.Triggers = &v
}

func (o ActionPolicyV0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Triggers != nil {
		toSerialize["triggers"] = o.Triggers
	}
	return json.Marshal(toSerialize)
}

type NullableActionPolicyV0 struct {
	value *ActionPolicyV0
	isSet bool
}

func (v NullableActionPolicyV0) Get() *ActionPolicyV0 {
	return v.value
}

func (v *NullableActionPolicyV0) Set(val *ActionPolicyV0) {
	v.value = val
	v.isSet = true
}

func (v NullableActionPolicyV0) IsSet() bool {
	return v.isSet
}

func (v *NullableActionPolicyV0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionPolicyV0(val *ActionPolicyV0) *NullableActionPolicyV0 {
	return &NullableActionPolicyV0{value: val, isSet: true}
}

func (v NullableActionPolicyV0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionPolicyV0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


