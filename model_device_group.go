/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// DeviceGroup References to a device associated group
type DeviceGroup struct {
	// group identifier. Expected string (max 6 characters)
	Id *string `json:"id,omitempty"`
	// group path. Authorized: letter (lowercase and uppercase), accented characters, number, space, dash, underscore and simple quote. A valid path must respect the following regular expression <code>^[\\wÀ-ÖØ-öø-ÿ' -]{1,255}</code>.Expected string (max 255 characters)
	Path *string `json:"path,omitempty"`
}

// NewDeviceGroup instantiates a new DeviceGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceGroup() *DeviceGroup {
	this := DeviceGroup{}
	return &this
}

// NewDeviceGroupWithDefaults instantiates a new DeviceGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceGroupWithDefaults() *DeviceGroup {
	this := DeviceGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceGroup) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceGroup) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceGroup) SetId(v string) {
	o.Id = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DeviceGroup) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceGroup) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DeviceGroup) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *DeviceGroup) SetPath(v string) {
	o.Path = &v
}

func (o DeviceGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceGroup struct {
	value *DeviceGroup
	isSet bool
}

func (v NullableDeviceGroup) Get() *DeviceGroup {
	return v.value
}

func (v *NullableDeviceGroup) Set(val *DeviceGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceGroup(val *DeviceGroup) *NullableDeviceGroup {
	return &NullableDeviceGroup{value: val, isSet: true}
}

func (v NullableDeviceGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


