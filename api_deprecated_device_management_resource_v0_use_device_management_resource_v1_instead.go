/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApi service
type DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService service

type ApiCancelResourceUpdateUsingPOSTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService
	assetIdNamespace string
	assetId string
	xAPIKEY *string
	force *bool
}

func (r ApiCancelResourceUpdateUsingPOSTRequest) XAPIKEY(xAPIKEY string) ApiCancelResourceUpdateUsingPOSTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiCancelResourceUpdateUsingPOSTRequest) Force(force bool) ApiCancelResourceUpdateUsingPOSTRequest {
	r.force = &force
	return r
}

func (r ApiCancelResourceUpdateUsingPOSTRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CancelResourceUpdateUsingPOSTExecute(r)
}

/*
 * CancelResourceUpdateUsingPOST Cancel asset resource update
 * Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetIdNamespace the asset id namespace. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId the asset id. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @return ApiCancelResourceUpdateUsingPOSTRequest
 */
func (a *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService) CancelResourceUpdateUsingPOST(ctx _context.Context, assetIdNamespace string, assetId string) ApiCancelResourceUpdateUsingPOSTRequest {
	return ApiCancelResourceUpdateUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
		assetIdNamespace: assetIdNamespace,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 */
func (a *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService) CancelResourceUpdateUsingPOSTExecute(r ApiCancelResourceUpdateUsingPOSTRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService.CancelResourceUpdateUsingPOST")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/rm/asset/{assetIdNamespace}/{assetId}/cancelUpdate"
	localVarPath = strings.Replace(localVarPath, "{"+"assetIdNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetIdNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllAssetResourcesUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService
	assetIdNamespace string
	assetId string
	xAPIKEY *string
	size *int32
	page *int32
}

func (r ApiGetAllAssetResourcesUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetAllAssetResourcesUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiGetAllAssetResourcesUsingGETRequest) Size(size int32) ApiGetAllAssetResourcesUsingGETRequest {
	r.size = &size
	return r
}
func (r ApiGetAllAssetResourcesUsingGETRequest) Page(page int32) ApiGetAllAssetResourcesUsingGETRequest {
	r.page = &page
	return r
}

func (r ApiGetAllAssetResourcesUsingGETRequest) Execute() (PageableAssetResourceWeb, *_nethttp.Response, error) {
	return r.ApiService.GetAllAssetResourcesUsingGETExecute(r)
}

/*
 * GetAllAssetResourcesUsingGET List the asset's resources (use /api/v1/deviceMgt/devices/{deviceId}/resources instead)
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetIdNamespace the asset id namespace. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId the asset id. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @return ApiGetAllAssetResourcesUsingGETRequest
 */
func (a *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService) GetAllAssetResourcesUsingGET(ctx _context.Context, assetIdNamespace string, assetId string) ApiGetAllAssetResourcesUsingGETRequest {
	return ApiGetAllAssetResourcesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		assetIdNamespace: assetIdNamespace,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 * @return PageableAssetResourceWeb
 */
func (a *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService) GetAllAssetResourcesUsingGETExecute(r ApiGetAllAssetResourcesUsingGETRequest) (PageableAssetResourceWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageableAssetResourceWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService.GetAllAssetResourcesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/rm/asset/{assetIdNamespace}/{assetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"assetIdNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetIdNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLastUpdateUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService
	assetIdNamespace string
	assetId string
	xAPIKEY *string
	resourceId *string
}

func (r ApiGetLastUpdateUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetLastUpdateUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiGetLastUpdateUsingGETRequest) ResourceId(resourceId string) ApiGetLastUpdateUsingGETRequest {
	r.resourceId = &resourceId
	return r
}

func (r ApiGetLastUpdateUsingGETRequest) Execute() (ResourceUpdateWeb, *_nethttp.Response, error) {
	return r.ApiService.GetLastUpdateUsingGETExecute(r)
}

/*
 * GetLastUpdateUsingGET Get the asset's resources update status (use /api/v1/deviceMgt/devices/{deviceId}/firmwares/{firmwareId}/lastUpdate instead)
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetIdNamespace the asset id namespace. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId the asset id. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @return ApiGetLastUpdateUsingGETRequest
 */
func (a *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService) GetLastUpdateUsingGET(ctx _context.Context, assetIdNamespace string, assetId string) ApiGetLastUpdateUsingGETRequest {
	return ApiGetLastUpdateUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		assetIdNamespace: assetIdNamespace,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 * @return ResourceUpdateWeb
 */
func (a *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService) GetLastUpdateUsingGETExecute(r ApiGetLastUpdateUsingGETRequest) (ResourceUpdateWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResourceUpdateWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService.GetLastUpdateUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/rm/asset/{assetIdNamespace}/{assetId}/update"
	localVarPath = strings.Replace(localVarPath, "{"+"assetIdNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetIdNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.resourceId != nil {
		localVarQueryParams.Add("resourceId", parameterToString(*r.resourceId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUpdateHistoryUsingGETRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService
	assetIdNamespace string
	assetId string
	xAPIKEY *string
	size *int32
	page *int32
}

func (r ApiGetUpdateHistoryUsingGETRequest) XAPIKEY(xAPIKEY string) ApiGetUpdateHistoryUsingGETRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiGetUpdateHistoryUsingGETRequest) Size(size int32) ApiGetUpdateHistoryUsingGETRequest {
	r.size = &size
	return r
}
func (r ApiGetUpdateHistoryUsingGETRequest) Page(page int32) ApiGetUpdateHistoryUsingGETRequest {
	r.page = &page
	return r
}

func (r ApiGetUpdateHistoryUsingGETRequest) Execute() (PageableResourceUpdateWeb, *_nethttp.Response, error) {
	return r.ApiService.GetUpdateHistoryUsingGETExecute(r)
}

/*
 * GetUpdateHistoryUsingGET Get the asset's resources update history (use /api/v1/deviceMgt/devices/{deviceId}/firmwareUpdates instead)
 * Restricted to API keys with at least one of the following roles : DEVICE_R.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetIdNamespace the asset id namespace. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId the asset id. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @return ApiGetUpdateHistoryUsingGETRequest
 */
func (a *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService) GetUpdateHistoryUsingGET(ctx _context.Context, assetIdNamespace string, assetId string) ApiGetUpdateHistoryUsingGETRequest {
	return ApiGetUpdateHistoryUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		assetIdNamespace: assetIdNamespace,
		assetId: assetId,
	}
}

/*
 * Execute executes the request
 * @return PageableResourceUpdateWeb
 */
func (a *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService) GetUpdateHistoryUsingGETExecute(r ApiGetUpdateHistoryUsingGETRequest) (PageableResourceUpdateWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PageableResourceUpdateWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService.GetUpdateHistoryUsingGET")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/rm/asset/{assetIdNamespace}/{assetId}/update/history"
	localVarPath = strings.Replace(localVarPath, "{"+"assetIdNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetIdNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetAssetTargetResourceVersionUsingPUTRequest struct {
	ctx _context.Context
	ApiService *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService
	assetIdNamespace string
	assetId string
	resourceId string
	xAPIKEY *string
	notifyTo *string
	targetVersion *AssetSetTargetResourceVersionReqWeb
}

func (r ApiSetAssetTargetResourceVersionUsingPUTRequest) XAPIKEY(xAPIKEY string) ApiSetAssetTargetResourceVersionUsingPUTRequest {
	r.xAPIKEY = &xAPIKEY
	return r
}
func (r ApiSetAssetTargetResourceVersionUsingPUTRequest) NotifyTo(notifyTo string) ApiSetAssetTargetResourceVersionUsingPUTRequest {
	r.notifyTo = &notifyTo
	return r
}
func (r ApiSetAssetTargetResourceVersionUsingPUTRequest) TargetVersion(targetVersion AssetSetTargetResourceVersionReqWeb) ApiSetAssetTargetResourceVersionUsingPUTRequest {
	r.targetVersion = &targetVersion
	return r
}

func (r ApiSetAssetTargetResourceVersionUsingPUTRequest) Execute() (AssetResourceWeb, *_nethttp.Response, error) {
	return r.ApiService.SetAssetTargetResourceVersionUsingPUTExecute(r)
}

/*
 * SetAssetTargetResourceVersionUsingPUT Set asset's target resource version (use /api/v1/deviceMgt/devices/{deviceId}/resources/{resourceId} instead)
 * Restricted to API keys with at least one of the following roles : DEVICE_W.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param assetIdNamespace the asset id namespace. Asset namespace must respect the following regular expression <code>([\\w\\-_]{1,128})</code> (max 128 characters)
 * @param assetId the asset id. Asset identifier must respect the following regular expression <code>([\\w\\-_:]{1,128})</code> (max 128 characters)
 * @param resourceId the resource id. Expected string (max 255 characters)
 * @return ApiSetAssetTargetResourceVersionUsingPUTRequest
 */
func (a *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService) SetAssetTargetResourceVersionUsingPUT(ctx _context.Context, assetIdNamespace string, assetId string, resourceId string) ApiSetAssetTargetResourceVersionUsingPUTRequest {
	return ApiSetAssetTargetResourceVersionUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		assetIdNamespace: assetIdNamespace,
		assetId: assetId,
		resourceId: resourceId,
	}
}

/*
 * Execute executes the request
 * @return AssetResourceWeb
 */
func (a *DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService) SetAssetTargetResourceVersionUsingPUTExecute(r ApiSetAssetTargetResourceVersionUsingPUTRequest) (AssetResourceWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AssetResourceWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedDeviceManagementResourceV0UseDeviceManagementResourceV1InsteadApiService.SetAssetTargetResourceVersionUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/rm/asset/{assetIdNamespace}/{assetId}/resource/{resourceId}/targetversion"
	localVarPath = strings.Replace(localVarPath, "{"+"assetIdNamespace"+"}", _neturl.PathEscape(parameterToString(r.assetIdNamespace, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", _neturl.PathEscape(parameterToString(r.assetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resourceId"+"}", _neturl.PathEscape(parameterToString(r.resourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	if r.notifyTo != nil {
		localVarQueryParams.Add("notifyTo", parameterToString(*r.notifyTo, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	// body params
	localVarPostBody = r.targetVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
