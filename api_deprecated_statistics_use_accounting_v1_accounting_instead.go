/*
 * Live Objects REST API Guide v2.12.2
 *
 * API description for Live Objects service
 *
 * API version: 2.12.2
 * Contact: liveobjects.support@orange.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	_bytes "bytes"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeprecatedStatisticsUseAccountingV1AccountingInsteadApiService DeprecatedStatisticsUseAccountingV1AccountingInsteadApi service
type DeprecatedStatisticsUseAccountingV1AccountingInsteadApiService service

/*
GetTenantStatisticsUsingGET3 Get tenant statistics for a specific tenant and a range of dates
There are 2 types of data in the statistics :  &lt;br/&gt;&gt; counters : represent a flow (in/out) and are collected throughout the day. example : counters for device creation or device deletion.&lt;br/&gt;&gt; inventories : represent a stock and are counted once a day. example : the total number of registered devices.&lt;br/&gt;The statistics, provided for a tenant and a range of dates, contain 2 main sections :&lt;br/&gt; &gt; &#39;total&#39;: gives an aggregated view for each service. Counters are summed on the period. Inventories represent the max value on the period,&lt;br/&gt; &gt; &#39;statisticsPerDay&#39;: daily statistics. displays the counter and inventory values for each day and each service.&lt;br/&gt;&lt;br/&gt; The existing sections are:&lt;br/&gt; - Datazone : each service can store (data storage) or access (advanced search) data in an internal dedicated area: datazone regroups all statistics linked to these actions,&lt;br/&gt; - for HTTP requests: restDataZoneQuery (for dataZone/dataSearch), restOthers (for user/mail/sms), restTraffic (for FIFO/PubSub/Router),&lt;br/&gt; - for MQTT : mqttNoSecure, mqttWebSocketNoSecure (with WebSocket), mqttSSL (with SSL), mqttWebSocketSSL (with WebSocket/SSL)&lt;br/&gt; - for SMS : sms_&#39;server phone number&#39;,&lt;br/&gt; - for Devices : the deviceInventory section gives the number of created/deleted devices during the day (counters) and the total number of devices (counted in the beginning of the day at 1.00 am).&lt;br/&gt; - for Msisdn : the msisdnInventory section gives the number of msisdn provisioned/unprovisioned during the day (counters) and the total number of registered msisdns (inventory).&lt;br/&gt; - overall : aggregated connector name; virtual connector containing the data of all the connectors aggregated,&lt;br/&gt;&lt;br/&gt; For the current day, the traffic information is updated within 15 minutes. The number of sources/active devices is updated every minute.&lt;br/&gt;&lt;u&gt;About the virtual messages:&lt;/u&gt;&lt;br/&gt;When the MsgIn / MsgOut message size is bigger than 5 kilobytes, a new indicator MsgVirtualIn / MsgVirtualOut  is used to count the number of packets of 5 kilobytes for that message.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tenantId the id of your tenant ex: 57xxxxxxxxxxxxxxxxxxxxxx
 * @param startDate the requested start date as yyyy-MM-dd
 * @param endDate the requested end date as yyyy-MM-dd
 * @param xAPIKEY a valid API key
@return TenantStatsWeb
*/
func (a *DeprecatedStatisticsUseAccountingV1AccountingInsteadApiService) GetTenantStatisticsUsingGET3(ctx _context.Context, tenantId string, startDate string, endDate string, xAPIKEY string) (TenantStatsWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TenantStatsWeb
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v0/statistics/tenant/{tenantId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", _neturl.PathEscape(parameterToString(tenantId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("startDate", parameterToString(startDate, ""))
	localVarQueryParams.Add("endDate", parameterToString(endDate, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(xAPIKEY, "")
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(_bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
