/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeprecatedStatisticsUseAccountingV1AccountingInsteadApiService DeprecatedStatisticsUseAccountingV1AccountingInsteadApi service
type DeprecatedStatisticsUseAccountingV1AccountingInsteadApiService service

type ApiGetTenantStatisticsUsingGET3Request struct {
	ctx _context.Context
	ApiService *DeprecatedStatisticsUseAccountingV1AccountingInsteadApiService
	tenantId string
	startDate *string
	endDate *string
	xAPIKEY *string
}

func (r ApiGetTenantStatisticsUsingGET3Request) StartDate(startDate string) ApiGetTenantStatisticsUsingGET3Request {
	r.startDate = &startDate
	return r
}
func (r ApiGetTenantStatisticsUsingGET3Request) EndDate(endDate string) ApiGetTenantStatisticsUsingGET3Request {
	r.endDate = &endDate
	return r
}
func (r ApiGetTenantStatisticsUsingGET3Request) XAPIKEY(xAPIKEY string) ApiGetTenantStatisticsUsingGET3Request {
	r.xAPIKEY = &xAPIKEY
	return r
}

func (r ApiGetTenantStatisticsUsingGET3Request) Execute() (TenantStatsWeb, *_nethttp.Response, error) {
	return r.ApiService.GetTenantStatisticsUsingGET3Execute(r)
}

/*
 * GetTenantStatisticsUsingGET3 Get tenant statistics for a specific tenant and a range of dates
 * There are 2 types of data in the statistics :  <br/>> counters : represent a flow (in/out) and are collected throughout the day. example : counters for device creation or device deletion.<br/>> inventories : represent a stock and are counted once a day. example : the total number of registered devices.<br/>The statistics, provided for a tenant and a range of dates, contain 2 main sections :<br/> > 'total': gives an aggregated view for each service. Counters are summed on the period. Inventories represent the max value on the period,<br/> > 'statisticsPerDay': daily statistics. displays the counter and inventory values for each day and each service.<br/><br/> The existing sections are:<br/> - Datazone : each service can store (data storage) or access (advanced search) data in an internal dedicated area: datazone regroups all statistics linked to these actions,<br/> - for HTTP requests: restDataZoneQuery (for dataZone/dataSearch), restOthers (for user/mail/sms), restTraffic (for FIFO/PubSub/Router),<br/> - for MQTT : mqttNoSecure, mqttWebSocketNoSecure (with WebSocket), mqttSSL (with SSL), mqttWebSocketSSL (with WebSocket/SSL)<br/> - for SMS : sms_'server phone number',<br/> - for Devices : the deviceInventory section gives the number of created/deleted devices during the day (counters) and the total number of devices (counted in the beginning of the day at 1.00 am). It also gives statistics on device connections/disconnections (counters).<br/> - for Msisdn : the msisdnInventory section gives the number of msisdn provisioned/unprovisioned during the day (counters) and the total number of registered msisdns (inventory).<br/> - overall : aggregated connector name; virtual connector containing the data of all the connectors aggregated,<br/><br/> For the current day, the traffic information is updated within 15 minutes. The number of sources/active devices is updated every minute.<br/><u>About the virtual messages:</u><br/>When the MsgIn / MsgOut message size is bigger than 5 kilobytes, a new indicator MsgVirtualIn / MsgVirtualOut  is used to count the number of packets of 5 kilobytes for that message.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tenantId the id of your tenant ex: 57xxxxxxxxxxxxxxxxxxxxxx
 * @return ApiGetTenantStatisticsUsingGET3Request
 */
func (a *DeprecatedStatisticsUseAccountingV1AccountingInsteadApiService) GetTenantStatisticsUsingGET3(ctx _context.Context, tenantId string) ApiGetTenantStatisticsUsingGET3Request {
	return ApiGetTenantStatisticsUsingGET3Request{
		ApiService: a,
		ctx: ctx,
		tenantId: tenantId,
	}
}

/*
 * Execute executes the request
 * @return TenantStatsWeb
 */
func (a *DeprecatedStatisticsUseAccountingV1AccountingInsteadApiService) GetTenantStatisticsUsingGET3Execute(r ApiGetTenantStatisticsUsingGET3Request) (TenantStatsWeb, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TenantStatsWeb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeprecatedStatisticsUseAccountingV1AccountingInsteadApiService.GetTenantStatisticsUsingGET3")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/statistics/tenant/{tenantId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", _neturl.PathEscape(parameterToString(r.tenantId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}
	if r.xAPIKEY == nil {
		return localVarReturnValue, nil, reportError("xAPIKEY is required and must be specified")
	}

	localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["X-API-KEY"] = parameterToString(*r.xAPIKEY, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponseWeb
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
