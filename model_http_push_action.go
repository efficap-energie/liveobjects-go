/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// HttpPushAction struct for HttpPushAction
type HttpPushAction struct {
	// A raw string or a mustache (https://mustache.github.io/mustache.5.html) template describing the webhook body. If empty, the raw event will be used.
	Content *string `json:"content,omitempty"`
	// A map of header to be passed in the http POST headers
	Headers *map[string][]string `json:"headers,omitempty"`
	// The json path to extract from the considered message (or event), it will be taken as the root datacontext object when combined with a mustache template in content
	JsonPath *string `json:"jsonPath,omitempty"`
	// Indicate if a retry policy should be set up in case of a http push delivery failure
	RetryOnFailure *bool `json:"retryOnFailure,omitempty"`
	// The url of the target service webhook (only the ports 80, 443, 8080, 8443 and 9243 are allowed).
	WebhookUrl string `json:"webhookUrl"`
}

// NewHttpPushAction instantiates a new HttpPushAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpPushAction(webhookUrl string, ) *HttpPushAction {
	this := HttpPushAction{}
	this.WebhookUrl = webhookUrl
	return &this
}

// NewHttpPushActionWithDefaults instantiates a new HttpPushAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpPushActionWithDefaults() *HttpPushAction {
	this := HttpPushAction{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *HttpPushAction) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpPushAction) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *HttpPushAction) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *HttpPushAction) SetContent(v string) {
	o.Content = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *HttpPushAction) GetHeaders() map[string][]string {
	if o == nil || o.Headers == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpPushAction) GetHeadersOk() (*map[string][]string, bool) {
	if o == nil || o.Headers == nil {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *HttpPushAction) HasHeaders() bool {
	if o != nil && o.Headers != nil {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string][]string and assigns it to the Headers field.
func (o *HttpPushAction) SetHeaders(v map[string][]string) {
	o.Headers = &v
}

// GetJsonPath returns the JsonPath field value if set, zero value otherwise.
func (o *HttpPushAction) GetJsonPath() string {
	if o == nil || o.JsonPath == nil {
		var ret string
		return ret
	}
	return *o.JsonPath
}

// GetJsonPathOk returns a tuple with the JsonPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpPushAction) GetJsonPathOk() (*string, bool) {
	if o == nil || o.JsonPath == nil {
		return nil, false
	}
	return o.JsonPath, true
}

// HasJsonPath returns a boolean if a field has been set.
func (o *HttpPushAction) HasJsonPath() bool {
	if o != nil && o.JsonPath != nil {
		return true
	}

	return false
}

// SetJsonPath gets a reference to the given string and assigns it to the JsonPath field.
func (o *HttpPushAction) SetJsonPath(v string) {
	o.JsonPath = &v
}

// GetRetryOnFailure returns the RetryOnFailure field value if set, zero value otherwise.
func (o *HttpPushAction) GetRetryOnFailure() bool {
	if o == nil || o.RetryOnFailure == nil {
		var ret bool
		return ret
	}
	return *o.RetryOnFailure
}

// GetRetryOnFailureOk returns a tuple with the RetryOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpPushAction) GetRetryOnFailureOk() (*bool, bool) {
	if o == nil || o.RetryOnFailure == nil {
		return nil, false
	}
	return o.RetryOnFailure, true
}

// HasRetryOnFailure returns a boolean if a field has been set.
func (o *HttpPushAction) HasRetryOnFailure() bool {
	if o != nil && o.RetryOnFailure != nil {
		return true
	}

	return false
}

// SetRetryOnFailure gets a reference to the given bool and assigns it to the RetryOnFailure field.
func (o *HttpPushAction) SetRetryOnFailure(v bool) {
	o.RetryOnFailure = &v
}

// GetWebhookUrl returns the WebhookUrl field value
func (o *HttpPushAction) GetWebhookUrl() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.WebhookUrl
}

// GetWebhookUrlOk returns a tuple with the WebhookUrl field value
// and a boolean to check if the value has been set.
func (o *HttpPushAction) GetWebhookUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WebhookUrl, true
}

// SetWebhookUrl sets field value
func (o *HttpPushAction) SetWebhookUrl(v string) {
	o.WebhookUrl = v
}

func (o HttpPushAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if o.JsonPath != nil {
		toSerialize["jsonPath"] = o.JsonPath
	}
	if o.RetryOnFailure != nil {
		toSerialize["retryOnFailure"] = o.RetryOnFailure
	}
	if true {
		toSerialize["webhookUrl"] = o.WebhookUrl
	}
	return json.Marshal(toSerialize)
}

type NullableHttpPushAction struct {
	value *HttpPushAction
	isSet bool
}

func (v NullableHttpPushAction) Get() *HttpPushAction {
	return v.value
}

func (v *NullableHttpPushAction) Set(val *HttpPushAction) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpPushAction) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpPushAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpPushAction(val *HttpPushAction) *NullableHttpPushAction {
	return &NullableHttpPushAction{value: val, isSet: true}
}

func (v NullableHttpPushAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpPushAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


