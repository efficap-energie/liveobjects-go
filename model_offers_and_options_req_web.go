/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// OffersAndOptionsReqWeb struct for OffersAndOptionsReqWeb
type OffersAndOptionsReqWeb struct {
	// Rule's display name Discover/Premium
	DisplayName *string `json:"displayName,omitempty"`
	// Rule's name
	Name *string `json:"name,omitempty"`
	// Rule's type OFFER/OPTION
	Type *string `json:"type,omitempty"`
}

// NewOffersAndOptionsReqWeb instantiates a new OffersAndOptionsReqWeb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffersAndOptionsReqWeb() *OffersAndOptionsReqWeb {
	this := OffersAndOptionsReqWeb{}
	return &this
}

// NewOffersAndOptionsReqWebWithDefaults instantiates a new OffersAndOptionsReqWeb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffersAndOptionsReqWebWithDefaults() *OffersAndOptionsReqWeb {
	this := OffersAndOptionsReqWeb{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *OffersAndOptionsReqWeb) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffersAndOptionsReqWeb) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *OffersAndOptionsReqWeb) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *OffersAndOptionsReqWeb) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OffersAndOptionsReqWeb) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffersAndOptionsReqWeb) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OffersAndOptionsReqWeb) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OffersAndOptionsReqWeb) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OffersAndOptionsReqWeb) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffersAndOptionsReqWeb) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OffersAndOptionsReqWeb) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OffersAndOptionsReqWeb) SetType(v string) {
	o.Type = &v
}

func (o OffersAndOptionsReqWeb) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableOffersAndOptionsReqWeb struct {
	value *OffersAndOptionsReqWeb
	isSet bool
}

func (v NullableOffersAndOptionsReqWeb) Get() *OffersAndOptionsReqWeb {
	return v.value
}

func (v *NullableOffersAndOptionsReqWeb) Set(val *OffersAndOptionsReqWeb) {
	v.value = val
	v.isSet = true
}

func (v NullableOffersAndOptionsReqWeb) IsSet() bool {
	return v.isSet
}

func (v *NullableOffersAndOptionsReqWeb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffersAndOptionsReqWeb(val *OffersAndOptionsReqWeb) *NullableOffersAndOptionsReqWeb {
	return &NullableOffersAndOptionsReqWeb{value: val, isSet: true}
}

func (v NullableOffersAndOptionsReqWeb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffersAndOptionsReqWeb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


