/*
 * Live Objects REST API Guide v2.13.3
 *
 * API description for Live Objects service
 *
 * API version: 2.13.3
 * Contact: liveobjects.support@orange.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package liveobjects

import (
	"encoding/json"
)

// SilentPolicy defines the triggering behavior for silent devices
type SilentPolicy struct {
	// the duration (ISO 8601) after which the device will be considered as silent if it had no contact with the platform. If less than 10 minutes, this duration will be handled as a 10 minutes delay. A silent event/alarm will be sent after expiration.
	Duration string `json:"duration"`
	// if the device previously triggered a silent alarm and still had no contact with the platform; duration (ISO 8601) after which a new silent event/alarm will be sent. If less than 10 minutes, this duration will be handled as a 10 minutes delay. If null, no further alarm will be sent until the new active/silent cycle.
	RepeatInterval *string `json:"repeatInterval,omitempty"`
}

// NewSilentPolicy instantiates a new SilentPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSilentPolicy(duration string, ) *SilentPolicy {
	this := SilentPolicy{}
	this.Duration = duration
	return &this
}

// NewSilentPolicyWithDefaults instantiates a new SilentPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSilentPolicyWithDefaults() *SilentPolicy {
	this := SilentPolicy{}
	return &this
}

// GetDuration returns the Duration field value
func (o *SilentPolicy) GetDuration() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *SilentPolicy) GetDurationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *SilentPolicy) SetDuration(v string) {
	o.Duration = v
}

// GetRepeatInterval returns the RepeatInterval field value if set, zero value otherwise.
func (o *SilentPolicy) GetRepeatInterval() string {
	if o == nil || o.RepeatInterval == nil {
		var ret string
		return ret
	}
	return *o.RepeatInterval
}

// GetRepeatIntervalOk returns a tuple with the RepeatInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SilentPolicy) GetRepeatIntervalOk() (*string, bool) {
	if o == nil || o.RepeatInterval == nil {
		return nil, false
	}
	return o.RepeatInterval, true
}

// HasRepeatInterval returns a boolean if a field has been set.
func (o *SilentPolicy) HasRepeatInterval() bool {
	if o != nil && o.RepeatInterval != nil {
		return true
	}

	return false
}

// SetRepeatInterval gets a reference to the given string and assigns it to the RepeatInterval field.
func (o *SilentPolicy) SetRepeatInterval(v string) {
	o.RepeatInterval = &v
}

func (o SilentPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["duration"] = o.Duration
	}
	if o.RepeatInterval != nil {
		toSerialize["repeatInterval"] = o.RepeatInterval
	}
	return json.Marshal(toSerialize)
}

type NullableSilentPolicy struct {
	value *SilentPolicy
	isSet bool
}

func (v NullableSilentPolicy) Get() *SilentPolicy {
	return v.value
}

func (v *NullableSilentPolicy) Set(val *SilentPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableSilentPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableSilentPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSilentPolicy(val *SilentPolicy) *NullableSilentPolicy {
	return &NullableSilentPolicy{value: val, isSet: true}
}

func (v NullableSilentPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSilentPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


